//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/PotatoHD/Documents/GitHub/parallelDB/paralleldb/Parse\SQLiteParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SqlParser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class SQLiteParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SCOL=1, DOT=2, OPEN_PAR=3, CLOSE_PAR=4, COMMA=5, ASSIGN=6, STAR=7, PLUS=8, 
		MINUS=9, TILDE=10, PIPE2=11, DIV=12, MOD=13, LT2=14, GT2=15, AMP=16, PIPE=17, 
		LT=18, LT_EQ=19, GT=20, GT_EQ=21, EQ=22, NOT_EQ1=23, NOT_EQ2=24, ABORT=25, 
		ACTION=26, ADD=27, AFTER=28, ALL=29, ALTER=30, ANALYZE=31, AND=32, AS=33, 
		ASC=34, ATTACH=35, AUTOINCREMENT=36, BEFORE=37, BEGIN=38, BETWEEN=39, 
		BY=40, CASCADE=41, CASE=42, CAST=43, CHECK=44, COLLATE=45, COLUMN=46, 
		COMMIT=47, CONFLICT=48, CONSTRAINT=49, CREATE=50, CROSS=51, CURRENT_DATE=52, 
		CURRENT_TIME=53, CURRENT_TIMESTAMP=54, DATABASE=55, DEFAULT=56, DEFERRABLE=57, 
		DEFERRED=58, DELETE=59, DESC=60, DETACH=61, DISTINCT=62, DROP=63, EACH=64, 
		ELSE=65, END=66, ESCAPE=67, EXCEPT=68, EXCLUSIVE=69, EXISTS=70, EXPLAIN=71, 
		FAIL=72, FOR=73, FOREIGN=74, FROM=75, FULL=76, GLOB=77, GROUP=78, HAVING=79, 
		IF=80, IGNORE=81, IMMEDIATE=82, IN=83, INDEX=84, INDEXED=85, INITIALLY=86, 
		INNER=87, INSERT=88, INSTEAD=89, INTERSECT=90, INTO=91, IS=92, ISNULL=93, 
		JOIN=94, KEY=95, LEFT=96, LIKE=97, LIMIT=98, MATCH=99, NATURAL=100, NO=101, 
		NOT=102, NOTNULL=103, NULL=104, OF=105, OFFSET=106, ON=107, OR=108, ORDER=109, 
		OUTER=110, PLAN=111, PRAGMA=112, PRIMARY=113, QUERY=114, RAISE=115, RECURSIVE=116, 
		REFERENCES=117, REGEXP=118, REINDEX=119, RELEASE=120, RENAME=121, REPLACE=122, 
		RESTRICT=123, RETURNING=124, RIGHT=125, ROLLBACK=126, ROW=127, ROWS=128, 
		SAVEPOINT=129, SELECT=130, SET=131, TABLE=132, TEMP=133, TEMPORARY=134, 
		THEN=135, TO=136, TRANSACTION=137, TRIGGER=138, UNION=139, UNIQUE=140, 
		UPDATE=141, USING=142, VACUUM=143, VALUES=144, VIEW=145, VIRTUAL=146, 
		WHEN=147, WHERE=148, WITH=149, WITHOUT=150, FIRST_VALUE=151, OVER=152, 
		PARTITION=153, RANGE=154, PRECEDING=155, UNBOUNDED=156, CURRENT=157, FOLLOWING=158, 
		CUME_DIST=159, DENSE_RANK=160, LAG=161, LAST_VALUE=162, LEAD=163, NTH_VALUE=164, 
		NTILE=165, PERCENT_RANK=166, RANK=167, ROW_NUMBER=168, GENERATED=169, 
		ALWAYS=170, STORED=171, TRUE=172, FALSE=173, WINDOW=174, NULLS=175, FIRST=176, 
		LAST=177, FILTER=178, GROUPS=179, EXCLUDE=180, TIES=181, OTHERS=182, DO=183, 
		NOTHING=184, IDENTIFIER=185, NUMERIC_LITERAL=186, BIND_PARAMETER=187, 
		STRING_LITERAL=188, BLOB_LITERAL=189, SINGLE_LINE_COMMENT=190, MULTILINE_COMMENT=191, 
		SPACES=192, UNEXPECTED_CHAR=193;
	public const int
		RULE_parse = 0, RULE_sql_stmt_list = 1, RULE_sql_stmt = 2, RULE_alter_table_stmt = 3, 
		RULE_analyze_stmt = 4, RULE_attach_stmt = 5, RULE_begin_stmt = 6, RULE_commit_stmt = 7, 
		RULE_rollback_stmt = 8, RULE_savepoint_stmt = 9, RULE_release_stmt = 10, 
		RULE_create_index_stmt = 11, RULE_indexed_column = 12, RULE_create_table_stmt = 13, 
		RULE_column_def = 14, RULE_type_name = 15, RULE_column_constraint = 16, 
		RULE_signed_number = 17, RULE_table_constraint = 18, RULE_foreign_key_clause = 19, 
		RULE_conflict_clause = 20, RULE_create_trigger_stmt = 21, RULE_create_view_stmt = 22, 
		RULE_create_virtual_table_stmt = 23, RULE_with_clause = 24, RULE_cte_table_name = 25, 
		RULE_recursive_cte = 26, RULE_common_table_expression = 27, RULE_delete_stmt = 28, 
		RULE_delete_stmt_limited = 29, RULE_detach_stmt = 30, RULE_drop_stmt = 31, 
		RULE_expr = 32, RULE_raise_function = 33, RULE_literal_value = 34, RULE_columns_clause = 35, 
		RULE_insert_stmt = 36, RULE_returning_clause = 37, RULE_upsert_clause = 38, 
		RULE_pragma_stmt = 39, RULE_pragma_value = 40, RULE_reindex_stmt = 41, 
		RULE_select_stmt = 42, RULE_join_clause = 43, RULE_where_clause = 44, 
		RULE_group_by_clause = 45, RULE_having_clause = 46, RULE_values_clause = 47, 
		RULE_values_stmt = 48, RULE_from_clause = 49, RULE_window_clause = 50, 
		RULE_select_core = 51, RULE_factored_select_stmt = 52, RULE_simple_select_stmt = 53, 
		RULE_compound_select_stmt = 54, RULE_table_or_subquery = 55, RULE_result_column = 56, 
		RULE_join_operator = 57, RULE_join_constraint = 58, RULE_compound_operator = 59, 
		RULE_update_stmt = 60, RULE_column_name_list = 61, RULE_update_stmt_limited = 62, 
		RULE_qualified_table_name = 63, RULE_vacuum_stmt = 64, RULE_filter_clause = 65, 
		RULE_window_defn = 66, RULE_over_clause = 67, RULE_frame_spec = 68, RULE_frame_clause = 69, 
		RULE_simple_function_invocation = 70, RULE_aggregate_function_invocation = 71, 
		RULE_window_function_invocation = 72, RULE_common_table_stmt = 73, RULE_order_by_clause = 74, 
		RULE_limit_clause = 75, RULE_offset_clause = 76, RULE_ordering_term = 77, 
		RULE_asc_desc = 78, RULE_frame_left = 79, RULE_frame_right = 80, RULE_frame_single = 81, 
		RULE_window_function = 82, RULE_offset = 83, RULE_default_value = 84, 
		RULE_partition_by = 85, RULE_order_by_expr = 86, RULE_order_by_expr_asc_desc = 87, 
		RULE_expr_asc_desc = 88, RULE_initial_select = 89, RULE_recursive_select = 90, 
		RULE_unary_operator = 91, RULE_error_message = 92, RULE_module_argument = 93, 
		RULE_column_alias = 94, RULE_keyword = 95, RULE_name = 96, RULE_function_name = 97, 
		RULE_schema_name = 98, RULE_table_name = 99, RULE_table_or_index_name = 100, 
		RULE_column_name = 101, RULE_collation_name = 102, RULE_foreign_table = 103, 
		RULE_index_name = 104, RULE_trigger_name = 105, RULE_view_name = 106, 
		RULE_module_name = 107, RULE_pragma_name = 108, RULE_savepoint_name = 109, 
		RULE_table_alias = 110, RULE_transaction_name = 111, RULE_window_name = 112, 
		RULE_alias = 113, RULE_filename = 114, RULE_base_window_name = 115, RULE_simple_func = 116, 
		RULE_aggregate_func = 117, RULE_table_function_name = 118, RULE_any_name = 119;
	public static readonly string[] ruleNames = {
		"parse", "sql_stmt_list", "sql_stmt", "alter_table_stmt", "analyze_stmt", 
		"attach_stmt", "begin_stmt", "commit_stmt", "rollback_stmt", "savepoint_stmt", 
		"release_stmt", "create_index_stmt", "indexed_column", "create_table_stmt", 
		"column_def", "type_name", "column_constraint", "signed_number", "table_constraint", 
		"foreign_key_clause", "conflict_clause", "create_trigger_stmt", "create_view_stmt", 
		"create_virtual_table_stmt", "with_clause", "cte_table_name", "recursive_cte", 
		"common_table_expression", "delete_stmt", "delete_stmt_limited", "detach_stmt", 
		"drop_stmt", "expr", "raise_function", "literal_value", "columns_clause", 
		"insert_stmt", "returning_clause", "upsert_clause", "pragma_stmt", "pragma_value", 
		"reindex_stmt", "select_stmt", "join_clause", "where_clause", "group_by_clause", 
		"having_clause", "values_clause", "values_stmt", "from_clause", "window_clause", 
		"select_core", "factored_select_stmt", "simple_select_stmt", "compound_select_stmt", 
		"table_or_subquery", "result_column", "join_operator", "join_constraint", 
		"compound_operator", "update_stmt", "column_name_list", "update_stmt_limited", 
		"qualified_table_name", "vacuum_stmt", "filter_clause", "window_defn", 
		"over_clause", "frame_spec", "frame_clause", "simple_function_invocation", 
		"aggregate_function_invocation", "window_function_invocation", "common_table_stmt", 
		"order_by_clause", "limit_clause", "offset_clause", "ordering_term", "asc_desc", 
		"frame_left", "frame_right", "frame_single", "window_function", "offset", 
		"default_value", "partition_by", "order_by_expr", "order_by_expr_asc_desc", 
		"expr_asc_desc", "initial_select", "recursive_select", "unary_operator", 
		"error_message", "module_argument", "column_alias", "keyword", "name", 
		"function_name", "schema_name", "table_name", "table_or_index_name", "column_name", 
		"collation_name", "foreign_table", "index_name", "trigger_name", "view_name", 
		"module_name", "pragma_name", "savepoint_name", "table_alias", "transaction_name", 
		"window_name", "alias", "filename", "base_window_name", "simple_func", 
		"aggregate_func", "table_function_name", "any_name"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'.'", "'('", "')'", "','", "'='", "'*'", "'+'", "'-'", "'~'", 
		"'||'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", 
		"'>='", "'=='", "'!='", "'<>'", "'ABORT'", "'ACTION'", "'ADD'", "'AFTER'", 
		"'ALL'", "'ALTER'", "'ANALYZE'", "'AND'", "'AS'", "'ASC'", "'ATTACH'", 
		"'AUTOINCREMENT'", "'BEFORE'", "'BEGIN'", "'BETWEEN'", "'BY'", "'CASCADE'", 
		"'CASE'", "'CAST'", "'CHECK'", "'COLLATE'", "'COLUMN'", "'COMMIT'", "'CONFLICT'", 
		"'CONSTRAINT'", "'CREATE'", "'CROSS'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
		"'CURRENT_TIMESTAMP'", "'DATABASE'", "'DEFAULT'", "'DEFERRABLE'", "'DEFERRED'", 
		"'DELETE'", "'DESC'", "'DETACH'", "'DISTINCT'", "'DROP'", "'EACH'", "'ELSE'", 
		"'END'", "'ESCAPE'", "'EXCEPT'", "'EXCLUSIVE'", "'EXISTS'", "'EXPLAIN'", 
		"'FAIL'", "'FOR'", "'FOREIGN'", "'FROM'", "'FULL'", "'GLOB'", "'GROUP'", 
		"'HAVING'", "'IF'", "'IGNORE'", "'IMMEDIATE'", "'IN'", "'INDEX'", "'INDEXED'", 
		"'INITIALLY'", "'INNER'", "'INSERT'", "'INSTEAD'", "'INTERSECT'", "'INTO'", 
		"'IS'", "'ISNULL'", "'JOIN'", "'KEY'", "'LEFT'", "'LIKE'", "'LIMIT'", 
		"'MATCH'", "'NATURAL'", "'NO'", "'NOT'", "'NOTNULL'", "'NULL'", "'OF'", 
		"'OFFSET'", "'ON'", "'OR'", "'ORDER'", "'OUTER'", "'PLAN'", "'PRAGMA'", 
		"'PRIMARY'", "'QUERY'", "'RAISE'", "'RECURSIVE'", "'REFERENCES'", "'REGEXP'", 
		"'REINDEX'", "'RELEASE'", "'RENAME'", "'REPLACE'", "'RESTRICT'", "'RETURNING'", 
		"'RIGHT'", "'ROLLBACK'", "'ROW'", "'ROWS'", "'SAVEPOINT'", "'SELECT'", 
		"'SET'", "'TABLE'", "'TEMP'", "'TEMPORARY'", "'THEN'", "'TO'", "'TRANSACTION'", 
		"'TRIGGER'", "'UNION'", "'UNIQUE'", "'UPDATE'", "'USING'", "'VACUUM'", 
		"'VALUES'", "'VIEW'", "'VIRTUAL'", "'WHEN'", "'WHERE'", "'WITH'", "'WITHOUT'", 
		"'FIRST_VALUE'", "'OVER'", "'PARTITION'", "'RANGE'", "'PRECEDING'", "'UNBOUNDED'", 
		"'CURRENT'", "'FOLLOWING'", "'CUME_DIST'", "'DENSE_RANK'", "'LAG'", "'LAST_VALUE'", 
		"'LEAD'", "'NTH_VALUE'", "'NTILE'", "'PERCENT_RANK'", "'RANK'", "'ROW_NUMBER'", 
		"'GENERATED'", "'ALWAYS'", "'STORED'", "'TRUE'", "'FALSE'", "'WINDOW'", 
		"'NULLS'", "'FIRST'", "'LAST'", "'FILTER'", "'GROUPS'", "'EXCLUDE'", "'TIES'", 
		"'OTHERS'", "'DO'", "'NOTHING'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", "COMMA", "ASSIGN", "STAR", 
		"PLUS", "MINUS", "TILDE", "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", 
		"PIPE", "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", "ABORT", 
		"ACTION", "ADD", "AFTER", "ALL", "ALTER", "ANALYZE", "AND", "AS", "ASC", 
		"ATTACH", "AUTOINCREMENT", "BEFORE", "BEGIN", "BETWEEN", "BY", "CASCADE", 
		"CASE", "CAST", "CHECK", "COLLATE", "COLUMN", "COMMIT", "CONFLICT", "CONSTRAINT", 
		"CREATE", "CROSS", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
		"DATABASE", "DEFAULT", "DEFERRABLE", "DEFERRED", "DELETE", "DESC", "DETACH", 
		"DISTINCT", "DROP", "EACH", "ELSE", "END", "ESCAPE", "EXCEPT", "EXCLUSIVE", 
		"EXISTS", "EXPLAIN", "FAIL", "FOR", "FOREIGN", "FROM", "FULL", "GLOB", 
		"GROUP", "HAVING", "IF", "IGNORE", "IMMEDIATE", "IN", "INDEX", "INDEXED", 
		"INITIALLY", "INNER", "INSERT", "INSTEAD", "INTERSECT", "INTO", "IS", 
		"ISNULL", "JOIN", "KEY", "LEFT", "LIKE", "LIMIT", "MATCH", "NATURAL", 
		"NO", "NOT", "NOTNULL", "NULL", "OF", "OFFSET", "ON", "OR", "ORDER", "OUTER", 
		"PLAN", "PRAGMA", "PRIMARY", "QUERY", "RAISE", "RECURSIVE", "REFERENCES", 
		"REGEXP", "REINDEX", "RELEASE", "RENAME", "REPLACE", "RESTRICT", "RETURNING", 
		"RIGHT", "ROLLBACK", "ROW", "ROWS", "SAVEPOINT", "SELECT", "SET", "TABLE", 
		"TEMP", "TEMPORARY", "THEN", "TO", "TRANSACTION", "TRIGGER", "UNION", 
		"UNIQUE", "UPDATE", "USING", "VACUUM", "VALUES", "VIEW", "VIRTUAL", "WHEN", 
		"WHERE", "WITH", "WITHOUT", "FIRST_VALUE", "OVER", "PARTITION", "RANGE", 
		"PRECEDING", "UNBOUNDED", "CURRENT", "FOLLOWING", "CUME_DIST", "DENSE_RANK", 
		"LAG", "LAST_VALUE", "LEAD", "NTH_VALUE", "NTILE", "PERCENT_RANK", "RANK", 
		"ROW_NUMBER", "GENERATED", "ALWAYS", "STORED", "TRUE", "FALSE", "WINDOW", 
		"NULLS", "FIRST", "LAST", "FILTER", "GROUPS", "EXCLUDE", "TIES", "OTHERS", 
		"DO", "NOTHING", "IDENTIFIER", "NUMERIC_LITERAL", "BIND_PARAMETER", "STRING_LITERAL", 
		"BLOB_LITERAL", "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", "SPACES", 
		"UNEXPECTED_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SQLiteParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SQLiteParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SQLiteParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SQLiteParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SQLiteParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sql_stmt_listContext[] sql_stmt_list() {
			return GetRuleContexts<Sql_stmt_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_stmt_listContext sql_stmt_list(int i) {
			return GetRuleContext<Sql_stmt_listContext>(i);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & -6339801325483589630L) != 0 || (((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & -7971300971697405919L) != 0 || (((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & 550913L) != 0) {
				{
				{
				State = 240;
				sql_stmt_list();
				}
				}
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 246;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_stmt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sql_stmtContext[] sql_stmt() {
			return GetRuleContexts<Sql_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_stmtContext sql_stmt(int i) {
			return GetRuleContext<Sql_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOL() { return GetTokens(SQLiteParser.SCOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOL(int i) {
			return GetToken(SQLiteParser.SCOL, i);
		}
		public Sql_stmt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_stmt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterSql_stmt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitSql_stmt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_stmt_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_stmt_listContext sql_stmt_list() {
		Sql_stmt_listContext _localctx = new Sql_stmt_listContext(Context, State);
		EnterRule(_localctx, 2, RULE_sql_stmt_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 248;
				Match(SCOL);
				}
				}
				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 254;
			sql_stmt();
			State = 263;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 256;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 255;
						Match(SCOL);
						}
						}
						State = 258;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==SCOL );
					State = 260;
					sql_stmt();
					}
					} 
				}
				State = 265;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 269;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 266;
					Match(SCOL);
					}
					} 
				}
				State = 271;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_stmtContext alter_table_stmt() {
			return GetRuleContext<Alter_table_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_stmtContext analyze_stmt() {
			return GetRuleContext<Analyze_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attach_stmtContext attach_stmt() {
			return GetRuleContext<Attach_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Begin_stmtContext begin_stmt() {
			return GetRuleContext<Begin_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Commit_stmtContext commit_stmt() {
			return GetRuleContext<Commit_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_index_stmtContext create_index_stmt() {
			return GetRuleContext<Create_index_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_stmtContext create_table_stmt() {
			return GetRuleContext<Create_table_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_trigger_stmtContext create_trigger_stmt() {
			return GetRuleContext<Create_trigger_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_view_stmtContext create_view_stmt() {
			return GetRuleContext<Create_view_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_virtual_table_stmtContext create_virtual_table_stmt() {
			return GetRuleContext<Create_virtual_table_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delete_stmtContext delete_stmt() {
			return GetRuleContext<Delete_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delete_stmt_limitedContext delete_stmt_limited() {
			return GetRuleContext<Delete_stmt_limitedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Detach_stmtContext detach_stmt() {
			return GetRuleContext<Detach_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_stmtContext drop_stmt() {
			return GetRuleContext<Drop_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Insert_stmtContext insert_stmt() {
			return GetRuleContext<Insert_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pragma_stmtContext pragma_stmt() {
			return GetRuleContext<Pragma_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reindex_stmtContext reindex_stmt() {
			return GetRuleContext<Reindex_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Release_stmtContext release_stmt() {
			return GetRuleContext<Release_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rollback_stmtContext rollback_stmt() {
			return GetRuleContext<Rollback_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Savepoint_stmtContext savepoint_stmt() {
			return GetRuleContext<Savepoint_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Update_stmtContext update_stmt() {
			return GetRuleContext<Update_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Update_stmt_limitedContext update_stmt_limited() {
			return GetRuleContext<Update_stmt_limitedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Vacuum_stmtContext vacuum_stmt() {
			return GetRuleContext<Vacuum_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(SQLiteParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(SQLiteParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAN() { return GetToken(SQLiteParser.PLAN, 0); }
		public Sql_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterSql_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitSql_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_stmtContext sql_stmt() {
		Sql_stmtContext _localctx = new Sql_stmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_sql_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXPLAIN) {
				{
				State = 272;
				Match(EXPLAIN);
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUERY) {
					{
					State = 273;
					Match(QUERY);
					State = 274;
					Match(PLAN);
					}
				}

				}
			}

			State = 303;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 279;
				alter_table_stmt();
				}
				break;
			case 2:
				{
				State = 280;
				analyze_stmt();
				}
				break;
			case 3:
				{
				State = 281;
				attach_stmt();
				}
				break;
			case 4:
				{
				State = 282;
				begin_stmt();
				}
				break;
			case 5:
				{
				State = 283;
				commit_stmt();
				}
				break;
			case 6:
				{
				State = 284;
				create_index_stmt();
				}
				break;
			case 7:
				{
				State = 285;
				create_table_stmt();
				}
				break;
			case 8:
				{
				State = 286;
				create_trigger_stmt();
				}
				break;
			case 9:
				{
				State = 287;
				create_view_stmt();
				}
				break;
			case 10:
				{
				State = 288;
				create_virtual_table_stmt();
				}
				break;
			case 11:
				{
				State = 289;
				delete_stmt();
				}
				break;
			case 12:
				{
				State = 290;
				delete_stmt_limited();
				}
				break;
			case 13:
				{
				State = 291;
				detach_stmt();
				}
				break;
			case 14:
				{
				State = 292;
				drop_stmt();
				}
				break;
			case 15:
				{
				State = 293;
				insert_stmt();
				}
				break;
			case 16:
				{
				State = 294;
				pragma_stmt();
				}
				break;
			case 17:
				{
				State = 295;
				reindex_stmt();
				}
				break;
			case 18:
				{
				State = 296;
				release_stmt();
				}
				break;
			case 19:
				{
				State = 297;
				rollback_stmt();
				}
				break;
			case 20:
				{
				State = 298;
				savepoint_stmt();
				}
				break;
			case 21:
				{
				State = 299;
				select_stmt();
				}
				break;
			case 22:
				{
				State = 300;
				update_stmt();
				}
				break;
			case 23:
				{
				State = 301;
				update_stmt_limited();
				}
				break;
			case 24:
				{
				State = 302;
				vacuum_stmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_stmtContext : ParserRuleContext {
		public Table_nameContext new_table_name;
		public Column_nameContext old_column_name;
		public Column_nameContext new_column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(SQLiteParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SQLiteParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext[] table_name() {
			return GetRuleContexts<Table_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name(int i) {
			return GetRuleContext<Table_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(SQLiteParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(SQLiteParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_defContext column_def() {
			return GetRuleContext<Column_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(SQLiteParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SQLiteParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(SQLiteParser.COLUMN, 0); }
		public Alter_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_stmtContext alter_table_stmt() {
		Alter_table_stmtContext _localctx = new Alter_table_stmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_alter_table_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			Match(ALTER);
			State = 306;
			Match(TABLE);
			State = 310;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 307;
				schema_name();
				State = 308;
				Match(DOT);
				}
				break;
			}
			State = 312;
			table_name();
			State = 335;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RENAME:
				{
				State = 313;
				Match(RENAME);
				State = 323;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 314;
					Match(TO);
					State = 315;
					_localctx.new_table_name = table_name();
					}
					break;
				case 2:
					{
					State = 317;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						{
						State = 316;
						Match(COLUMN);
						}
						break;
					}
					State = 319;
					_localctx.old_column_name = column_name();
					State = 320;
					Match(TO);
					State = 321;
					_localctx.new_column_name = column_name();
					}
					break;
				}
				}
				break;
			case ADD:
				{
				State = 325;
				Match(ADD);
				State = 327;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 326;
					Match(COLUMN);
					}
					break;
				}
				State = 329;
				column_def();
				}
				break;
			case DROP:
				{
				State = 330;
				Match(DROP);
				State = 332;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 331;
					Match(COLUMN);
					}
					break;
				}
				State = 334;
				column_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Analyze_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(SQLiteParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_or_index_nameContext table_or_index_name() {
			return GetRuleContext<Table_or_index_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		public Analyze_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyze_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterAnalyze_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitAnalyze_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnalyze_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Analyze_stmtContext analyze_stmt() {
		Analyze_stmtContext _localctx = new Analyze_stmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_analyze_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			Match(ANALYZE);
			State = 345;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 338;
				schema_name();
				}
				break;
			case 2:
				{
				State = 342;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 339;
					schema_name();
					State = 340;
					Match(DOT);
					}
					break;
				}
				State = 344;
				table_or_index_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attach_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTACH() { return GetToken(SQLiteParser.ATTACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SQLiteParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(SQLiteParser.DATABASE, 0); }
		public Attach_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attach_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterAttach_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitAttach_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttach_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attach_stmtContext attach_stmt() {
		Attach_stmtContext _localctx = new Attach_stmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_attach_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			Match(ATTACH);
			State = 349;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 348;
				Match(DATABASE);
				}
				break;
			}
			State = 351;
			expr(0);
			State = 352;
			Match(AS);
			State = 353;
			schema_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(SQLiteParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(SQLiteParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED() { return GetToken(SQLiteParser.DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(SQLiteParser.IMMEDIATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE() { return GetToken(SQLiteParser.EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transaction_nameContext transaction_name() {
			return GetRuleContext<Transaction_nameContext>(0);
		}
		public Begin_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterBegin_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitBegin_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBegin_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Begin_stmtContext begin_stmt() {
		Begin_stmtContext _localctx = new Begin_stmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_begin_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355;
			Match(BEGIN);
			State = 357;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & 16779265L) != 0) {
				{
				State = 356;
				_la = TokenStream.LA(1);
				if ( !((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & 16779265L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TRANSACTION) {
				{
				State = 359;
				Match(TRANSACTION);
				State = 361;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
				case 1:
					{
					State = 360;
					transaction_name();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Commit_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(SQLiteParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SQLiteParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(SQLiteParser.TRANSACTION, 0); }
		public Commit_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commit_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterCommit_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitCommit_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommit_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Commit_stmtContext commit_stmt() {
		Commit_stmtContext _localctx = new Commit_stmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_commit_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365;
			_la = TokenStream.LA(1);
			if ( !(_la==COMMIT || _la==END) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TRANSACTION) {
				{
				State = 366;
				Match(TRANSACTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollback_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(SQLiteParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(SQLiteParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SQLiteParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(SQLiteParser.SAVEPOINT, 0); }
		public Rollback_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollback_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterRollback_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitRollback_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollback_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rollback_stmtContext rollback_stmt() {
		Rollback_stmtContext _localctx = new Rollback_stmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_rollback_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			Match(ROLLBACK);
			State = 371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TRANSACTION) {
				{
				State = 370;
				Match(TRANSACTION);
				}
			}

			State = 378;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TO) {
				{
				State = 373;
				Match(TO);
				State = 375;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 374;
					Match(SAVEPOINT);
					}
					break;
				}
				State = 377;
				savepoint_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Savepoint_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(SQLiteParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		public Savepoint_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepoint_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterSavepoint_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitSavepoint_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepoint_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Savepoint_stmtContext savepoint_stmt() {
		Savepoint_stmtContext _localctx = new Savepoint_stmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_savepoint_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			Match(SAVEPOINT);
			State = 381;
			savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Release_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(SQLiteParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(SQLiteParser.SAVEPOINT, 0); }
		public Release_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_release_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterRelease_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitRelease_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelease_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Release_stmtContext release_stmt() {
		Release_stmtContext _localctx = new Release_stmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_release_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			Match(RELEASE);
			State = 385;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 384;
				Match(SAVEPOINT);
				}
				break;
			}
			State = 387;
			savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_index_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SQLiteParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(SQLiteParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(SQLiteParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Indexed_columnContext[] indexed_column() {
			return GetRuleContexts<Indexed_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Indexed_columnContext indexed_column(int i) {
			return GetRuleContext<Indexed_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(SQLiteParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SQLiteParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SQLiteParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SQLiteParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(SQLiteParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Create_index_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_index_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterCreate_index_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitCreate_index_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_index_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_index_stmtContext create_index_stmt() {
		Create_index_stmtContext _localctx = new Create_index_stmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_create_index_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			Match(CREATE);
			State = 391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNIQUE) {
				{
				State = 390;
				Match(UNIQUE);
				}
			}

			State = 393;
			Match(INDEX);
			State = 397;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 394;
				Match(IF);
				State = 395;
				Match(NOT);
				State = 396;
				Match(EXISTS);
				}
				break;
			}
			State = 402;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 399;
				schema_name();
				State = 400;
				Match(DOT);
				}
				break;
			}
			State = 404;
			index_name();
			State = 405;
			Match(ON);
			State = 406;
			table_name();
			State = 407;
			Match(OPEN_PAR);
			State = 408;
			indexed_column();
			State = 413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 409;
				Match(COMMA);
				State = 410;
				indexed_column();
				}
				}
				State = 415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 416;
			Match(CLOSE_PAR);
			State = 419;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 417;
				Match(WHERE);
				State = 418;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexed_columnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(SQLiteParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Asc_descContext asc_desc() {
			return GetRuleContext<Asc_descContext>(0);
		}
		public Indexed_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexed_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterIndexed_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitIndexed_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexed_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexed_columnContext indexed_column() {
		Indexed_columnContext _localctx = new Indexed_columnContext(Context, State);
		EnterRule(_localctx, 24, RULE_indexed_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 421;
				column_name();
				}
				break;
			case 2:
				{
				State = 422;
				expr(0);
				}
				break;
			}
			State = 427;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLLATE) {
				{
				State = 425;
				Match(COLLATE);
				State = 426;
				collation_name();
				}
			}

			State = 430;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 429;
				asc_desc();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_stmtContext : ParserRuleContext {
		public IToken row_ROW_ID;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SQLiteParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SQLiteParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_defContext[] column_def() {
			return GetRuleContexts<Column_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_defContext column_def(int i) {
			return GetRuleContext<Column_defContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SQLiteParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SQLiteParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SQLiteParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SQLiteParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(SQLiteParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(SQLiteParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_constraintContext[] table_constraint() {
			return GetRuleContexts<Table_constraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_constraintContext table_constraint(int i) {
			return GetRuleContext<Table_constraintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(SQLiteParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SQLiteParser.IDENTIFIER, 0); }
		public Create_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterCreate_table_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitCreate_table_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_stmtContext create_table_stmt() {
		Create_table_stmtContext _localctx = new Create_table_stmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_create_table_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 432;
			Match(CREATE);
			State = 434;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 433;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 436;
			Match(TABLE);
			State = 440;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 437;
				Match(IF);
				State = 438;
				Match(NOT);
				State = 439;
				Match(EXISTS);
				}
				break;
			}
			State = 445;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 442;
				schema_name();
				State = 443;
				Match(DOT);
				}
				break;
			}
			State = 447;
			table_name();
			State = 471;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAR:
				{
				State = 448;
				Match(OPEN_PAR);
				State = 449;
				column_def();
				State = 454;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 450;
						Match(COMMA);
						State = 451;
						column_def();
						}
						} 
					}
					State = 456;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
				}
				State = 461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 457;
					Match(COMMA);
					State = 458;
					table_constraint();
					}
					}
					State = 463;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 464;
				Match(CLOSE_PAR);
				State = 467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITHOUT) {
					{
					State = 465;
					Match(WITHOUT);
					State = 466;
					_localctx.row_ROW_ID = Match(IDENTIFIER);
					}
				}

				}
				break;
			case AS:
				{
				State = 469;
				Match(AS);
				State = 470;
				select_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_constraintContext[] column_constraint() {
			return GetRuleContexts<Column_constraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_constraintContext column_constraint(int i) {
			return GetRuleContext<Column_constraintContext>(i);
		}
		public Column_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterColumn_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitColumn_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_defContext column_def() {
		Column_defContext _localctx = new Column_defContext(Context, State);
		EnterRule(_localctx, 28, RULE_column_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			column_name();
			State = 475;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 474;
				type_name();
				}
				break;
			}
			State = 480;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 72673329139417088L) != 0 || (((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & 274877941765L) != 0 || _la==GENERATED) {
				{
				{
				State = 477;
				column_constraint();
				}
				}
				State = 482;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Signed_numberContext[] signed_number() {
			return GetRuleContexts<Signed_numberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Signed_numberContext signed_number(int i) {
			return GetRuleContext<Signed_numberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SQLiteParser.COMMA, 0); }
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 30, RULE_type_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 484;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 483;
					name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 486;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 498;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 488;
				Match(OPEN_PAR);
				State = 489;
				signed_number();
				State = 490;
				Match(CLOSE_PAR);
				}
				break;
			case 2:
				{
				State = 492;
				Match(OPEN_PAR);
				State = 493;
				signed_number();
				State = 494;
				Match(COMMA);
				State = 495;
				signed_number();
				State = 496;
				Match(CLOSE_PAR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(SQLiteParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(SQLiteParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(SQLiteParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Foreign_key_clauseContext foreign_key_clause() {
			return GetRuleContext<Foreign_key_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SQLiteParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(SQLiteParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(SQLiteParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(SQLiteParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(SQLiteParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(SQLiteParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conflict_clauseContext conflict_clause() {
			return GetRuleContext<Conflict_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(SQLiteParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS() { return GetToken(SQLiteParser.ALWAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORED() { return GetToken(SQLiteParser.STORED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIRTUAL() { return GetToken(SQLiteParser.VIRTUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Asc_descContext asc_desc() {
			return GetRuleContext<Asc_descContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOINCREMENT() { return GetToken(SQLiteParser.AUTOINCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SQLiteParser.NOT, 0); }
		public Column_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterColumn_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitColumn_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraintContext column_constraint() {
		Column_constraintContext _localctx = new Column_constraintContext(Context, State);
		EnterRule(_localctx, 32, RULE_column_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTRAINT) {
				{
				State = 500;
				Match(CONSTRAINT);
				State = 501;
				name();
				}
			}

			State = 553;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY:
				{
				{
				State = 504;
				Match(PRIMARY);
				State = 505;
				Match(KEY);
				State = 507;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					State = 506;
					asc_desc();
					}
				}

				State = 510;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 509;
					conflict_clause();
					}
				}

				State = 513;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AUTOINCREMENT) {
					{
					State = 512;
					Match(AUTOINCREMENT);
					}
				}

				}
				}
				break;
			case NOT:
			case NULL:
			case UNIQUE:
				{
				State = 520;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NOT:
				case NULL:
					{
					State = 516;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NOT) {
						{
						State = 515;
						Match(NOT);
						}
					}

					State = 518;
					Match(NULL);
					}
					break;
				case UNIQUE:
					{
					State = 519;
					Match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 523;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 522;
					conflict_clause();
					}
				}

				}
				break;
			case CHECK:
				{
				State = 525;
				Match(CHECK);
				State = 526;
				Match(OPEN_PAR);
				State = 527;
				expr(0);
				State = 528;
				Match(CLOSE_PAR);
				}
				break;
			case DEFAULT:
				{
				State = 530;
				Match(DEFAULT);
				State = 537;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
				case 1:
					{
					State = 531;
					signed_number();
					}
					break;
				case 2:
					{
					State = 532;
					literal_value();
					}
					break;
				case 3:
					{
					State = 533;
					Match(OPEN_PAR);
					State = 534;
					expr(0);
					State = 535;
					Match(CLOSE_PAR);
					}
					break;
				}
				}
				break;
			case COLLATE:
				{
				State = 539;
				Match(COLLATE);
				State = 540;
				collation_name();
				}
				break;
			case REFERENCES:
				{
				State = 541;
				foreign_key_clause();
				}
				break;
			case AS:
			case GENERATED:
				{
				State = 544;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GENERATED) {
					{
					State = 542;
					Match(GENERATED);
					State = 543;
					Match(ALWAYS);
					}
				}

				State = 546;
				Match(AS);
				State = 547;
				Match(OPEN_PAR);
				State = 548;
				expr(0);
				State = 549;
				Match(CLOSE_PAR);
				State = 551;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VIRTUAL || _la==STORED) {
					{
					State = 550;
					_la = TokenStream.LA(1);
					if ( !(_la==VIRTUAL || _la==STORED) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_LITERAL() { return GetToken(SQLiteParser.NUMERIC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SQLiteParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SQLiteParser.MINUS, 0); }
		public Signed_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterSigned_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitSigned_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSigned_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signed_numberContext signed_number() {
		Signed_numberContext _localctx = new Signed_numberContext(Context, State);
		EnterRule(_localctx, 34, RULE_signed_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 555;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 558;
			Match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Indexed_columnContext[] indexed_column() {
			return GetRuleContexts<Indexed_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Indexed_columnContext indexed_column(int i) {
			return GetRuleContext<Indexed_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(SQLiteParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(SQLiteParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(SQLiteParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Foreign_key_clauseContext foreign_key_clause() {
			return GetRuleContext<Foreign_key_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(SQLiteParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(SQLiteParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(SQLiteParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conflict_clauseContext conflict_clause() {
			return GetRuleContext<Conflict_clauseContext>(0);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterTable_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitTable_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_constraintContext table_constraint() {
		Table_constraintContext _localctx = new Table_constraintContext(Context, State);
		EnterRule(_localctx, 36, RULE_table_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTRAINT) {
				{
				State = 560;
				Match(CONSTRAINT);
				State = 561;
				name();
				}
			}

			State = 601;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				State = 567;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PRIMARY:
					{
					State = 564;
					Match(PRIMARY);
					State = 565;
					Match(KEY);
					}
					break;
				case UNIQUE:
					{
					State = 566;
					Match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 569;
				Match(OPEN_PAR);
				State = 570;
				indexed_column();
				State = 575;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 571;
					Match(COMMA);
					State = 572;
					indexed_column();
					}
					}
					State = 577;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 578;
				Match(CLOSE_PAR);
				State = 580;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 579;
					conflict_clause();
					}
				}

				}
				break;
			case CHECK:
				{
				State = 582;
				Match(CHECK);
				State = 583;
				Match(OPEN_PAR);
				State = 584;
				expr(0);
				State = 585;
				Match(CLOSE_PAR);
				}
				break;
			case FOREIGN:
				{
				State = 587;
				Match(FOREIGN);
				State = 588;
				Match(KEY);
				State = 589;
				Match(OPEN_PAR);
				State = 590;
				column_name();
				State = 595;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 591;
					Match(COMMA);
					State = 592;
					column_name();
					}
					}
					State = 597;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 598;
				Match(CLOSE_PAR);
				State = 599;
				foreign_key_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_key_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(SQLiteParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Foreign_tableContext foreign_table() {
			return GetRuleContext<Foreign_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(SQLiteParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(SQLiteParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MATCH() { return GetTokens(SQLiteParser.MATCH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH(int i) {
			return GetToken(SQLiteParser.MATCH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRABLE() { return GetToken(SQLiteParser.DEFERRABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DELETE() { return GetTokens(SQLiteParser.DELETE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE(int i) {
			return GetToken(SQLiteParser.DELETE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UPDATE() { return GetTokens(SQLiteParser.UPDATE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE(int i) {
			return GetToken(SQLiteParser.UPDATE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SET() { return GetTokens(SQLiteParser.SET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET(int i) {
			return GetToken(SQLiteParser.SET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CASCADE() { return GetTokens(SQLiteParser.CASCADE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE(int i) {
			return GetToken(SQLiteParser.CASCADE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RESTRICT() { return GetTokens(SQLiteParser.RESTRICT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT(int i) {
			return GetToken(SQLiteParser.RESTRICT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO() { return GetTokens(SQLiteParser.NO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO(int i) {
			return GetToken(SQLiteParser.NO, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ACTION() { return GetTokens(SQLiteParser.ACTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION(int i) {
			return GetToken(SQLiteParser.ACTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NULL() { return GetTokens(SQLiteParser.NULL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL(int i) {
			return GetToken(SQLiteParser.NULL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(SQLiteParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(SQLiteParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SQLiteParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIALLY() { return GetToken(SQLiteParser.INITIALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED() { return GetToken(SQLiteParser.DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(SQLiteParser.IMMEDIATE, 0); }
		public Foreign_key_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_key_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterForeign_key_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitForeign_key_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_key_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_key_clauseContext foreign_key_clause() {
		Foreign_key_clauseContext _localctx = new Foreign_key_clauseContext(Context, State);
		EnterRule(_localctx, 38, RULE_foreign_key_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			Match(REFERENCES);
			State = 604;
			foreign_table();
			State = 616;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 605;
				Match(OPEN_PAR);
				State = 606;
				column_name();
				State = 611;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 607;
					Match(COMMA);
					State = 608;
					column_name();
					}
					}
					State = 613;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 614;
				Match(CLOSE_PAR);
				}
			}

			State = 632;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MATCH || _la==ON) {
				{
				State = 630;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ON:
					{
					State = 618;
					Match(ON);
					State = 619;
					_la = TokenStream.LA(1);
					if ( !(_la==DELETE || _la==UPDATE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 626;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case SET:
						{
						State = 620;
						Match(SET);
						State = 621;
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT || _la==NULL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case CASCADE:
						{
						State = 622;
						Match(CASCADE);
						}
						break;
					case RESTRICT:
						{
						State = 623;
						Match(RESTRICT);
						}
						break;
					case NO:
						{
						State = 624;
						Match(NO);
						State = 625;
						Match(ACTION);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case MATCH:
					{
					State = 628;
					Match(MATCH);
					State = 629;
					name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 634;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 643;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				{
				State = 636;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 635;
					Match(NOT);
					}
				}

				State = 638;
				Match(DEFERRABLE);
				State = 641;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INITIALLY) {
					{
					State = 639;
					Match(INITIALLY);
					State = 640;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conflict_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(SQLiteParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFLICT() { return GetToken(SQLiteParser.CONFLICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(SQLiteParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT() { return GetToken(SQLiteParser.ABORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAIL() { return GetToken(SQLiteParser.FAIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(SQLiteParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(SQLiteParser.REPLACE, 0); }
		public Conflict_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conflict_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterConflict_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitConflict_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConflict_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conflict_clauseContext conflict_clause() {
		Conflict_clauseContext _localctx = new Conflict_clauseContext(Context, State);
		EnterRule(_localctx, 40, RULE_conflict_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 645;
			Match(ON);
			State = 646;
			Match(CONFLICT);
			State = 647;
			_la = TokenStream.LA(1);
			if ( !(_la==ABORT || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 19140298416325121L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_trigger_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SQLiteParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(SQLiteParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Trigger_nameContext trigger_name() {
			return GetRuleContext<Trigger_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(SQLiteParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(SQLiteParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SQLiteParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(SQLiteParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(SQLiteParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(SQLiteParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SQLiteParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SQLiteParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SQLiteParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(SQLiteParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(SQLiteParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTEAD() { return GetToken(SQLiteParser.INSTEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OF() { return GetTokens(SQLiteParser.OF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF(int i) {
			return GetToken(SQLiteParser.OF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(SQLiteParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(SQLiteParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(SQLiteParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(SQLiteParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOL() { return GetTokens(SQLiteParser.SCOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOL(int i) {
			return GetToken(SQLiteParser.SCOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(SQLiteParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(SQLiteParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Update_stmtContext[] update_stmt() {
			return GetRuleContexts<Update_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Update_stmtContext update_stmt(int i) {
			return GetRuleContext<Update_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Insert_stmtContext[] insert_stmt() {
			return GetRuleContexts<Insert_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Insert_stmtContext insert_stmt(int i) {
			return GetRuleContext<Insert_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delete_stmtContext[] delete_stmt() {
			return GetRuleContexts<Delete_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delete_stmtContext delete_stmt(int i) {
			return GetRuleContext<Delete_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext[] select_stmt() {
			return GetRuleContexts<Select_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt(int i) {
			return GetRuleContext<Select_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Create_trigger_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_trigger_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterCreate_trigger_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitCreate_trigger_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_trigger_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_trigger_stmtContext create_trigger_stmt() {
		Create_trigger_stmtContext _localctx = new Create_trigger_stmtContext(Context, State);
		EnterRule(_localctx, 42, RULE_create_trigger_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 649;
			Match(CREATE);
			State = 651;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 650;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 653;
			Match(TRIGGER);
			State = 657;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				{
				State = 654;
				Match(IF);
				State = 655;
				Match(NOT);
				State = 656;
				Match(EXISTS);
				}
				break;
			}
			State = 662;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 659;
				schema_name();
				State = 660;
				Match(DOT);
				}
				break;
			}
			State = 664;
			trigger_name();
			State = 669;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEFORE:
				{
				State = 665;
				Match(BEFORE);
				}
				break;
			case AFTER:
				{
				State = 666;
				Match(AFTER);
				}
				break;
			case INSTEAD:
				{
				State = 667;
				Match(INSTEAD);
				State = 668;
				Match(OF);
				}
				break;
			case DELETE:
			case INSERT:
			case UPDATE:
				break;
			default:
				break;
			}
			State = 685;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DELETE:
				{
				State = 671;
				Match(DELETE);
				}
				break;
			case INSERT:
				{
				State = 672;
				Match(INSERT);
				}
				break;
			case UPDATE:
				{
				State = 673;
				Match(UPDATE);
				State = 683;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OF) {
					{
					State = 674;
					Match(OF);
					State = 675;
					column_name();
					State = 680;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 676;
						Match(COMMA);
						State = 677;
						column_name();
						}
						}
						State = 682;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 687;
			Match(ON);
			State = 688;
			table_name();
			State = 692;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 689;
				Match(FOR);
				State = 690;
				Match(EACH);
				State = 691;
				Match(ROW);
				}
			}

			State = 696;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 694;
				Match(WHEN);
				State = 695;
				expr(0);
				}
			}

			State = 698;
			Match(BEGIN);
			State = 707;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 703;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
				case 1:
					{
					State = 699;
					update_stmt();
					}
					break;
				case 2:
					{
					State = 700;
					insert_stmt();
					}
					break;
				case 3:
					{
					State = 701;
					delete_stmt();
					}
					break;
				case 4:
					{
					State = 702;
					select_stmt();
					}
					break;
				}
				State = 705;
				Match(SCOL);
				}
				}
				State = 709;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DELETE || (((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 2386912217732743169L) != 0 );
			State = 711;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_view_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SQLiteParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(SQLiteParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public View_nameContext view_name() {
			return GetRuleContext<View_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SQLiteParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SQLiteParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SQLiteParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SQLiteParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(SQLiteParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(SQLiteParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Create_view_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterCreate_view_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitCreate_view_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_view_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_view_stmtContext create_view_stmt() {
		Create_view_stmtContext _localctx = new Create_view_stmtContext(Context, State);
		EnterRule(_localctx, 44, RULE_create_view_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 713;
			Match(CREATE);
			State = 715;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 714;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 717;
			Match(VIEW);
			State = 721;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				{
				State = 718;
				Match(IF);
				State = 719;
				Match(NOT);
				State = 720;
				Match(EXISTS);
				}
				break;
			}
			State = 726;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				{
				State = 723;
				schema_name();
				State = 724;
				Match(DOT);
				}
				break;
			}
			State = 728;
			view_name();
			State = 740;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 729;
				Match(OPEN_PAR);
				State = 730;
				column_name();
				State = 735;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 731;
					Match(COMMA);
					State = 732;
					column_name();
					}
					}
					State = 737;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 738;
				Match(CLOSE_PAR);
				}
			}

			State = 742;
			Match(AS);
			State = 743;
			select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_virtual_table_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SQLiteParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIRTUAL() { return GetToken(SQLiteParser.VIRTUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SQLiteParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(SQLiteParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Module_nameContext module_name() {
			return GetRuleContext<Module_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SQLiteParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SQLiteParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SQLiteParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Module_argumentContext[] module_argument() {
			return GetRuleContexts<Module_argumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Module_argumentContext module_argument(int i) {
			return GetRuleContext<Module_argumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Create_virtual_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_virtual_table_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterCreate_virtual_table_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitCreate_virtual_table_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_virtual_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_virtual_table_stmtContext create_virtual_table_stmt() {
		Create_virtual_table_stmtContext _localctx = new Create_virtual_table_stmtContext(Context, State);
		EnterRule(_localctx, 46, RULE_create_virtual_table_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745;
			Match(CREATE);
			State = 746;
			Match(VIRTUAL);
			State = 747;
			Match(TABLE);
			State = 751;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				{
				State = 748;
				Match(IF);
				State = 749;
				Match(NOT);
				State = 750;
				Match(EXISTS);
				}
				break;
			}
			State = 756;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 753;
				schema_name();
				State = 754;
				Match(DOT);
				}
				break;
			}
			State = 758;
			table_name();
			State = 759;
			Match(USING);
			State = 760;
			module_name();
			State = 772;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 761;
				Match(OPEN_PAR);
				State = 762;
				module_argument();
				State = 767;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 763;
					Match(COMMA);
					State = 764;
					module_argument();
					}
					}
					State = 769;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 770;
				Match(CLOSE_PAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SQLiteParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cte_table_nameContext[] cte_table_name() {
			return GetRuleContexts<Cte_table_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cte_table_nameContext cte_table_name(int i) {
			return GetRuleContext<Cte_table_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AS() { return GetTokens(SQLiteParser.AS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS(int i) {
			return GetToken(SQLiteParser.AS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAR() { return GetTokens(SQLiteParser.OPEN_PAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR(int i) {
			return GetToken(SQLiteParser.OPEN_PAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext[] select_stmt() {
			return GetRuleContexts<Select_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt(int i) {
			return GetRuleContext<Select_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAR() { return GetTokens(SQLiteParser.CLOSE_PAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR(int i) {
			return GetToken(SQLiteParser.CLOSE_PAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(SQLiteParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public With_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterWith_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitWith_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_clauseContext with_clause() {
		With_clauseContext _localctx = new With_clauseContext(Context, State);
		EnterRule(_localctx, 48, RULE_with_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 774;
			Match(WITH);
			State = 776;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				{
				State = 775;
				Match(RECURSIVE);
				}
				break;
			}
			State = 778;
			cte_table_name();
			State = 779;
			Match(AS);
			State = 780;
			Match(OPEN_PAR);
			State = 781;
			select_stmt();
			State = 782;
			Match(CLOSE_PAR);
			State = 792;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 783;
				Match(COMMA);
				State = 784;
				cte_table_name();
				State = 785;
				Match(AS);
				State = 786;
				Match(OPEN_PAR);
				State = 787;
				select_stmt();
				State = 788;
				Match(CLOSE_PAR);
				}
				}
				State = 794;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cte_table_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Cte_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cte_table_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterCte_table_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitCte_table_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCte_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cte_table_nameContext cte_table_name() {
		Cte_table_nameContext _localctx = new Cte_table_nameContext(Context, State);
		EnterRule(_localctx, 50, RULE_cte_table_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 795;
			table_name();
			State = 807;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 796;
				Match(OPEN_PAR);
				State = 797;
				column_name();
				State = 802;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 798;
					Match(COMMA);
					State = 799;
					column_name();
					}
					}
					State = 804;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 805;
				Match(CLOSE_PAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recursive_cteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cte_table_nameContext cte_table_name() {
			return GetRuleContext<Cte_table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SQLiteParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Initial_selectContext initial_select() {
			return GetRuleContext<Initial_selectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(SQLiteParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Recursive_selectContext recursive_select() {
			return GetRuleContext<Recursive_selectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(SQLiteParser.ALL, 0); }
		public Recursive_cteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recursive_cte; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterRecursive_cte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitRecursive_cte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecursive_cte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Recursive_cteContext recursive_cte() {
		Recursive_cteContext _localctx = new Recursive_cteContext(Context, State);
		EnterRule(_localctx, 52, RULE_recursive_cte);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 809;
			cte_table_name();
			State = 810;
			Match(AS);
			State = 811;
			Match(OPEN_PAR);
			State = 812;
			initial_select();
			State = 813;
			Match(UNION);
			State = 815;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL) {
				{
				State = 814;
				Match(ALL);
				}
			}

			State = 817;
			recursive_select();
			State = 818;
			Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_table_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SQLiteParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAR() { return GetTokens(SQLiteParser.OPEN_PAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR(int i) {
			return GetToken(SQLiteParser.OPEN_PAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAR() { return GetTokens(SQLiteParser.CLOSE_PAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR(int i) {
			return GetToken(SQLiteParser.CLOSE_PAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_table_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterCommon_table_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitCommon_table_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommon_table_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Common_table_expressionContext common_table_expression() {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_common_table_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820;
			table_name();
			State = 832;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 821;
				Match(OPEN_PAR);
				State = 822;
				column_name();
				State = 827;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 823;
					Match(COMMA);
					State = 824;
					column_name();
					}
					}
					State = 829;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 830;
				Match(CLOSE_PAR);
				}
			}

			State = 834;
			Match(AS);
			State = 835;
			Match(OPEN_PAR);
			State = 836;
			select_stmt();
			State = 837;
			Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(SQLiteParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SQLiteParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(SQLiteParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Returning_clauseContext returning_clause() {
			return GetRuleContext<Returning_clauseContext>(0);
		}
		public Delete_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterDelete_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitDelete_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_stmtContext delete_stmt() {
		Delete_stmtContext _localctx = new Delete_stmtContext(Context, State);
		EnterRule(_localctx, 56, RULE_delete_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 840;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 839;
				with_clause();
				}
			}

			State = 842;
			Match(DELETE);
			State = 843;
			Match(FROM);
			State = 844;
			qualified_table_name();
			State = 847;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 845;
				Match(WHERE);
				State = 846;
				expr(0);
				}
			}

			State = 850;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNING) {
				{
				State = 849;
				returning_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_stmt_limitedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(SQLiteParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SQLiteParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(SQLiteParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Returning_clauseContext returning_clause() {
			return GetRuleContext<Returning_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Limit_clauseContext limit_clause() {
			return GetRuleContext<Limit_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Delete_stmt_limitedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_stmt_limited; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterDelete_stmt_limited(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitDelete_stmt_limited(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_stmt_limited(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_stmt_limitedContext delete_stmt_limited() {
		Delete_stmt_limitedContext _localctx = new Delete_stmt_limitedContext(Context, State);
		EnterRule(_localctx, 58, RULE_delete_stmt_limited);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 853;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 852;
				with_clause();
				}
			}

			State = 855;
			Match(DELETE);
			State = 856;
			Match(FROM);
			State = 857;
			qualified_table_name();
			State = 860;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 858;
				Match(WHERE);
				State = 859;
				expr(0);
				}
			}

			State = 863;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNING) {
				{
				State = 862;
				returning_clause();
				}
			}

			State = 869;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT || _la==ORDER) {
				{
				State = 866;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 865;
					order_by_clause();
					}
				}

				State = 868;
				limit_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Detach_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETACH() { return GetToken(SQLiteParser.DETACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(SQLiteParser.DATABASE, 0); }
		public Detach_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detach_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterDetach_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitDetach_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDetach_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Detach_stmtContext detach_stmt() {
		Detach_stmtContext _localctx = new Detach_stmtContext(Context, State);
		EnterRule(_localctx, 60, RULE_detach_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 871;
			Match(DETACH);
			State = 873;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				{
				State = 872;
				Match(DATABASE);
				}
				break;
			}
			State = 875;
			schema_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_stmtContext : ParserRuleContext {
		public IToken @object;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(SQLiteParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(SQLiteParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SQLiteParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(SQLiteParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(SQLiteParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SQLiteParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SQLiteParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		public Drop_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterDrop_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitDrop_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_stmtContext drop_stmt() {
		Drop_stmtContext _localctx = new Drop_stmtContext(Context, State);
		EnterRule(_localctx, 62, RULE_drop_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 877;
			Match(DROP);
			State = 878;
			_localctx.@object = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 2324138882699886593L) != 0) ) {
				_localctx.@object = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 881;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				{
				State = 879;
				Match(IF);
				State = 880;
				Match(EXISTS);
				}
				break;
			}
			State = 886;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				{
				State = 883;
				schema_name();
				State = 884;
				Match(DOT);
				}
				break;
			}
			State = 888;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIND_PARAMETER() { return GetToken(SQLiteParser.BIND_PARAMETER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(SQLiteParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(SQLiteParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(SQLiteParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Filter_clauseContext filter_clause() {
			return GetRuleContext<Filter_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(SQLiteParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(SQLiteParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SQLiteParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SQLiteParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SQLiteParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(SQLiteParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SQLiteParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHEN() { return GetTokens(SQLiteParser.WHEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN(int i) {
			return GetToken(SQLiteParser.WHEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(SQLiteParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(SQLiteParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(SQLiteParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Raise_functionContext raise_function() {
			return GetRuleContext<Raise_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE2() { return GetToken(SQLiteParser.PIPE2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(SQLiteParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(SQLiteParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SQLiteParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SQLiteParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT2() { return GetToken(SQLiteParser.LT2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT2() { return GetToken(SQLiteParser.GT2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(SQLiteParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(SQLiteParser.PIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(SQLiteParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT_EQ() { return GetToken(SQLiteParser.LT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(SQLiteParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT_EQ() { return GetToken(SQLiteParser.GT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SQLiteParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(SQLiteParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ1() { return GetToken(SQLiteParser.NOT_EQ1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ2() { return GetToken(SQLiteParser.NOT_EQ2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(SQLiteParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SQLiteParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(SQLiteParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOB() { return GetToken(SQLiteParser.GLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(SQLiteParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP() { return GetToken(SQLiteParser.REGEXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(SQLiteParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(SQLiteParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(SQLiteParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(SQLiteParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(SQLiteParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISNULL() { return GetToken(SQLiteParser.ISNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNULL() { return GetToken(SQLiteParser.NOTNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(SQLiteParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_function_nameContext table_function_name() {
			return GetRuleContext<Table_function_nameContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 978;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				{
				State = 891;
				literal_value();
				}
				break;
			case 2:
				{
				State = 892;
				Match(BIND_PARAMETER);
				}
				break;
			case 3:
				{
				State = 901;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
				case 1:
					{
					State = 896;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
					case 1:
						{
						State = 893;
						schema_name();
						State = 894;
						Match(DOT);
						}
						break;
					}
					State = 898;
					table_name();
					State = 899;
					Match(DOT);
					}
					break;
				}
				State = 903;
				column_name();
				}
				break;
			case 4:
				{
				State = 904;
				unary_operator();
				State = 905;
				expr(21);
				}
				break;
			case 5:
				{
				State = 907;
				function_name();
				State = 908;
				Match(OPEN_PAR);
				State = 921;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAR:
				case PLUS:
				case MINUS:
				case TILDE:
				case ABORT:
				case ACTION:
				case ADD:
				case AFTER:
				case ALL:
				case ALTER:
				case ANALYZE:
				case AND:
				case AS:
				case ASC:
				case ATTACH:
				case AUTOINCREMENT:
				case BEFORE:
				case BEGIN:
				case BETWEEN:
				case BY:
				case CASCADE:
				case CASE:
				case CAST:
				case CHECK:
				case COLLATE:
				case COLUMN:
				case COMMIT:
				case CONFLICT:
				case CONSTRAINT:
				case CREATE:
				case CROSS:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case DATABASE:
				case DEFAULT:
				case DEFERRABLE:
				case DEFERRED:
				case DELETE:
				case DESC:
				case DETACH:
				case DISTINCT:
				case DROP:
				case EACH:
				case ELSE:
				case END:
				case ESCAPE:
				case EXCEPT:
				case EXCLUSIVE:
				case EXISTS:
				case EXPLAIN:
				case FAIL:
				case FOR:
				case FOREIGN:
				case FROM:
				case FULL:
				case GLOB:
				case GROUP:
				case HAVING:
				case IF:
				case IGNORE:
				case IMMEDIATE:
				case IN:
				case INDEX:
				case INDEXED:
				case INITIALLY:
				case INNER:
				case INSERT:
				case INSTEAD:
				case INTERSECT:
				case INTO:
				case IS:
				case ISNULL:
				case JOIN:
				case KEY:
				case LEFT:
				case LIKE:
				case LIMIT:
				case MATCH:
				case NATURAL:
				case NO:
				case NOT:
				case NOTNULL:
				case NULL:
				case OF:
				case OFFSET:
				case ON:
				case OR:
				case ORDER:
				case OUTER:
				case PLAN:
				case PRAGMA:
				case PRIMARY:
				case QUERY:
				case RAISE:
				case RECURSIVE:
				case REFERENCES:
				case REGEXP:
				case REINDEX:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESTRICT:
				case RIGHT:
				case ROLLBACK:
				case ROW:
				case ROWS:
				case SAVEPOINT:
				case SELECT:
				case SET:
				case TABLE:
				case TEMP:
				case TEMPORARY:
				case THEN:
				case TO:
				case TRANSACTION:
				case TRIGGER:
				case UNION:
				case UNIQUE:
				case UPDATE:
				case USING:
				case VACUUM:
				case VALUES:
				case VIEW:
				case VIRTUAL:
				case WHEN:
				case WHERE:
				case WITH:
				case WITHOUT:
				case FIRST_VALUE:
				case OVER:
				case PARTITION:
				case RANGE:
				case PRECEDING:
				case UNBOUNDED:
				case CURRENT:
				case FOLLOWING:
				case CUME_DIST:
				case DENSE_RANK:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case NTH_VALUE:
				case NTILE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case GENERATED:
				case ALWAYS:
				case STORED:
				case TRUE:
				case FALSE:
				case WINDOW:
				case NULLS:
				case FIRST:
				case LAST:
				case FILTER:
				case GROUPS:
				case EXCLUDE:
				case IDENTIFIER:
				case NUMERIC_LITERAL:
				case BIND_PARAMETER:
				case STRING_LITERAL:
				case BLOB_LITERAL:
					{
					{
					State = 910;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
					case 1:
						{
						State = 909;
						Match(DISTINCT);
						}
						break;
					}
					State = 912;
					expr(0);
					State = 917;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 913;
						Match(COMMA);
						State = 914;
						expr(0);
						}
						}
						State = 919;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
					break;
				case STAR:
					{
					State = 920;
					Match(STAR);
					}
					break;
				case CLOSE_PAR:
					break;
				default:
					break;
				}
				State = 923;
				Match(CLOSE_PAR);
				State = 925;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
				case 1:
					{
					State = 924;
					filter_clause();
					}
					break;
				}
				State = 928;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
				case 1:
					{
					State = 927;
					over_clause();
					}
					break;
				}
				}
				break;
			case 6:
				{
				State = 930;
				Match(OPEN_PAR);
				State = 931;
				expr(0);
				State = 936;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 932;
					Match(COMMA);
					State = 933;
					expr(0);
					}
					}
					State = 938;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 939;
				Match(CLOSE_PAR);
				}
				break;
			case 7:
				{
				State = 941;
				Match(CAST);
				State = 942;
				Match(OPEN_PAR);
				State = 943;
				expr(0);
				State = 944;
				Match(AS);
				State = 945;
				type_name();
				State = 946;
				Match(CLOSE_PAR);
				}
				break;
			case 8:
				{
				State = 952;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXISTS || _la==NOT) {
					{
					State = 949;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NOT) {
						{
						State = 948;
						Match(NOT);
						}
					}

					State = 951;
					Match(EXISTS);
					}
				}

				State = 954;
				Match(OPEN_PAR);
				State = 955;
				select_stmt();
				State = 956;
				Match(CLOSE_PAR);
				}
				break;
			case 9:
				{
				State = 958;
				Match(CASE);
				State = 960;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
				case 1:
					{
					State = 959;
					expr(0);
					}
					break;
				}
				State = 967;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 962;
					Match(WHEN);
					State = 963;
					expr(0);
					State = 964;
					Match(THEN);
					State = 965;
					expr(0);
					}
					}
					State = 969;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				State = 973;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 971;
					Match(ELSE);
					State = 972;
					expr(0);
					}
				}

				State = 975;
				Match(END);
				}
				break;
			case 10:
				{
				State = 977;
				raise_function();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1099;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,137,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1097;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 980;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 981;
						Match(PIPE2);
						State = 982;
						expr(21);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 983;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 984;
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 12416L) != 0) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 985;
						expr(20);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 986;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 987;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 988;
						expr(19);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 989;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 990;
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 245760L) != 0) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 991;
						expr(18);
						}
						break;
					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 992;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 993;
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 3932160L) != 0) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 994;
						expr(17);
						}
						break;
					case 6:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 995;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1008;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
						case 1:
							{
							State = 996;
							Match(ASSIGN);
							}
							break;
						case 2:
							{
							State = 997;
							Match(EQ);
							}
							break;
						case 3:
							{
							State = 998;
							Match(NOT_EQ1);
							}
							break;
						case 4:
							{
							State = 999;
							Match(NOT_EQ2);
							}
							break;
						case 5:
							{
							State = 1000;
							Match(IS);
							}
							break;
						case 6:
							{
							State = 1001;
							Match(IS);
							State = 1002;
							Match(NOT);
							}
							break;
						case 7:
							{
							State = 1003;
							Match(IN);
							}
							break;
						case 8:
							{
							State = 1004;
							Match(LIKE);
							}
							break;
						case 9:
							{
							State = 1005;
							Match(GLOB);
							}
							break;
						case 10:
							{
							State = 1006;
							Match(MATCH);
							}
							break;
						case 11:
							{
							State = 1007;
							Match(REGEXP);
							}
							break;
						}
						State = 1010;
						expr(16);
						}
						break;
					case 7:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1011;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1012;
						Match(AND);
						State = 1013;
						expr(15);
						}
						break;
					case 8:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1014;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1015;
						Match(OR);
						State = 1016;
						expr(14);
						}
						break;
					case 9:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1017;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1018;
						Match(IS);
						State = 1020;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
						case 1:
							{
							State = 1019;
							Match(NOT);
							}
							break;
						}
						State = 1022;
						expr(7);
						}
						break;
					case 10:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1023;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1025;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 1024;
							Match(NOT);
							}
						}

						State = 1027;
						Match(BETWEEN);
						State = 1028;
						expr(0);
						State = 1029;
						Match(AND);
						State = 1030;
						expr(6);
						}
						break;
					case 11:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1032;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1033;
						Match(COLLATE);
						State = 1034;
						collation_name();
						}
						break;
					case 12:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1035;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 1037;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 1036;
							Match(NOT);
							}
						}

						State = 1039;
						_la = TokenStream.LA(1);
						if ( !((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 2199028498433L) != 0) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1040;
						expr(0);
						State = 1043;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
						case 1:
							{
							State = 1041;
							Match(ESCAPE);
							State = 1042;
							expr(0);
							}
							break;
						}
						}
						break;
					case 13:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1045;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1050;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case ISNULL:
							{
							State = 1046;
							Match(ISNULL);
							}
							break;
						case NOTNULL:
							{
							State = 1047;
							Match(NOTNULL);
							}
							break;
						case NOT:
							{
							State = 1048;
							Match(NOT);
							State = 1049;
							Match(NULL);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 14:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1052;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1054;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 1053;
							Match(NOT);
							}
						}

						State = 1056;
						Match(IN);
						State = 1095;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,135,Context) ) {
						case 1:
							{
							State = 1057;
							Match(OPEN_PAR);
							State = 1067;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
							case 1:
								{
								State = 1058;
								select_stmt();
								}
								break;
							case 2:
								{
								State = 1059;
								expr(0);
								State = 1064;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								while (_la==COMMA) {
									{
									{
									State = 1060;
									Match(COMMA);
									State = 1061;
									expr(0);
									}
									}
									State = 1066;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
								}
								}
								break;
							}
							State = 1069;
							Match(CLOSE_PAR);
							}
							break;
						case 2:
							{
							State = 1073;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
							case 1:
								{
								State = 1070;
								schema_name();
								State = 1071;
								Match(DOT);
								}
								break;
							}
							State = 1075;
							table_name();
							}
							break;
						case 3:
							{
							State = 1079;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
							case 1:
								{
								State = 1076;
								schema_name();
								State = 1077;
								Match(DOT);
								}
								break;
							}
							State = 1081;
							table_function_name();
							State = 1082;
							Match(OPEN_PAR);
							State = 1091;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (((_la) & ~0x3f) == 0 && ((1L << _la) & -33552632L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1152921504606846977L) != 0 || (((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 4476578029606273023L) != 0) {
								{
								State = 1083;
								expr(0);
								State = 1088;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								while (_la==COMMA) {
									{
									{
									State = 1084;
									Match(COMMA);
									State = 1085;
									expr(0);
									}
									}
									State = 1090;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
								}
								}
							}

							State = 1093;
							Match(CLOSE_PAR);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 1101;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,137,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Raise_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAISE() { return GetToken(SQLiteParser.RAISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(SQLiteParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SQLiteParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Error_messageContext error_message() {
			return GetRuleContext<Error_messageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(SQLiteParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT() { return GetToken(SQLiteParser.ABORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAIL() { return GetToken(SQLiteParser.FAIL, 0); }
		public Raise_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raise_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterRaise_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitRaise_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaise_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Raise_functionContext raise_function() {
		Raise_functionContext _localctx = new Raise_functionContext(Context, State);
		EnterRule(_localctx, 66, RULE_raise_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1102;
			Match(RAISE);
			State = 1103;
			Match(OPEN_PAR);
			State = 1108;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IGNORE:
				{
				State = 1104;
				Match(IGNORE);
				}
				break;
			case ABORT:
			case FAIL:
			case ROLLBACK:
				{
				State = 1105;
				_la = TokenStream.LA(1);
				if ( !(_la==ABORT || _la==FAIL || _la==ROLLBACK) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1106;
				Match(COMMA);
				State = 1107;
				error_message();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1110;
			Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_LITERAL() { return GetToken(SQLiteParser.NUMERIC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOB_LITERAL() { return GetToken(SQLiteParser.BLOB_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(SQLiteParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(SQLiteParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(SQLiteParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME() { return GetToken(SQLiteParser.CURRENT_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(SQLiteParser.CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(SQLiteParser.CURRENT_TIMESTAMP, 0); }
		public Literal_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterLiteral_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitLiteral_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_valueContext literal_value() {
		Literal_valueContext _localctx = new Literal_valueContext(Context, State);
		EnterRule(_localctx, 68, RULE_literal_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1112;
			_la = TokenStream.LA(1);
			if ( !((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & 4503599627370503L) != 0 || (((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & 212995L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Columns_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Columns_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columns_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterColumns_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitColumns_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumns_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Columns_clauseContext columns_clause() {
		Columns_clauseContext _localctx = new Columns_clauseContext(Context, State);
		EnterRule(_localctx, 70, RULE_columns_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1114;
			Match(OPEN_PAR);
			State = 1115;
			column_name();
			State = 1120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1116;
				Match(COMMA);
				State = 1117;
				column_name();
				}
				}
				State = 1122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1123;
			Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(SQLiteParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(SQLiteParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(SQLiteParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(SQLiteParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(SQLiteParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(SQLiteParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(SQLiteParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT() { return GetToken(SQLiteParser.ABORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAIL() { return GetToken(SQLiteParser.FAIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(SQLiteParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SQLiteParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Columns_clauseContext columns_clause() {
			return GetRuleContext<Columns_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Returning_clauseContext returning_clause() {
			return GetRuleContext<Returning_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Values_clauseContext values_clause() {
			return GetRuleContext<Values_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Upsert_clauseContext upsert_clause() {
			return GetRuleContext<Upsert_clauseContext>(0);
		}
		public Insert_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterInsert_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitInsert_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_stmtContext insert_stmt() {
		Insert_stmtContext _localctx = new Insert_stmtContext(Context, State);
		EnterRule(_localctx, 72, RULE_insert_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 1125;
				with_clause();
				}
			}

			State = 1133;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
			case 1:
				{
				State = 1128;
				Match(INSERT);
				}
				break;
			case 2:
				{
				State = 1129;
				Match(REPLACE);
				}
				break;
			case 3:
				{
				State = 1130;
				Match(INSERT);
				State = 1131;
				Match(OR);
				State = 1132;
				_la = TokenStream.LA(1);
				if ( !(_la==ABORT || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 19140298416325121L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1135;
			Match(INTO);
			State = 1139;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				{
				State = 1136;
				schema_name();
				State = 1137;
				Match(DOT);
				}
				break;
			}
			State = 1141;
			table_name();
			State = 1144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1142;
				Match(AS);
				State = 1143;
				table_alias();
				}
			}

			State = 1147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 1146;
				columns_clause();
				}
			}

			State = 1158;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case VALUES:
			case WITH:
				{
				{
				State = 1151;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
				case 1:
					{
					State = 1149;
					values_clause();
					}
					break;
				case 2:
					{
					State = 1150;
					select_stmt();
					}
					break;
				}
				State = 1154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 1153;
					upsert_clause();
					}
				}

				}
				}
				break;
			case DEFAULT:
				{
				State = 1156;
				Match(DEFAULT);
				State = 1157;
				Match(VALUES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNING) {
				{
				State = 1160;
				returning_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Returning_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING() { return GetToken(SQLiteParser.RETURNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Result_columnContext[] result_column() {
			return GetRuleContexts<Result_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Result_columnContext result_column(int i) {
			return GetRuleContext<Result_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Returning_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returning_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterReturning_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitReturning_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturning_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Returning_clauseContext returning_clause() {
		Returning_clauseContext _localctx = new Returning_clauseContext(Context, State);
		EnterRule(_localctx, 74, RULE_returning_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1163;
			Match(RETURNING);
			State = 1164;
			result_column();
			State = 1169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1165;
				Match(COMMA);
				State = 1166;
				result_column();
				}
				}
				State = 1171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Upsert_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(SQLiteParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFLICT() { return GetToken(SQLiteParser.CONFLICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(SQLiteParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTHING() { return GetToken(SQLiteParser.NOTHING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(SQLiteParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(SQLiteParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Indexed_columnContext[] indexed_column() {
			return GetRuleContexts<Indexed_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Indexed_columnContext indexed_column(int i) {
			return GetRuleContext<Indexed_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(SQLiteParser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(SQLiteParser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHERE() { return GetTokens(SQLiteParser.WHERE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE(int i) {
			return GetToken(SQLiteParser.WHERE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext[] column_name_list() {
			return GetRuleContexts<Column_name_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list(int i) {
			return GetRuleContext<Column_name_listContext>(i);
		}
		public Upsert_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upsert_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterUpsert_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitUpsert_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpsert_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Upsert_clauseContext upsert_clause() {
		Upsert_clauseContext _localctx = new Upsert_clauseContext(Context, State);
		EnterRule(_localctx, 76, RULE_upsert_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1172;
			Match(ON);
			State = 1173;
			Match(CONFLICT);
			State = 1188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 1174;
				Match(OPEN_PAR);
				State = 1175;
				indexed_column();
				State = 1180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1176;
					Match(COMMA);
					State = 1177;
					indexed_column();
					}
					}
					State = 1182;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1183;
				Match(CLOSE_PAR);
				State = 1186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 1184;
					Match(WHERE);
					State = 1185;
					expr(0);
					}
				}

				}
			}

			State = 1190;
			Match(DO);
			State = 1217;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOTHING:
				{
				State = 1191;
				Match(NOTHING);
				}
				break;
			case UPDATE:
				{
				State = 1192;
				Match(UPDATE);
				State = 1193;
				Match(SET);
				{
				State = 1196;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
				case 1:
					{
					State = 1194;
					column_name();
					}
					break;
				case 2:
					{
					State = 1195;
					column_name_list();
					}
					break;
				}
				State = 1198;
				Match(ASSIGN);
				State = 1199;
				expr(0);
				State = 1210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1200;
					Match(COMMA);
					State = 1203;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
					case 1:
						{
						State = 1201;
						column_name();
						}
						break;
					case 2:
						{
						State = 1202;
						column_name_list();
						}
						break;
					}
					State = 1205;
					Match(ASSIGN);
					State = 1206;
					expr(0);
					}
					}
					State = 1212;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 1213;
					Match(WHERE);
					State = 1214;
					expr(0);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRAGMA() { return GetToken(SQLiteParser.PRAGMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pragma_nameContext pragma_name() {
			return GetRuleContext<Pragma_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SQLiteParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pragma_valueContext pragma_value() {
			return GetRuleContext<Pragma_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public Pragma_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterPragma_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitPragma_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_stmtContext pragma_stmt() {
		Pragma_stmtContext _localctx = new Pragma_stmtContext(Context, State);
		EnterRule(_localctx, 78, RULE_pragma_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1219;
			Match(PRAGMA);
			State = 1223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
			case 1:
				{
				State = 1220;
				schema_name();
				State = 1221;
				Match(DOT);
				}
				break;
			}
			State = 1225;
			pragma_name();
			State = 1232;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
				{
				State = 1226;
				Match(ASSIGN);
				State = 1227;
				pragma_value();
				}
				break;
			case OPEN_PAR:
				{
				State = 1228;
				Match(OPEN_PAR);
				State = 1229;
				pragma_value();
				State = 1230;
				Match(CLOSE_PAR);
				}
				break;
			case Eof:
			case SCOL:
			case ALTER:
			case ANALYZE:
			case ATTACH:
			case BEGIN:
			case COMMIT:
			case CREATE:
			case DELETE:
			case DETACH:
			case DROP:
			case END:
			case EXPLAIN:
			case INSERT:
			case PRAGMA:
			case REINDEX:
			case RELEASE:
			case REPLACE:
			case ROLLBACK:
			case SAVEPOINT:
			case SELECT:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case WITH:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		public Pragma_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterPragma_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitPragma_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_valueContext pragma_value() {
		Pragma_valueContext _localctx = new Pragma_valueContext(Context, State);
		EnterRule(_localctx, 80, RULE_pragma_value);
		try {
			State = 1237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1234;
				signed_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1235;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1236;
				Match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reindex_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REINDEX() { return GetToken(SQLiteParser.REINDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		public Reindex_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reindex_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterReindex_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitReindex_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReindex_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reindex_stmtContext reindex_stmt() {
		Reindex_stmtContext _localctx = new Reindex_stmtContext(Context, State);
		EnterRule(_localctx, 82, RULE_reindex_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1239;
			Match(REINDEX);
			State = 1250;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
			case 1:
				{
				State = 1240;
				collation_name();
				}
				break;
			case 2:
				{
				State = 1244;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
				case 1:
					{
					State = 1241;
					schema_name();
					State = 1242;
					Match(DOT);
					}
					break;
				}
				State = 1248;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
				case 1:
					{
					State = 1246;
					table_name();
					}
					break;
				case 2:
					{
					State = 1247;
					index_name();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_coreContext[] select_core() {
			return GetRuleContexts<Select_coreContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_coreContext select_core(int i) {
			return GetRuleContext<Select_coreContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Common_table_stmtContext common_table_stmt() {
			return GetRuleContext<Common_table_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compound_operatorContext[] compound_operator() {
			return GetRuleContexts<Compound_operatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compound_operatorContext compound_operator(int i) {
			return GetRuleContext<Compound_operatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Limit_clauseContext limit_clause() {
			return GetRuleContext<Limit_clauseContext>(0);
		}
		public Select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterSelect_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitSelect_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_stmtContext select_stmt() {
		Select_stmtContext _localctx = new Select_stmtContext(Context, State);
		EnterRule(_localctx, 84, RULE_select_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 1252;
				common_table_stmt();
				}
			}

			State = 1255;
			select_core();
			State = 1261;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,165,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1256;
					compound_operator();
					State = 1257;
					select_core();
					}
					} 
				}
				State = 1263;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,165,Context);
			}
			State = 1265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 1264;
				order_by_clause();
				}
			}

			State = 1268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 1267;
				limit_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Join_operatorContext[] join_operator() {
			return GetRuleContexts<Join_operatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_operatorContext join_operator(int i) {
			return GetRuleContext<Join_operatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_constraintContext[] join_constraint() {
			return GetRuleContexts<Join_constraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_constraintContext join_constraint(int i) {
			return GetRuleContext<Join_constraintContext>(i);
		}
		public Join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterJoin_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitJoin_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_clauseContext join_clause() {
		Join_clauseContext _localctx = new Join_clauseContext(Context, State);
		EnterRule(_localctx, 86, RULE_join_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1270;
				join_operator();
				State = 1271;
				table_or_subquery();
				State = 1273;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
				case 1:
					{
					State = 1272;
					join_constraint();
					}
					break;
				}
				}
				}
				State = 1277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA || _la==CROSS || (((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 8833L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(SQLiteParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterWhere_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitWhere_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(Context, State);
		EnterRule(_localctx, 88, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1279;
			Match(WHERE);
			State = 1280;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(SQLiteParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SQLiteParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Having_clauseContext having_clause() {
			return GetRuleContext<Having_clauseContext>(0);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterGroup_by_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitGroup_by_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_clauseContext group_by_clause() {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(Context, State);
		EnterRule(_localctx, 90, RULE_group_by_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1282;
			Match(GROUP);
			State = 1283;
			Match(BY);
			State = 1284;
			expr(0);
			State = 1289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1285;
				Match(COMMA);
				State = 1286;
				expr(0);
				}
				}
				State = 1291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HAVING) {
				{
				State = 1292;
				having_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Having_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(SQLiteParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_having_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterHaving_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitHaving_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHaving_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Having_clauseContext having_clause() {
		Having_clauseContext _localctx = new Having_clauseContext(Context, State);
		EnterRule(_localctx, 92, RULE_having_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1295;
			Match(HAVING);
			State = 1296;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Values_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(SQLiteParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Values_stmtContext[] values_stmt() {
			return GetRuleContexts<Values_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Values_stmtContext values_stmt(int i) {
			return GetRuleContext<Values_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterValues_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitValues_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValues_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Values_clauseContext values_clause() {
		Values_clauseContext _localctx = new Values_clauseContext(Context, State);
		EnterRule(_localctx, 94, RULE_values_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1298;
			Match(VALUES);
			State = 1299;
			values_stmt();
			State = 1304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1300;
				Match(COMMA);
				State = 1301;
				values_stmt();
				}
				}
				State = 1306;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Values_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Values_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterValues_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitValues_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValues_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Values_stmtContext values_stmt() {
		Values_stmtContext _localctx = new Values_stmtContext(Context, State);
		EnterRule(_localctx, 96, RULE_values_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1307;
			Match(OPEN_PAR);
			State = 1308;
			expr(0);
			State = 1313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1309;
				Match(COMMA);
				State = 1310;
				expr(0);
				}
				}
				State = 1315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1316;
			Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SQLiteParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterFrom_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitFrom_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_clauseContext from_clause() {
		From_clauseContext _localctx = new From_clauseContext(Context, State);
		EnterRule(_localctx, 98, RULE_from_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1318;
			Match(FROM);
			State = 1319;
			table_or_subquery();
			State = 1324;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,174,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1320;
					Match(COMMA);
					State = 1321;
					table_or_subquery();
					}
					} 
				}
				State = 1326;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,174,Context);
			}
			State = 1328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA || _la==CROSS || (((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 8833L) != 0) {
				{
				State = 1327;
				join_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(SQLiteParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_nameContext[] window_name() {
			return GetRuleContexts<Window_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_nameContext window_name(int i) {
			return GetRuleContext<Window_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AS() { return GetTokens(SQLiteParser.AS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS(int i) {
			return GetToken(SQLiteParser.AS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_defnContext[] window_defn() {
			return GetRuleContexts<Window_defnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_defnContext window_defn(int i) {
			return GetRuleContext<Window_defnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Window_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterWindow_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitWindow_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_clauseContext window_clause() {
		Window_clauseContext _localctx = new Window_clauseContext(Context, State);
		EnterRule(_localctx, 100, RULE_window_clause);
		int _la;
		try {
			State = 1352;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WINDOW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1330;
				Match(WINDOW);
				State = 1331;
				window_name();
				State = 1332;
				Match(AS);
				State = 1333;
				window_defn();
				State = 1341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1334;
					Match(COMMA);
					State = 1335;
					window_name();
					State = 1336;
					Match(AS);
					State = 1337;
					window_defn();
					}
					}
					State = 1343;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case OPEN_PAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1344;
				window_defn();
				State = 1349;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1345;
					Match(COMMA);
					State = 1346;
					window_defn();
					}
					}
					State = 1351;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_coreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(SQLiteParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Result_columnContext[] result_column() {
			return GetRuleContexts<Result_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Result_columnContext result_column(int i) {
			return GetRuleContext<Result_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_clauseContext group_by_clause() {
			return GetRuleContext<Group_by_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_clauseContext window_clause() {
			return GetRuleContext<Window_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(SQLiteParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(SQLiteParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Values_clauseContext values_clause() {
			return GetRuleContext<Values_clauseContext>(0);
		}
		public Select_coreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_core; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterSelect_core(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitSelect_core(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_core(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_coreContext select_core() {
		Select_coreContext _localctx = new Select_coreContext(Context, State);
		EnterRule(_localctx, 102, RULE_select_core);
		int _la;
		try {
			State = 1379;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1354;
				Match(SELECT);
				State = 1356;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
				case 1:
					{
					State = 1355;
					_la = TokenStream.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 1358;
				result_column();
				State = 1363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1359;
					Match(COMMA);
					State = 1360;
					result_column();
					}
					}
					State = 1365;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM) {
					{
					State = 1366;
					from_clause();
					}
				}

				State = 1370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 1369;
					where_clause();
					}
				}

				State = 1373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GROUP) {
					{
					State = 1372;
					group_by_clause();
					}
				}

				State = 1376;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAR || _la==WINDOW) {
					{
					State = 1375;
					window_clause();
					}
				}

				}
				}
				break;
			case VALUES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1378;
				values_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Factored_select_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Factored_select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factored_select_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterFactored_select_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitFactored_select_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactored_select_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Factored_select_stmtContext factored_select_stmt() {
		Factored_select_stmtContext _localctx = new Factored_select_stmtContext(Context, State);
		EnterRule(_localctx, 104, RULE_factored_select_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1381;
			select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_select_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_coreContext select_core() {
			return GetRuleContext<Select_coreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Common_table_stmtContext common_table_stmt() {
			return GetRuleContext<Common_table_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Limit_clauseContext limit_clause() {
			return GetRuleContext<Limit_clauseContext>(0);
		}
		public Simple_select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_select_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterSimple_select_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitSimple_select_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_select_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_select_stmtContext simple_select_stmt() {
		Simple_select_stmtContext _localctx = new Simple_select_stmtContext(Context, State);
		EnterRule(_localctx, 106, RULE_simple_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 1383;
				common_table_stmt();
				}
			}

			State = 1386;
			select_core();
			State = 1388;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 1387;
				order_by_clause();
				}
			}

			State = 1391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 1390;
				limit_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_select_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_coreContext[] select_core() {
			return GetRuleContexts<Select_coreContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_coreContext select_core(int i) {
			return GetRuleContext<Select_coreContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Common_table_stmtContext common_table_stmt() {
			return GetRuleContext<Common_table_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Limit_clauseContext limit_clause() {
			return GetRuleContext<Limit_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNION() { return GetTokens(SQLiteParser.UNION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION(int i) {
			return GetToken(SQLiteParser.UNION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTERSECT() { return GetTokens(SQLiteParser.INTERSECT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT(int i) {
			return GetToken(SQLiteParser.INTERSECT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXCEPT() { return GetTokens(SQLiteParser.EXCEPT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT(int i) {
			return GetToken(SQLiteParser.EXCEPT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALL() { return GetTokens(SQLiteParser.ALL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL(int i) {
			return GetToken(SQLiteParser.ALL, i);
		}
		public Compound_select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_select_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterCompound_select_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitCompound_select_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_select_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_select_stmtContext compound_select_stmt() {
		Compound_select_stmtContext _localctx = new Compound_select_stmtContext(Context, State);
		EnterRule(_localctx, 108, RULE_compound_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1394;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 1393;
				common_table_stmt();
				}
			}

			State = 1396;
			select_core();
			State = 1406;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1403;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case UNION:
					{
					State = 1397;
					Match(UNION);
					State = 1399;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALL) {
						{
						State = 1398;
						Match(ALL);
						}
					}

					}
					break;
				case INTERSECT:
					{
					State = 1401;
					Match(INTERSECT);
					}
					break;
				case EXCEPT:
					{
					State = 1402;
					Match(EXCEPT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1405;
				select_core();
				}
				}
				State = 1408;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==EXCEPT || _la==INTERSECT || _la==UNION );
			State = 1411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 1410;
				order_by_clause();
				}
			}

			State = 1414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 1413;
				limit_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_or_subqueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXED() { return GetToken(SQLiteParser.INDEXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SQLiteParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SQLiteParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SQLiteParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_function_nameContext table_function_name() {
			return GetRuleContext<Table_function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Table_or_subqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_or_subquery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterTable_or_subquery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitTable_or_subquery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_or_subquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_or_subqueryContext table_or_subquery() {
		Table_or_subqueryContext _localctx = new Table_or_subqueryContext(Context, State);
		EnterRule(_localctx, 110, RULE_table_or_subquery);
		int _la;
		try {
			State = 1480;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,207,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1419;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
				case 1:
					{
					State = 1416;
					schema_name();
					State = 1417;
					Match(DOT);
					}
					break;
				}
				State = 1421;
				table_name();
				State = 1426;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,197,Context) ) {
				case 1:
					{
					State = 1423;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,196,Context) ) {
					case 1:
						{
						State = 1422;
						Match(AS);
						}
						break;
					}
					State = 1425;
					table_alias();
					}
					break;
				}
				State = 1433;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INDEXED:
					{
					State = 1428;
					Match(INDEXED);
					State = 1429;
					Match(BY);
					State = 1430;
					index_name();
					}
					break;
				case NOT:
					{
					State = 1431;
					Match(NOT);
					State = 1432;
					Match(INDEXED);
					}
					break;
				case Eof:
				case SCOL:
				case OPEN_PAR:
				case CLOSE_PAR:
				case COMMA:
				case ALTER:
				case ANALYZE:
				case ATTACH:
				case BEGIN:
				case COMMIT:
				case CREATE:
				case CROSS:
				case DELETE:
				case DETACH:
				case DROP:
				case END:
				case EXCEPT:
				case EXPLAIN:
				case GROUP:
				case INNER:
				case INSERT:
				case INTERSECT:
				case JOIN:
				case LEFT:
				case LIMIT:
				case NATURAL:
				case ON:
				case ORDER:
				case PRAGMA:
				case REINDEX:
				case RELEASE:
				case REPLACE:
				case RETURNING:
				case ROLLBACK:
				case SAVEPOINT:
				case SELECT:
				case UNION:
				case UPDATE:
				case USING:
				case VACUUM:
				case VALUES:
				case WHERE:
				case WITH:
				case WINDOW:
					break;
				default:
					break;
				}
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1438;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
				case 1:
					{
					State = 1435;
					schema_name();
					State = 1436;
					Match(DOT);
					}
					break;
				}
				State = 1440;
				table_function_name();
				State = 1441;
				Match(OPEN_PAR);
				State = 1442;
				expr(0);
				State = 1447;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1443;
					Match(COMMA);
					State = 1444;
					expr(0);
					}
					}
					State = 1449;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1450;
				Match(CLOSE_PAR);
				State = 1455;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,202,Context) ) {
				case 1:
					{
					State = 1452;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
					case 1:
						{
						State = 1451;
						Match(AS);
						}
						break;
					}
					State = 1454;
					table_alias();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1457;
				Match(OPEN_PAR);
				State = 1467;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,204,Context) ) {
				case 1:
					{
					State = 1458;
					table_or_subquery();
					State = 1463;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1459;
						Match(COMMA);
						State = 1460;
						table_or_subquery();
						}
						}
						State = 1465;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				case 2:
					{
					State = 1466;
					join_clause();
					}
					break;
				}
				State = 1469;
				Match(CLOSE_PAR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1471;
				Match(OPEN_PAR);
				State = 1472;
				select_stmt();
				State = 1473;
				Match(CLOSE_PAR);
				State = 1478;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
				case 1:
					{
					State = 1475;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
					case 1:
						{
						State = 1474;
						Match(AS);
						}
						break;
					}
					State = 1477;
					table_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Result_columnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(SQLiteParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SQLiteParser.AS, 0); }
		public Result_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterResult_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitResult_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Result_columnContext result_column() {
		Result_columnContext _localctx = new Result_columnContext(Context, State);
		EnterRule(_localctx, 112, RULE_result_column);
		int _la;
		try {
			State = 1494;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,210,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1482;
				Match(STAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1483;
				table_name();
				State = 1484;
				Match(DOT);
				State = 1485;
				Match(STAR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1487;
				expr(0);
				State = 1492;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS || _la==IDENTIFIER || _la==STRING_LITERAL) {
					{
					State = 1489;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 1488;
						Match(AS);
						}
					}

					State = 1491;
					column_alias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SQLiteParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(SQLiteParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL() { return GetToken(SQLiteParser.NATURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(SQLiteParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(SQLiteParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(SQLiteParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(SQLiteParser.OUTER, 0); }
		public Join_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterJoin_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitJoin_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_operatorContext join_operator() {
		Join_operatorContext _localctx = new Join_operatorContext(Context, State);
		EnterRule(_localctx, 114, RULE_join_operator);
		int _la;
		try {
			State = 1509;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1496;
				Match(COMMA);
				}
				break;
			case CROSS:
			case INNER:
			case JOIN:
			case LEFT:
			case NATURAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1498;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NATURAL) {
					{
					State = 1497;
					Match(NATURAL);
					}
				}

				State = 1506;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LEFT:
					{
					State = 1500;
					Match(LEFT);
					State = 1502;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OUTER) {
						{
						State = 1501;
						Match(OUTER);
						}
					}

					}
					break;
				case INNER:
					{
					State = 1504;
					Match(INNER);
					}
					break;
				case CROSS:
					{
					State = 1505;
					Match(CROSS);
					}
					break;
				case JOIN:
					break;
				default:
					break;
				}
				State = 1508;
				Match(JOIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(SQLiteParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(SQLiteParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Join_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterJoin_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitJoin_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_constraintContext join_constraint() {
		Join_constraintContext _localctx = new Join_constraintContext(Context, State);
		EnterRule(_localctx, 116, RULE_join_constraint);
		int _la;
		try {
			State = 1525;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1511;
				Match(ON);
				State = 1512;
				expr(0);
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1513;
				Match(USING);
				State = 1514;
				Match(OPEN_PAR);
				State = 1515;
				column_name();
				State = 1520;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1516;
					Match(COMMA);
					State = 1517;
					column_name();
					}
					}
					State = 1522;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1523;
				Match(CLOSE_PAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(SQLiteParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(SQLiteParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(SQLiteParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(SQLiteParser.EXCEPT, 0); }
		public Compound_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterCompound_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitCompound_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_operatorContext compound_operator() {
		Compound_operatorContext _localctx = new Compound_operatorContext(Context, State);
		EnterRule(_localctx, 118, RULE_compound_operator);
		int _la;
		try {
			State = 1533;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1527;
				Match(UNION);
				State = 1529;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL) {
					{
					State = 1528;
					Match(ALL);
					}
				}

				}
				break;
			case INTERSECT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1531;
				Match(INTERSECT);
				}
				break;
			case EXCEPT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1532;
				Match(EXCEPT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(SQLiteParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(SQLiteParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(SQLiteParser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(SQLiteParser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext[] column_name_list() {
			return GetRuleContexts<Column_name_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list(int i) {
			return GetRuleContext<Column_name_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(SQLiteParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SQLiteParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(SQLiteParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Returning_clauseContext returning_clause() {
			return GetRuleContext<Returning_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(SQLiteParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT() { return GetToken(SQLiteParser.ABORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(SQLiteParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAIL() { return GetToken(SQLiteParser.FAIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(SQLiteParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		public Update_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterUpdate_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitUpdate_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_stmtContext update_stmt() {
		Update_stmtContext _localctx = new Update_stmtContext(Context, State);
		EnterRule(_localctx, 120, RULE_update_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1536;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 1535;
				with_clause();
				}
			}

			State = 1538;
			Match(UPDATE);
			State = 1541;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,220,Context) ) {
			case 1:
				{
				State = 1539;
				Match(OR);
				State = 1540;
				_la = TokenStream.LA(1);
				if ( !(_la==ABORT || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 19140298416325121L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1543;
			qualified_table_name();
			State = 1544;
			Match(SET);
			State = 1547;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,221,Context) ) {
			case 1:
				{
				State = 1545;
				column_name();
				}
				break;
			case 2:
				{
				State = 1546;
				column_name_list();
				}
				break;
			}
			State = 1549;
			Match(ASSIGN);
			State = 1550;
			expr(0);
			State = 1561;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1551;
				Match(COMMA);
				State = 1554;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,222,Context) ) {
				case 1:
					{
					State = 1552;
					column_name();
					}
					break;
				case 2:
					{
					State = 1553;
					column_name_list();
					}
					break;
				}
				State = 1556;
				Match(ASSIGN);
				State = 1557;
				expr(0);
				}
				}
				State = 1563;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1576;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 1564;
				Match(FROM);
				State = 1574;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
				case 1:
					{
					State = 1565;
					table_or_subquery();
					State = 1570;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1566;
						Match(COMMA);
						State = 1567;
						table_or_subquery();
						}
						}
						State = 1572;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				case 2:
					{
					State = 1573;
					join_clause();
					}
					break;
				}
				}
			}

			State = 1580;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 1578;
				Match(WHERE);
				State = 1579;
				expr(0);
				}
			}

			State = 1583;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNING) {
				{
				State = 1582;
				returning_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterColumn_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitColumn_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_listContext column_name_list() {
		Column_name_listContext _localctx = new Column_name_listContext(Context, State);
		EnterRule(_localctx, 122, RULE_column_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1585;
			Match(OPEN_PAR);
			State = 1586;
			column_name();
			State = 1591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1587;
				Match(COMMA);
				State = 1588;
				column_name();
				}
				}
				State = 1593;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1594;
			Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_stmt_limitedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(SQLiteParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(SQLiteParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(SQLiteParser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(SQLiteParser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext[] column_name_list() {
			return GetRuleContexts<Column_name_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list(int i) {
			return GetRuleContext<Column_name_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(SQLiteParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(SQLiteParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Returning_clauseContext returning_clause() {
			return GetRuleContext<Returning_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Limit_clauseContext limit_clause() {
			return GetRuleContext<Limit_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(SQLiteParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT() { return GetToken(SQLiteParser.ABORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(SQLiteParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAIL() { return GetToken(SQLiteParser.FAIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(SQLiteParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Update_stmt_limitedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_stmt_limited; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterUpdate_stmt_limited(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitUpdate_stmt_limited(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_stmt_limited(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_stmt_limitedContext update_stmt_limited() {
		Update_stmt_limitedContext _localctx = new Update_stmt_limitedContext(Context, State);
		EnterRule(_localctx, 124, RULE_update_stmt_limited);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 1596;
				with_clause();
				}
			}

			State = 1599;
			Match(UPDATE);
			State = 1602;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,231,Context) ) {
			case 1:
				{
				State = 1600;
				Match(OR);
				State = 1601;
				_la = TokenStream.LA(1);
				if ( !(_la==ABORT || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 19140298416325121L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1604;
			qualified_table_name();
			State = 1605;
			Match(SET);
			State = 1608;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,232,Context) ) {
			case 1:
				{
				State = 1606;
				column_name();
				}
				break;
			case 2:
				{
				State = 1607;
				column_name_list();
				}
				break;
			}
			State = 1610;
			Match(ASSIGN);
			State = 1611;
			expr(0);
			State = 1622;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1612;
				Match(COMMA);
				State = 1615;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,233,Context) ) {
				case 1:
					{
					State = 1613;
					column_name();
					}
					break;
				case 2:
					{
					State = 1614;
					column_name_list();
					}
					break;
				}
				State = 1617;
				Match(ASSIGN);
				State = 1618;
				expr(0);
				}
				}
				State = 1624;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1627;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 1625;
				Match(WHERE);
				State = 1626;
				expr(0);
				}
			}

			State = 1630;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNING) {
				{
				State = 1629;
				returning_clause();
				}
			}

			State = 1636;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT || _la==ORDER) {
				{
				State = 1633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 1632;
					order_by_clause();
					}
				}

				State = 1635;
				limit_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_table_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SQLiteParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SQLiteParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXED() { return GetToken(SQLiteParser.INDEXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SQLiteParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SQLiteParser.NOT, 0); }
		public Qualified_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_table_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterQualified_table_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitQualified_table_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_table_nameContext qualified_table_name() {
		Qualified_table_nameContext _localctx = new Qualified_table_nameContext(Context, State);
		EnterRule(_localctx, 126, RULE_qualified_table_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1641;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,239,Context) ) {
			case 1:
				{
				State = 1638;
				schema_name();
				State = 1639;
				Match(DOT);
				}
				break;
			}
			State = 1643;
			table_name();
			State = 1646;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1644;
				Match(AS);
				State = 1645;
				alias();
				}
			}

			State = 1653;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INDEXED:
				{
				State = 1648;
				Match(INDEXED);
				State = 1649;
				Match(BY);
				State = 1650;
				index_name();
				}
				break;
			case NOT:
				{
				State = 1651;
				Match(NOT);
				State = 1652;
				Match(INDEXED);
				}
				break;
			case Eof:
			case SCOL:
			case ALTER:
			case ANALYZE:
			case ATTACH:
			case BEGIN:
			case COMMIT:
			case CREATE:
			case DELETE:
			case DETACH:
			case DROP:
			case END:
			case EXPLAIN:
			case INSERT:
			case LIMIT:
			case ORDER:
			case PRAGMA:
			case REINDEX:
			case RELEASE:
			case REPLACE:
			case RETURNING:
			case ROLLBACK:
			case SAVEPOINT:
			case SELECT:
			case SET:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case WHERE:
			case WITH:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vacuum_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VACUUM() { return GetToken(SQLiteParser.VACUUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(SQLiteParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilenameContext filename() {
			return GetRuleContext<FilenameContext>(0);
		}
		public Vacuum_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vacuum_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterVacuum_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitVacuum_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVacuum_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Vacuum_stmtContext vacuum_stmt() {
		Vacuum_stmtContext _localctx = new Vacuum_stmtContext(Context, State);
		EnterRule(_localctx, 128, RULE_vacuum_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1655;
			Match(VACUUM);
			State = 1657;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,242,Context) ) {
			case 1:
				{
				State = 1656;
				schema_name();
				}
				break;
			}
			State = 1661;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 1659;
				Match(INTO);
				State = 1660;
				filename();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Filter_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(SQLiteParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(SQLiteParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public Filter_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterFilter_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitFilter_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Filter_clauseContext filter_clause() {
		Filter_clauseContext _localctx = new Filter_clauseContext(Context, State);
		EnterRule(_localctx, 130, RULE_filter_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1663;
			Match(FILTER);
			State = 1664;
			Match(OPEN_PAR);
			State = 1665;
			Match(WHERE);
			State = 1666;
			expr(0);
			State = 1667;
			Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_defnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(SQLiteParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(SQLiteParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(SQLiteParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Base_window_nameContext base_window_name() {
			return GetRuleContext<Base_window_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(SQLiteParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Frame_specContext frame_spec() {
			return GetRuleContext<Frame_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Window_defnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_defn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterWindow_defn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitWindow_defn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_defn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_defnContext window_defn() {
		Window_defnContext _localctx = new Window_defnContext(Context, State);
		EnterRule(_localctx, 132, RULE_window_defn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1669;
			Match(OPEN_PAR);
			State = 1671;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,244,Context) ) {
			case 1:
				{
				State = 1670;
				base_window_name();
				}
				break;
			}
			State = 1683;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 1673;
				Match(PARTITION);
				State = 1674;
				Match(BY);
				State = 1675;
				expr(0);
				State = 1680;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1676;
					Match(COMMA);
					State = 1677;
					expr(0);
					}
					}
					State = 1682;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			{
			State = 1685;
			Match(ORDER);
			State = 1686;
			Match(BY);
			State = 1687;
			ordering_term();
			State = 1692;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1688;
				Match(COMMA);
				State = 1689;
				ordering_term();
				}
				}
				State = 1694;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 1696;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 2251799880794113L) != 0) {
				{
				State = 1695;
				frame_spec();
				}
			}

			State = 1698;
			Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(SQLiteParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_nameContext window_name() {
			return GetRuleContext<Window_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Base_window_nameContext base_window_name() {
			return GetRuleContext<Base_window_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(SQLiteParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(SQLiteParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(SQLiteParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(SQLiteParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Frame_specContext frame_spec() {
			return GetRuleContext<Frame_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterOver_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitOver_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOver_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Over_clauseContext over_clause() {
		Over_clauseContext _localctx = new Over_clauseContext(Context, State);
		EnterRule(_localctx, 134, RULE_over_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1700;
			Match(OVER);
			State = 1734;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,255,Context) ) {
			case 1:
				{
				State = 1701;
				window_name();
				}
				break;
			case 2:
				{
				State = 1702;
				Match(OPEN_PAR);
				State = 1704;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,249,Context) ) {
				case 1:
					{
					State = 1703;
					base_window_name();
					}
					break;
				}
				State = 1716;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1706;
					Match(PARTITION);
					State = 1707;
					Match(BY);
					State = 1708;
					expr(0);
					State = 1713;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1709;
						Match(COMMA);
						State = 1710;
						expr(0);
						}
						}
						State = 1715;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1728;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 1718;
					Match(ORDER);
					State = 1719;
					Match(BY);
					State = 1720;
					ordering_term();
					State = 1725;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1721;
						Match(COMMA);
						State = 1722;
						ordering_term();
						}
						}
						State = 1727;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1731;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 2251799880794113L) != 0) {
					{
					State = 1730;
					frame_spec();
					}
				}

				State = 1733;
				Match(CLOSE_PAR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Frame_clauseContext frame_clause() {
			return GetRuleContext<Frame_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(SQLiteParser.EXCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(SQLiteParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(SQLiteParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(SQLiteParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES() { return GetToken(SQLiteParser.TIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(SQLiteParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS() { return GetToken(SQLiteParser.OTHERS, 0); }
		public Frame_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterFrame_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitFrame_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_specContext frame_spec() {
		Frame_specContext _localctx = new Frame_specContext(Context, State);
		EnterRule(_localctx, 136, RULE_frame_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1736;
			frame_clause();
			State = 1744;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXCLUDE:
				{
				State = 1737;
				Match(EXCLUDE);
				{
				State = 1738;
				Match(NO);
				State = 1739;
				Match(OTHERS);
				}
				}
				break;
			case CURRENT:
				{
				State = 1740;
				Match(CURRENT);
				State = 1741;
				Match(ROW);
				}
				break;
			case GROUP:
				{
				State = 1742;
				Match(GROUP);
				}
				break;
			case TIES:
				{
				State = 1743;
				Match(TIES);
				}
				break;
			case CLOSE_PAR:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(SQLiteParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(SQLiteParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPS() { return GetToken(SQLiteParser.GROUPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Frame_singleContext frame_single() {
			return GetRuleContext<Frame_singleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(SQLiteParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Frame_leftContext frame_left() {
			return GetRuleContext<Frame_leftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(SQLiteParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Frame_rightContext frame_right() {
			return GetRuleContext<Frame_rightContext>(0);
		}
		public Frame_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterFrame_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitFrame_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_clauseContext frame_clause() {
		Frame_clauseContext _localctx = new Frame_clauseContext(Context, State);
		EnterRule(_localctx, 138, RULE_frame_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1746;
			_la = TokenStream.LA(1);
			if ( !((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 2251799880794113L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1753;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,257,Context) ) {
			case 1:
				{
				State = 1747;
				frame_single();
				}
				break;
			case 2:
				{
				State = 1748;
				Match(BETWEEN);
				State = 1749;
				frame_left();
				State = 1750;
				Match(AND);
				State = 1751;
				frame_right();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_function_invocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_funcContext simple_func() {
			return GetRuleContext<Simple_funcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(SQLiteParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Simple_function_invocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_function_invocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterSimple_function_invocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitSimple_function_invocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_function_invocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_function_invocationContext simple_function_invocation() {
		Simple_function_invocationContext _localctx = new Simple_function_invocationContext(Context, State);
		EnterRule(_localctx, 140, RULE_simple_function_invocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1755;
			simple_func();
			State = 1756;
			Match(OPEN_PAR);
			State = 1766;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAR:
			case PLUS:
			case MINUS:
			case TILDE:
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case AS:
			case ASC:
			case ATTACH:
			case AUTOINCREMENT:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case COMMIT:
			case CONFLICT:
			case CONSTRAINT:
			case CREATE:
			case CROSS:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATABASE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DELETE:
			case DESC:
			case DETACH:
			case DISTINCT:
			case DROP:
			case EACH:
			case ELSE:
			case END:
			case ESCAPE:
			case EXCEPT:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case FAIL:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case GLOB:
			case GROUP:
			case HAVING:
			case IF:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INDEX:
			case INDEXED:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LEFT:
			case LIKE:
			case LIMIT:
			case MATCH:
			case NATURAL:
			case NO:
			case NOT:
			case NOTNULL:
			case NULL:
			case OF:
			case OFFSET:
			case ON:
			case OR:
			case ORDER:
			case OUTER:
			case PLAN:
			case PRAGMA:
			case PRIMARY:
			case QUERY:
			case RAISE:
			case RECURSIVE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESTRICT:
			case RIGHT:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case SAVEPOINT:
			case SELECT:
			case SET:
			case TABLE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TO:
			case TRANSACTION:
			case TRIGGER:
			case UNION:
			case UNIQUE:
			case UPDATE:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WITH:
			case WITHOUT:
			case FIRST_VALUE:
			case OVER:
			case PARTITION:
			case RANGE:
			case PRECEDING:
			case UNBOUNDED:
			case CURRENT:
			case FOLLOWING:
			case CUME_DIST:
			case DENSE_RANK:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case NTH_VALUE:
			case NTILE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case GENERATED:
			case ALWAYS:
			case STORED:
			case TRUE:
			case FALSE:
			case WINDOW:
			case NULLS:
			case FIRST:
			case LAST:
			case FILTER:
			case GROUPS:
			case EXCLUDE:
			case IDENTIFIER:
			case NUMERIC_LITERAL:
			case BIND_PARAMETER:
			case STRING_LITERAL:
			case BLOB_LITERAL:
				{
				State = 1757;
				expr(0);
				State = 1762;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1758;
					Match(COMMA);
					State = 1759;
					expr(0);
					}
					}
					State = 1764;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case STAR:
				{
				State = 1765;
				Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1768;
			Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_function_invocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_funcContext aggregate_func() {
			return GetRuleContext<Aggregate_funcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(SQLiteParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Filter_clauseContext filter_clause() {
			return GetRuleContext<Filter_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(SQLiteParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Aggregate_function_invocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_function_invocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterAggregate_function_invocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitAggregate_function_invocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregate_function_invocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_function_invocationContext aggregate_function_invocation() {
		Aggregate_function_invocationContext _localctx = new Aggregate_function_invocationContext(Context, State);
		EnterRule(_localctx, 142, RULE_aggregate_function_invocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1770;
			aggregate_func();
			State = 1771;
			Match(OPEN_PAR);
			State = 1784;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAR:
			case PLUS:
			case MINUS:
			case TILDE:
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case AS:
			case ASC:
			case ATTACH:
			case AUTOINCREMENT:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case COMMIT:
			case CONFLICT:
			case CONSTRAINT:
			case CREATE:
			case CROSS:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATABASE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DELETE:
			case DESC:
			case DETACH:
			case DISTINCT:
			case DROP:
			case EACH:
			case ELSE:
			case END:
			case ESCAPE:
			case EXCEPT:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case FAIL:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case GLOB:
			case GROUP:
			case HAVING:
			case IF:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INDEX:
			case INDEXED:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LEFT:
			case LIKE:
			case LIMIT:
			case MATCH:
			case NATURAL:
			case NO:
			case NOT:
			case NOTNULL:
			case NULL:
			case OF:
			case OFFSET:
			case ON:
			case OR:
			case ORDER:
			case OUTER:
			case PLAN:
			case PRAGMA:
			case PRIMARY:
			case QUERY:
			case RAISE:
			case RECURSIVE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESTRICT:
			case RIGHT:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case SAVEPOINT:
			case SELECT:
			case SET:
			case TABLE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TO:
			case TRANSACTION:
			case TRIGGER:
			case UNION:
			case UNIQUE:
			case UPDATE:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WITH:
			case WITHOUT:
			case FIRST_VALUE:
			case OVER:
			case PARTITION:
			case RANGE:
			case PRECEDING:
			case UNBOUNDED:
			case CURRENT:
			case FOLLOWING:
			case CUME_DIST:
			case DENSE_RANK:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case NTH_VALUE:
			case NTILE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case GENERATED:
			case ALWAYS:
			case STORED:
			case TRUE:
			case FALSE:
			case WINDOW:
			case NULLS:
			case FIRST:
			case LAST:
			case FILTER:
			case GROUPS:
			case EXCLUDE:
			case IDENTIFIER:
			case NUMERIC_LITERAL:
			case BIND_PARAMETER:
			case STRING_LITERAL:
			case BLOB_LITERAL:
				{
				State = 1773;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,260,Context) ) {
				case 1:
					{
					State = 1772;
					Match(DISTINCT);
					}
					break;
				}
				State = 1775;
				expr(0);
				State = 1780;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1776;
					Match(COMMA);
					State = 1777;
					expr(0);
					}
					}
					State = 1782;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case STAR:
				{
				State = 1783;
				Match(STAR);
				}
				break;
			case CLOSE_PAR:
				break;
			default:
				break;
			}
			State = 1786;
			Match(CLOSE_PAR);
			State = 1788;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FILTER) {
				{
				State = 1787;
				filter_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_function_invocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Window_functionContext window_function() {
			return GetRuleContext<Window_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(SQLiteParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_defnContext window_defn() {
			return GetRuleContext<Window_defnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_nameContext window_name() {
			return GetRuleContext<Window_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(SQLiteParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Filter_clauseContext filter_clause() {
			return GetRuleContext<Filter_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Window_function_invocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_function_invocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterWindow_function_invocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitWindow_function_invocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_function_invocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_function_invocationContext window_function_invocation() {
		Window_function_invocationContext _localctx = new Window_function_invocationContext(Context, State);
		EnterRule(_localctx, 144, RULE_window_function_invocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1790;
			window_function();
			State = 1791;
			Match(OPEN_PAR);
			State = 1801;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAR:
			case PLUS:
			case MINUS:
			case TILDE:
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case AS:
			case ASC:
			case ATTACH:
			case AUTOINCREMENT:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case COMMIT:
			case CONFLICT:
			case CONSTRAINT:
			case CREATE:
			case CROSS:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATABASE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DELETE:
			case DESC:
			case DETACH:
			case DISTINCT:
			case DROP:
			case EACH:
			case ELSE:
			case END:
			case ESCAPE:
			case EXCEPT:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case FAIL:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case GLOB:
			case GROUP:
			case HAVING:
			case IF:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INDEX:
			case INDEXED:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LEFT:
			case LIKE:
			case LIMIT:
			case MATCH:
			case NATURAL:
			case NO:
			case NOT:
			case NOTNULL:
			case NULL:
			case OF:
			case OFFSET:
			case ON:
			case OR:
			case ORDER:
			case OUTER:
			case PLAN:
			case PRAGMA:
			case PRIMARY:
			case QUERY:
			case RAISE:
			case RECURSIVE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESTRICT:
			case RIGHT:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case SAVEPOINT:
			case SELECT:
			case SET:
			case TABLE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TO:
			case TRANSACTION:
			case TRIGGER:
			case UNION:
			case UNIQUE:
			case UPDATE:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WITH:
			case WITHOUT:
			case FIRST_VALUE:
			case OVER:
			case PARTITION:
			case RANGE:
			case PRECEDING:
			case UNBOUNDED:
			case CURRENT:
			case FOLLOWING:
			case CUME_DIST:
			case DENSE_RANK:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case NTH_VALUE:
			case NTILE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case GENERATED:
			case ALWAYS:
			case STORED:
			case TRUE:
			case FALSE:
			case WINDOW:
			case NULLS:
			case FIRST:
			case LAST:
			case FILTER:
			case GROUPS:
			case EXCLUDE:
			case IDENTIFIER:
			case NUMERIC_LITERAL:
			case BIND_PARAMETER:
			case STRING_LITERAL:
			case BLOB_LITERAL:
				{
				State = 1792;
				expr(0);
				State = 1797;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1793;
					Match(COMMA);
					State = 1794;
					expr(0);
					}
					}
					State = 1799;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case STAR:
				{
				State = 1800;
				Match(STAR);
				}
				break;
			case CLOSE_PAR:
				break;
			default:
				break;
			}
			State = 1803;
			Match(CLOSE_PAR);
			State = 1805;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FILTER) {
				{
				State = 1804;
				filter_clause();
				}
			}

			State = 1807;
			Match(OVER);
			State = 1810;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,267,Context) ) {
			case 1:
				{
				State = 1808;
				window_defn();
				}
				break;
			case 2:
				{
				State = 1809;
				window_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_table_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SQLiteParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Common_table_expressionContext[] common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(SQLiteParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Common_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_table_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterCommon_table_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitCommon_table_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommon_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Common_table_stmtContext common_table_stmt() {
		Common_table_stmtContext _localctx = new Common_table_stmtContext(Context, State);
		EnterRule(_localctx, 146, RULE_common_table_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1812;
			Match(WITH);
			State = 1814;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,268,Context) ) {
			case 1:
				{
				State = 1813;
				Match(RECURSIVE);
				}
				break;
			}
			State = 1816;
			common_table_expression();
			State = 1821;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1817;
				Match(COMMA);
				State = 1818;
				common_table_expression();
				}
				}
				State = 1823;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(SQLiteParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SQLiteParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_clauseContext order_by_clause() {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(Context, State);
		EnterRule(_localctx, 148, RULE_order_by_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1824;
			Match(ORDER);
			State = 1825;
			Match(BY);
			State = 1826;
			ordering_term();
			State = 1831;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1827;
				Match(COMMA);
				State = 1828;
				ordering_term();
				}
				}
				State = 1833;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Limit_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(SQLiteParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Offset_clauseContext offset_clause() {
			return GetRuleContext<Offset_clauseContext>(0);
		}
		public Limit_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterLimit_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitLimit_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimit_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Limit_clauseContext limit_clause() {
		Limit_clauseContext _localctx = new Limit_clauseContext(Context, State);
		EnterRule(_localctx, 150, RULE_limit_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1834;
			Match(LIMIT);
			State = 1835;
			expr(0);
			State = 1837;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFSET) {
				{
				State = 1836;
				offset_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Offset_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(SQLiteParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Offset_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_offset_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterOffset_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitOffset_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOffset_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Offset_clauseContext offset_clause() {
		Offset_clauseContext _localctx = new Offset_clauseContext(Context, State);
		EnterRule(_localctx, 152, RULE_offset_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1839;
			Match(OFFSET);
			State = 1840;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ordering_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(SQLiteParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Asc_descContext asc_desc() {
			return GetRuleContext<Asc_descContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(SQLiteParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(SQLiteParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(SQLiteParser.LAST, 0); }
		public Ordering_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterOrdering_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitOrdering_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrdering_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ordering_termContext ordering_term() {
		Ordering_termContext _localctx = new Ordering_termContext(Context, State);
		EnterRule(_localctx, 154, RULE_ordering_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1842;
			expr(0);
			State = 1845;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLLATE) {
				{
				State = 1843;
				Match(COLLATE);
				State = 1844;
				collation_name();
				}
			}

			State = 1848;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 1847;
				asc_desc();
				}
			}

			State = 1852;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NULLS) {
				{
				State = 1850;
				Match(NULLS);
				State = 1851;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asc_descContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(SQLiteParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(SQLiteParser.DESC, 0); }
		public Asc_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asc_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterAsc_desc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitAsc_desc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsc_desc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Asc_descContext asc_desc() {
		Asc_descContext _localctx = new Asc_descContext(Context, State);
		EnterRule(_localctx, 156, RULE_asc_desc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1854;
			_la = TokenStream.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_leftContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(SQLiteParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(SQLiteParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(SQLiteParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(SQLiteParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(SQLiteParser.UNBOUNDED, 0); }
		public Frame_leftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_left; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterFrame_left(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitFrame_left(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_left(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_leftContext frame_left() {
		Frame_leftContext _localctx = new Frame_leftContext(Context, State);
		EnterRule(_localctx, 158, RULE_frame_left);
		try {
			State = 1866;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,275,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1856;
				expr(0);
				State = 1857;
				Match(PRECEDING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1859;
				expr(0);
				State = 1860;
				Match(FOLLOWING);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1862;
				Match(CURRENT);
				State = 1863;
				Match(ROW);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1864;
				Match(UNBOUNDED);
				State = 1865;
				Match(PRECEDING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_rightContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(SQLiteParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(SQLiteParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(SQLiteParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(SQLiteParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(SQLiteParser.UNBOUNDED, 0); }
		public Frame_rightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_right; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterFrame_right(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitFrame_right(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_right(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_rightContext frame_right() {
		Frame_rightContext _localctx = new Frame_rightContext(Context, State);
		EnterRule(_localctx, 160, RULE_frame_right);
		try {
			State = 1878;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1868;
				expr(0);
				State = 1869;
				Match(PRECEDING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1871;
				expr(0);
				State = 1872;
				Match(FOLLOWING);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1874;
				Match(CURRENT);
				State = 1875;
				Match(ROW);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1876;
				Match(UNBOUNDED);
				State = 1877;
				Match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_singleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(SQLiteParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(SQLiteParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(SQLiteParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(SQLiteParser.ROW, 0); }
		public Frame_singleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_single; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterFrame_single(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitFrame_single(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_single(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_singleContext frame_single() {
		Frame_singleContext _localctx = new Frame_singleContext(Context, State);
		EnterRule(_localctx, 162, RULE_frame_single);
		try {
			State = 1887;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,277,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1880;
				expr(0);
				State = 1881;
				Match(PRECEDING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1883;
				Match(UNBOUNDED);
				State = 1884;
				Match(PRECEDING);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1885;
				Match(CURRENT);
				State = 1886;
				Match(ROW);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAR() { return GetTokens(SQLiteParser.OPEN_PAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR(int i) {
			return GetToken(SQLiteParser.OPEN_PAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAR() { return GetTokens(SQLiteParser.CLOSE_PAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR(int i) {
			return GetToken(SQLiteParser.CLOSE_PAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(SQLiteParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_expr_asc_descContext order_by_expr_asc_desc() {
			return GetRuleContext<Order_by_expr_asc_descContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_VALUE() { return GetToken(SQLiteParser.FIRST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_VALUE() { return GetToken(SQLiteParser.LAST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Partition_byContext partition_by() {
			return GetRuleContext<Partition_byContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Frame_clauseContext frame_clause() {
			return GetRuleContext<Frame_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUME_DIST() { return GetToken(SQLiteParser.CUME_DIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_RANK() { return GetToken(SQLiteParser.PERCENT_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_exprContext order_by_expr() {
			return GetRuleContext<Order_by_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DENSE_RANK() { return GetToken(SQLiteParser.DENSE_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANK() { return GetToken(SQLiteParser.RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_NUMBER() { return GetToken(SQLiteParser.ROW_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAG() { return GetToken(SQLiteParser.LAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAD() { return GetToken(SQLiteParser.LEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OffsetContext offset() {
			return GetRuleContext<OffsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Default_valueContext default_value() {
			return GetRuleContext<Default_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTH_VALUE() { return GetToken(SQLiteParser.NTH_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SQLiteParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTILE() { return GetToken(SQLiteParser.NTILE, 0); }
		public Window_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterWindow_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitWindow_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_functionContext window_function() {
		Window_functionContext _localctx = new Window_functionContext(Context, State);
		EnterRule(_localctx, 164, RULE_window_function);
		int _la;
		try {
			State = 1974;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FIRST_VALUE:
			case LAST_VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1889;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1890;
				Match(OPEN_PAR);
				State = 1891;
				expr(0);
				State = 1892;
				Match(CLOSE_PAR);
				State = 1893;
				Match(OVER);
				State = 1894;
				Match(OPEN_PAR);
				State = 1896;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1895;
					partition_by();
					}
				}

				State = 1898;
				order_by_expr_asc_desc();
				State = 1900;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 2251799880794113L) != 0) {
					{
					State = 1899;
					frame_clause();
					}
				}

				State = 1902;
				Match(CLOSE_PAR);
				}
				break;
			case CUME_DIST:
			case PERCENT_RANK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1904;
				_la = TokenStream.LA(1);
				if ( !(_la==CUME_DIST || _la==PERCENT_RANK) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1905;
				Match(OPEN_PAR);
				State = 1906;
				Match(CLOSE_PAR);
				State = 1907;
				Match(OVER);
				State = 1908;
				Match(OPEN_PAR);
				State = 1910;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1909;
					partition_by();
					}
				}

				State = 1913;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 1912;
					order_by_expr();
					}
				}

				State = 1915;
				Match(CLOSE_PAR);
				}
				break;
			case DENSE_RANK:
			case RANK:
			case ROW_NUMBER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1916;
				_la = TokenStream.LA(1);
				if ( !((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & 385L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1917;
				Match(OPEN_PAR);
				State = 1918;
				Match(CLOSE_PAR);
				State = 1919;
				Match(OVER);
				State = 1920;
				Match(OPEN_PAR);
				State = 1922;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1921;
					partition_by();
					}
				}

				State = 1924;
				order_by_expr_asc_desc();
				State = 1925;
				Match(CLOSE_PAR);
				}
				break;
			case LAG:
			case LEAD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1927;
				_la = TokenStream.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1928;
				Match(OPEN_PAR);
				State = 1929;
				expr(0);
				State = 1931;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,283,Context) ) {
				case 1:
					{
					State = 1930;
					offset();
					}
					break;
				}
				State = 1934;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1933;
					default_value();
					}
				}

				State = 1936;
				Match(CLOSE_PAR);
				State = 1937;
				Match(OVER);
				State = 1938;
				Match(OPEN_PAR);
				State = 1940;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1939;
					partition_by();
					}
				}

				State = 1942;
				order_by_expr_asc_desc();
				State = 1943;
				Match(CLOSE_PAR);
				}
				break;
			case NTH_VALUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1945;
				Match(NTH_VALUE);
				State = 1946;
				Match(OPEN_PAR);
				State = 1947;
				expr(0);
				State = 1948;
				Match(COMMA);
				State = 1949;
				signed_number();
				State = 1950;
				Match(CLOSE_PAR);
				State = 1951;
				Match(OVER);
				State = 1952;
				Match(OPEN_PAR);
				State = 1954;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1953;
					partition_by();
					}
				}

				State = 1956;
				order_by_expr_asc_desc();
				State = 1958;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 2251799880794113L) != 0) {
					{
					State = 1957;
					frame_clause();
					}
				}

				State = 1960;
				Match(CLOSE_PAR);
				}
				break;
			case NTILE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1962;
				Match(NTILE);
				State = 1963;
				Match(OPEN_PAR);
				State = 1964;
				expr(0);
				State = 1965;
				Match(CLOSE_PAR);
				State = 1966;
				Match(OVER);
				State = 1967;
				Match(OPEN_PAR);
				State = 1969;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1968;
					partition_by();
					}
				}

				State = 1971;
				order_by_expr_asc_desc();
				State = 1972;
				Match(CLOSE_PAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OffsetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SQLiteParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		public OffsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_offset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterOffset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitOffset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOffset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OffsetContext offset() {
		OffsetContext _localctx = new OffsetContext(Context, State);
		EnterRule(_localctx, 166, RULE_offset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1976;
			Match(COMMA);
			State = 1977;
			signed_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SQLiteParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		public Default_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterDefault_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitDefault_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_valueContext default_value() {
		Default_valueContext _localctx = new Default_valueContext(Context, State);
		EnterRule(_localctx, 168, RULE_default_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1979;
			Match(COMMA);
			State = 1980;
			signed_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_byContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(SQLiteParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SQLiteParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Partition_byContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_by; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterPartition_by(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitPartition_by(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartition_by(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partition_byContext partition_by() {
		Partition_byContext _localctx = new Partition_byContext(Context, State);
		EnterRule(_localctx, 170, RULE_partition_by);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1982;
			Match(PARTITION);
			State = 1983;
			Match(BY);
			State = 1985;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1984;
					expr(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1987;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,290,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(SQLiteParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SQLiteParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Order_by_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_exprContext order_by_expr() {
		Order_by_exprContext _localctx = new Order_by_exprContext(Context, State);
		EnterRule(_localctx, 172, RULE_order_by_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1989;
			Match(ORDER);
			State = 1990;
			Match(BY);
			State = 1992;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1991;
				expr(0);
				}
				}
				State = 1994;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & -33552632L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1152921504606846977L) != 0 || (((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 4476578029606273023L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_expr_asc_descContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(SQLiteParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SQLiteParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_asc_descContext expr_asc_desc() {
			return GetRuleContext<Expr_asc_descContext>(0);
		}
		public Order_by_expr_asc_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_expr_asc_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_expr_asc_desc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_expr_asc_desc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_expr_asc_desc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_expr_asc_descContext order_by_expr_asc_desc() {
		Order_by_expr_asc_descContext _localctx = new Order_by_expr_asc_descContext(Context, State);
		EnterRule(_localctx, 174, RULE_order_by_expr_asc_desc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1996;
			Match(ORDER);
			State = 1997;
			Match(BY);
			State = 1998;
			expr_asc_desc();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_asc_descContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Asc_descContext[] asc_desc() {
			return GetRuleContexts<Asc_descContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Asc_descContext asc_desc(int i) {
			return GetRuleContext<Asc_descContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SQLiteParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SQLiteParser.COMMA, i);
		}
		public Expr_asc_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_asc_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterExpr_asc_desc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitExpr_asc_desc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_asc_desc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_asc_descContext expr_asc_desc() {
		Expr_asc_descContext _localctx = new Expr_asc_descContext(Context, State);
		EnterRule(_localctx, 176, RULE_expr_asc_desc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2000;
			expr(0);
			State = 2002;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 2001;
				asc_desc();
				}
			}

			State = 2011;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2004;
				Match(COMMA);
				State = 2005;
				expr(0);
				State = 2007;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					State = 2006;
					asc_desc();
					}
				}

				}
				}
				State = 2013;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initial_selectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Initial_selectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initial_select; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterInitial_select(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitInitial_select(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitial_select(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Initial_selectContext initial_select() {
		Initial_selectContext _localctx = new Initial_selectContext(Context, State);
		EnterRule(_localctx, 178, RULE_initial_select);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2014;
			select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recursive_selectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Recursive_selectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recursive_select; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterRecursive_select(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitRecursive_select(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecursive_select(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Recursive_selectContext recursive_select() {
		Recursive_selectContext _localctx = new Recursive_selectContext(Context, State);
		EnterRule(_localctx, 180, RULE_recursive_select);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2016;
			select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SQLiteParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SQLiteParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(SQLiteParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SQLiteParser.NOT, 0); }
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterUnary_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitUnary_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(Context, State);
		EnterRule(_localctx, 182, RULE_unary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2018;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 1792L) != 0 || _la==NOT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Error_messageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		public Error_messageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error_message; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterError_message(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitError_message(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError_message(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Error_messageContext error_message() {
		Error_messageContext _localctx = new Error_messageContext(Context, State);
		EnterRule(_localctx, 184, RULE_error_message);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2020;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_argumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_defContext column_def() {
			return GetRuleContext<Column_defContext>(0);
		}
		public Module_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterModule_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitModule_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_argumentContext module_argument() {
		Module_argumentContext _localctx = new Module_argumentContext(Context, State);
		EnterRule(_localctx, 186, RULE_module_argument);
		try {
			State = 2024;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,295,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2022;
				expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2023;
				column_def();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SQLiteParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterColumn_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitColumn_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(Context, State);
		EnterRule(_localctx, 188, RULE_column_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2026;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==STRING_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT() { return GetToken(SQLiteParser.ABORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(SQLiteParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(SQLiteParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(SQLiteParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(SQLiteParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(SQLiteParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(SQLiteParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(SQLiteParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SQLiteParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(SQLiteParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTACH() { return GetToken(SQLiteParser.ATTACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOINCREMENT() { return GetToken(SQLiteParser.AUTOINCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(SQLiteParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(SQLiteParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(SQLiteParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SQLiteParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(SQLiteParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(SQLiteParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(SQLiteParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(SQLiteParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(SQLiteParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(SQLiteParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(SQLiteParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFLICT() { return GetToken(SQLiteParser.CONFLICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(SQLiteParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SQLiteParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(SQLiteParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(SQLiteParser.CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME() { return GetToken(SQLiteParser.CURRENT_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(SQLiteParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(SQLiteParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(SQLiteParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRABLE() { return GetToken(SQLiteParser.DEFERRABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED() { return GetToken(SQLiteParser.DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(SQLiteParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(SQLiteParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETACH() { return GetToken(SQLiteParser.DETACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(SQLiteParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(SQLiteParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(SQLiteParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(SQLiteParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SQLiteParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(SQLiteParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(SQLiteParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE() { return GetToken(SQLiteParser.EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SQLiteParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(SQLiteParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAIL() { return GetToken(SQLiteParser.FAIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(SQLiteParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(SQLiteParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SQLiteParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(SQLiteParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOB() { return GetToken(SQLiteParser.GLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(SQLiteParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(SQLiteParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SQLiteParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(SQLiteParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(SQLiteParser.IMMEDIATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SQLiteParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(SQLiteParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXED() { return GetToken(SQLiteParser.INDEXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIALLY() { return GetToken(SQLiteParser.INITIALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(SQLiteParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(SQLiteParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTEAD() { return GetToken(SQLiteParser.INSTEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(SQLiteParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(SQLiteParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(SQLiteParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISNULL() { return GetToken(SQLiteParser.ISNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(SQLiteParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(SQLiteParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(SQLiteParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(SQLiteParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(SQLiteParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(SQLiteParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL() { return GetToken(SQLiteParser.NATURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(SQLiteParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SQLiteParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNULL() { return GetToken(SQLiteParser.NOTNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(SQLiteParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(SQLiteParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(SQLiteParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(SQLiteParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(SQLiteParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(SQLiteParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(SQLiteParser.OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAN() { return GetToken(SQLiteParser.PLAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRAGMA() { return GetToken(SQLiteParser.PRAGMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(SQLiteParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(SQLiteParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAISE() { return GetToken(SQLiteParser.RAISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(SQLiteParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(SQLiteParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP() { return GetToken(SQLiteParser.REGEXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REINDEX() { return GetToken(SQLiteParser.REINDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(SQLiteParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(SQLiteParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(SQLiteParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(SQLiteParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(SQLiteParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(SQLiteParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(SQLiteParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(SQLiteParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(SQLiteParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(SQLiteParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(SQLiteParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SQLiteParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(SQLiteParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(SQLiteParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(SQLiteParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SQLiteParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(SQLiteParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(SQLiteParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(SQLiteParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(SQLiteParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(SQLiteParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(SQLiteParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VACUUM() { return GetToken(SQLiteParser.VACUUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(SQLiteParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(SQLiteParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIRTUAL() { return GetToken(SQLiteParser.VIRTUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(SQLiteParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(SQLiteParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SQLiteParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(SQLiteParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_VALUE() { return GetToken(SQLiteParser.FIRST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(SQLiteParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(SQLiteParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(SQLiteParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(SQLiteParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(SQLiteParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(SQLiteParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(SQLiteParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUME_DIST() { return GetToken(SQLiteParser.CUME_DIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DENSE_RANK() { return GetToken(SQLiteParser.DENSE_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAG() { return GetToken(SQLiteParser.LAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_VALUE() { return GetToken(SQLiteParser.LAST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAD() { return GetToken(SQLiteParser.LEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTH_VALUE() { return GetToken(SQLiteParser.NTH_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTILE() { return GetToken(SQLiteParser.NTILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_RANK() { return GetToken(SQLiteParser.PERCENT_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANK() { return GetToken(SQLiteParser.RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_NUMBER() { return GetToken(SQLiteParser.ROW_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(SQLiteParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS() { return GetToken(SQLiteParser.ALWAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORED() { return GetToken(SQLiteParser.STORED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(SQLiteParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(SQLiteParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(SQLiteParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(SQLiteParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(SQLiteParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(SQLiteParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(SQLiteParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPS() { return GetToken(SQLiteParser.GROUPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(SQLiteParser.EXCLUDE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 190, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2028;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & -33554432L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1152921504606846977L) != 0 || (((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 9007199254740991L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 192, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2030;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 194, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2032;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Schema_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Schema_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterSchema_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitSchema_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchema_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Schema_nameContext schema_name() {
		Schema_nameContext _localctx = new Schema_nameContext(Context, State);
		EnterRule(_localctx, 196, RULE_schema_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2034;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterTable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitTable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(Context, State);
		EnterRule(_localctx, 198, RULE_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2036;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_or_index_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_or_index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_or_index_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterTable_or_index_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitTable_or_index_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_or_index_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_or_index_nameContext table_or_index_name() {
		Table_or_index_nameContext _localctx = new Table_or_index_nameContext(Context, State);
		EnterRule(_localctx, 200, RULE_table_or_index_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2038;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterColumn_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitColumn_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_nameContext column_name() {
		Column_nameContext _localctx = new Column_nameContext(Context, State);
		EnterRule(_localctx, 202, RULE_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2040;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collation_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Collation_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collation_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterCollation_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitCollation_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollation_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Collation_nameContext collation_name() {
		Collation_nameContext _localctx = new Collation_nameContext(Context, State);
		EnterRule(_localctx, 204, RULE_collation_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2042;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Foreign_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterForeign_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitForeign_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_tableContext foreign_table() {
		Foreign_tableContext _localctx = new Foreign_tableContext(Context, State);
		EnterRule(_localctx, 206, RULE_foreign_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2044;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterIndex_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitIndex_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_nameContext index_name() {
		Index_nameContext _localctx = new Index_nameContext(Context, State);
		EnterRule(_localctx, 208, RULE_index_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2046;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trigger_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Trigger_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterTrigger_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitTrigger_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigger_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Trigger_nameContext trigger_name() {
		Trigger_nameContext _localctx = new Trigger_nameContext(Context, State);
		EnterRule(_localctx, 210, RULE_trigger_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2048;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public View_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterView_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitView_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_nameContext view_name() {
		View_nameContext _localctx = new View_nameContext(Context, State);
		EnterRule(_localctx, 212, RULE_view_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2050;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Module_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterModule_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitModule_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_nameContext module_name() {
		Module_nameContext _localctx = new Module_nameContext(Context, State);
		EnterRule(_localctx, 214, RULE_module_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2052;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Pragma_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterPragma_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitPragma_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_nameContext pragma_name() {
		Pragma_nameContext _localctx = new Pragma_nameContext(Context, State);
		EnterRule(_localctx, 216, RULE_pragma_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2054;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Savepoint_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepoint_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterSavepoint_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitSavepoint_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepoint_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Savepoint_nameContext savepoint_name() {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(Context, State);
		EnterRule(_localctx, 218, RULE_savepoint_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2056;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterTable_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitTable_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(Context, State);
		EnterRule(_localctx, 220, RULE_table_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2058;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Transaction_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterTransaction_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitTransaction_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransaction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_nameContext transaction_name() {
		Transaction_nameContext _localctx = new Transaction_nameContext(Context, State);
		EnterRule(_localctx, 222, RULE_transaction_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2060;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Window_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterWindow_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitWindow_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_nameContext window_name() {
		Window_nameContext _localctx = new Window_nameContext(Context, State);
		EnterRule(_localctx, 224, RULE_window_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2062;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 226, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2064;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public FilenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterFilename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitFilename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilenameContext filename() {
		FilenameContext _localctx = new FilenameContext(Context, State);
		EnterRule(_localctx, 228, RULE_filename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2066;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_window_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Base_window_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_window_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterBase_window_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitBase_window_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_window_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_window_nameContext base_window_name() {
		Base_window_nameContext _localctx = new Base_window_nameContext(Context, State);
		EnterRule(_localctx, 230, RULE_base_window_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2068;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_funcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Simple_funcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterSimple_func(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitSimple_func(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_func(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_funcContext simple_func() {
		Simple_funcContext _localctx = new Simple_funcContext(Context, State);
		EnterRule(_localctx, 232, RULE_simple_func);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2070;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_funcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Aggregate_funcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterAggregate_func(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitAggregate_func(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregate_func(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_funcContext aggregate_func() {
		Aggregate_funcContext _localctx = new Aggregate_funcContext(Context, State);
		EnterRule(_localctx, 234, RULE_aggregate_func);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2072;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_function_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_function_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterTable_function_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitTable_function_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_function_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_function_nameContext table_function_name() {
		Table_function_nameContext _localctx = new Table_function_nameContext(Context, State);
		EnterRule(_localctx, 236, RULE_table_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2074;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SQLiteParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(SQLiteParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(SQLiteParser.CLOSE_PAR, 0); }
		public Any_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.EnterAny_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteParserListener typedListener = listener as ISQLiteParserListener;
			if (typedListener != null) typedListener.ExitAny_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteParserVisitor<TResult> typedVisitor = visitor as ISQLiteParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAny_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Any_nameContext any_name() {
		Any_nameContext _localctx = new Any_nameContext(Context, State);
		EnterRule(_localctx, 238, RULE_any_name);
		try {
			State = 2083;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2076;
				Match(IDENTIFIER);
				}
				break;
			case ABORT:
			case ACTION:
			case ADD:
			case AFTER:
			case ALL:
			case ALTER:
			case ANALYZE:
			case AND:
			case AS:
			case ASC:
			case ATTACH:
			case AUTOINCREMENT:
			case BEFORE:
			case BEGIN:
			case BETWEEN:
			case BY:
			case CASCADE:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case COMMIT:
			case CONFLICT:
			case CONSTRAINT:
			case CREATE:
			case CROSS:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATABASE:
			case DEFAULT:
			case DEFERRABLE:
			case DEFERRED:
			case DELETE:
			case DESC:
			case DETACH:
			case DISTINCT:
			case DROP:
			case EACH:
			case ELSE:
			case END:
			case ESCAPE:
			case EXCEPT:
			case EXCLUSIVE:
			case EXISTS:
			case EXPLAIN:
			case FAIL:
			case FOR:
			case FOREIGN:
			case FROM:
			case FULL:
			case GLOB:
			case GROUP:
			case HAVING:
			case IF:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INDEX:
			case INDEXED:
			case INITIALLY:
			case INNER:
			case INSERT:
			case INSTEAD:
			case INTERSECT:
			case INTO:
			case IS:
			case ISNULL:
			case JOIN:
			case KEY:
			case LEFT:
			case LIKE:
			case LIMIT:
			case MATCH:
			case NATURAL:
			case NO:
			case NOT:
			case NOTNULL:
			case NULL:
			case OF:
			case OFFSET:
			case ON:
			case OR:
			case ORDER:
			case OUTER:
			case PLAN:
			case PRAGMA:
			case PRIMARY:
			case QUERY:
			case RAISE:
			case RECURSIVE:
			case REFERENCES:
			case REGEXP:
			case REINDEX:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESTRICT:
			case RIGHT:
			case ROLLBACK:
			case ROW:
			case ROWS:
			case SAVEPOINT:
			case SELECT:
			case SET:
			case TABLE:
			case TEMP:
			case TEMPORARY:
			case THEN:
			case TO:
			case TRANSACTION:
			case TRIGGER:
			case UNION:
			case UNIQUE:
			case UPDATE:
			case USING:
			case VACUUM:
			case VALUES:
			case VIEW:
			case VIRTUAL:
			case WHEN:
			case WHERE:
			case WITH:
			case WITHOUT:
			case FIRST_VALUE:
			case OVER:
			case PARTITION:
			case RANGE:
			case PRECEDING:
			case UNBOUNDED:
			case CURRENT:
			case FOLLOWING:
			case CUME_DIST:
			case DENSE_RANK:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case NTH_VALUE:
			case NTILE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case GENERATED:
			case ALWAYS:
			case STORED:
			case TRUE:
			case FALSE:
			case WINDOW:
			case NULLS:
			case FIRST:
			case LAST:
			case FILTER:
			case GROUPS:
			case EXCLUDE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2077;
				keyword();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2078;
				Match(STRING_LITERAL);
				}
				break;
			case OPEN_PAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2079;
				Match(OPEN_PAR);
				State = 2080;
				any_name();
				State = 2081;
				Match(CLOSE_PAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 32: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 20);
		case 1: return Precpred(Context, 19);
		case 2: return Precpred(Context, 18);
		case 3: return Precpred(Context, 17);
		case 4: return Precpred(Context, 16);
		case 5: return Precpred(Context, 15);
		case 6: return Precpred(Context, 14);
		case 7: return Precpred(Context, 13);
		case 8: return Precpred(Context, 6);
		case 9: return Precpred(Context, 5);
		case 10: return Precpred(Context, 9);
		case 11: return Precpred(Context, 8);
		case 12: return Precpred(Context, 7);
		case 13: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,193,2086,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,1,0,5,0,242,8,0,10,0,12,0,245,9,0,
		1,0,1,0,1,1,5,1,250,8,1,10,1,12,1,253,9,1,1,1,1,1,4,1,257,8,1,11,1,12,
		1,258,1,1,5,1,262,8,1,10,1,12,1,265,9,1,1,1,5,1,268,8,1,10,1,12,1,271,
		9,1,1,2,1,2,1,2,3,2,276,8,2,3,2,278,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,
		304,8,2,1,3,1,3,1,3,1,3,1,3,3,3,311,8,3,1,3,1,3,1,3,1,3,1,3,3,3,318,8,
		3,1,3,1,3,1,3,1,3,3,3,324,8,3,1,3,1,3,3,3,328,8,3,1,3,1,3,1,3,3,3,333,
		8,3,1,3,3,3,336,8,3,1,4,1,4,1,4,1,4,1,4,3,4,343,8,4,1,4,3,4,346,8,4,1,
		5,1,5,3,5,350,8,5,1,5,1,5,1,5,1,5,1,6,1,6,3,6,358,8,6,1,6,1,6,3,6,362,
		8,6,3,6,364,8,6,1,7,1,7,3,7,368,8,7,1,8,1,8,3,8,372,8,8,1,8,1,8,3,8,376,
		8,8,1,8,3,8,379,8,8,1,9,1,9,1,9,1,10,1,10,3,10,386,8,10,1,10,1,10,1,11,
		1,11,3,11,392,8,11,1,11,1,11,1,11,1,11,3,11,398,8,11,1,11,1,11,1,11,3,
		11,403,8,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,5,11,412,8,11,10,11,12,
		11,415,9,11,1,11,1,11,1,11,3,11,420,8,11,1,12,1,12,3,12,424,8,12,1,12,
		1,12,3,12,428,8,12,1,12,3,12,431,8,12,1,13,1,13,3,13,435,8,13,1,13,1,13,
		1,13,1,13,3,13,441,8,13,1,13,1,13,1,13,3,13,446,8,13,1,13,1,13,1,13,1,
		13,1,13,5,13,453,8,13,10,13,12,13,456,9,13,1,13,1,13,5,13,460,8,13,10,
		13,12,13,463,9,13,1,13,1,13,1,13,3,13,468,8,13,1,13,1,13,3,13,472,8,13,
		1,14,1,14,3,14,476,8,14,1,14,5,14,479,8,14,10,14,12,14,482,9,14,1,15,4,
		15,485,8,15,11,15,12,15,486,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,3,15,499,8,15,1,16,1,16,3,16,503,8,16,1,16,1,16,1,16,3,16,508,
		8,16,1,16,3,16,511,8,16,1,16,3,16,514,8,16,1,16,3,16,517,8,16,1,16,1,16,
		3,16,521,8,16,1,16,3,16,524,8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
		16,1,16,1,16,1,16,1,16,3,16,538,8,16,1,16,1,16,1,16,1,16,1,16,3,16,545,
		8,16,1,16,1,16,1,16,1,16,1,16,3,16,552,8,16,3,16,554,8,16,1,17,3,17,557,
		8,17,1,17,1,17,1,18,1,18,3,18,563,8,18,1,18,1,18,1,18,3,18,568,8,18,1,
		18,1,18,1,18,1,18,5,18,574,8,18,10,18,12,18,577,9,18,1,18,1,18,3,18,581,
		8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,5,18,594,8,
		18,10,18,12,18,597,9,18,1,18,1,18,1,18,3,18,602,8,18,1,19,1,19,1,19,1,
		19,1,19,1,19,5,19,610,8,19,10,19,12,19,613,9,19,1,19,1,19,3,19,617,8,19,
		1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,627,8,19,1,19,1,19,5,19,631,
		8,19,10,19,12,19,634,9,19,1,19,3,19,637,8,19,1,19,1,19,1,19,3,19,642,8,
		19,3,19,644,8,19,1,20,1,20,1,20,1,20,1,21,1,21,3,21,652,8,21,1,21,1,21,
		1,21,1,21,3,21,658,8,21,1,21,1,21,1,21,3,21,663,8,21,1,21,1,21,1,21,1,
		21,1,21,3,21,670,8,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,679,8,21,
		10,21,12,21,682,9,21,3,21,684,8,21,3,21,686,8,21,1,21,1,21,1,21,1,21,1,
		21,3,21,693,8,21,1,21,1,21,3,21,697,8,21,1,21,1,21,1,21,1,21,1,21,3,21,
		704,8,21,1,21,1,21,4,21,708,8,21,11,21,12,21,709,1,21,1,21,1,22,1,22,3,
		22,716,8,22,1,22,1,22,1,22,1,22,3,22,722,8,22,1,22,1,22,1,22,3,22,727,
		8,22,1,22,1,22,1,22,1,22,1,22,5,22,734,8,22,10,22,12,22,737,9,22,1,22,
		1,22,3,22,741,8,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,3,23,752,
		8,23,1,23,1,23,1,23,3,23,757,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,5,
		23,766,8,23,10,23,12,23,769,9,23,1,23,1,23,3,23,773,8,23,1,24,1,24,3,24,
		777,8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,5,
		24,791,8,24,10,24,12,24,794,9,24,1,25,1,25,1,25,1,25,1,25,5,25,801,8,25,
		10,25,12,25,804,9,25,1,25,1,25,3,25,808,8,25,1,26,1,26,1,26,1,26,1,26,
		1,26,3,26,816,8,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,5,27,826,8,
		27,10,27,12,27,829,9,27,1,27,1,27,3,27,833,8,27,1,27,1,27,1,27,1,27,1,
		27,1,28,3,28,841,8,28,1,28,1,28,1,28,1,28,1,28,3,28,848,8,28,1,28,3,28,
		851,8,28,1,29,3,29,854,8,29,1,29,1,29,1,29,1,29,1,29,3,29,861,8,29,1,29,
		3,29,864,8,29,1,29,3,29,867,8,29,1,29,3,29,870,8,29,1,30,1,30,3,30,874,
		8,30,1,30,1,30,1,31,1,31,1,31,1,31,3,31,882,8,31,1,31,1,31,1,31,3,31,887,
		8,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,3,32,897,8,32,1,32,1,32,1,
		32,3,32,902,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,911,8,32,1,32,
		1,32,1,32,5,32,916,8,32,10,32,12,32,919,9,32,1,32,3,32,922,8,32,1,32,1,
		32,3,32,926,8,32,1,32,3,32,929,8,32,1,32,1,32,1,32,1,32,5,32,935,8,32,
		10,32,12,32,938,9,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
		3,32,950,8,32,1,32,3,32,953,8,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,961,
		8,32,1,32,1,32,1,32,1,32,1,32,4,32,968,8,32,11,32,12,32,969,1,32,1,32,
		3,32,974,8,32,1,32,1,32,1,32,3,32,979,8,32,1,32,1,32,1,32,1,32,1,32,1,
		32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
		32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,1009,8,32,1,32,1,32,1,
		32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,1021,8,32,1,32,1,32,1,32,3,
		32,1026,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,1038,
		8,32,1,32,1,32,1,32,1,32,3,32,1044,8,32,1,32,1,32,1,32,1,32,1,32,3,32,
		1051,8,32,1,32,1,32,3,32,1055,8,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,
		1063,8,32,10,32,12,32,1066,9,32,3,32,1068,8,32,1,32,1,32,1,32,1,32,3,32,
		1074,8,32,1,32,1,32,1,32,1,32,3,32,1080,8,32,1,32,1,32,1,32,1,32,1,32,
		5,32,1087,8,32,10,32,12,32,1090,9,32,3,32,1092,8,32,1,32,1,32,3,32,1096,
		8,32,5,32,1098,8,32,10,32,12,32,1101,9,32,1,33,1,33,1,33,1,33,1,33,1,33,
		3,33,1109,8,33,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,35,5,35,1119,8,35,
		10,35,12,35,1122,9,35,1,35,1,35,1,36,3,36,1127,8,36,1,36,1,36,1,36,1,36,
		1,36,3,36,1134,8,36,1,36,1,36,1,36,1,36,3,36,1140,8,36,1,36,1,36,1,36,
		3,36,1145,8,36,1,36,3,36,1148,8,36,1,36,1,36,3,36,1152,8,36,1,36,3,36,
		1155,8,36,1,36,1,36,3,36,1159,8,36,1,36,3,36,1162,8,36,1,37,1,37,1,37,
		1,37,5,37,1168,8,37,10,37,12,37,1171,9,37,1,38,1,38,1,38,1,38,1,38,1,38,
		5,38,1179,8,38,10,38,12,38,1182,9,38,1,38,1,38,1,38,3,38,1187,8,38,3,38,
		1189,8,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,1197,8,38,1,38,1,38,1,38,
		1,38,1,38,3,38,1204,8,38,1,38,1,38,1,38,5,38,1209,8,38,10,38,12,38,1212,
		9,38,1,38,1,38,3,38,1216,8,38,3,38,1218,8,38,1,39,1,39,1,39,1,39,3,39,
		1224,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,1233,8,39,1,40,1,40,
		1,40,3,40,1238,8,40,1,41,1,41,1,41,1,41,1,41,3,41,1245,8,41,1,41,1,41,
		3,41,1249,8,41,3,41,1251,8,41,1,42,3,42,1254,8,42,1,42,1,42,1,42,1,42,
		5,42,1260,8,42,10,42,12,42,1263,9,42,1,42,3,42,1266,8,42,1,42,3,42,1269,
		8,42,1,43,1,43,1,43,3,43,1274,8,43,4,43,1276,8,43,11,43,12,43,1277,1,44,
		1,44,1,44,1,45,1,45,1,45,1,45,1,45,5,45,1288,8,45,10,45,12,45,1291,9,45,
		1,45,3,45,1294,8,45,1,46,1,46,1,46,1,47,1,47,1,47,1,47,5,47,1303,8,47,
		10,47,12,47,1306,9,47,1,48,1,48,1,48,1,48,5,48,1312,8,48,10,48,12,48,1315,
		9,48,1,48,1,48,1,49,1,49,1,49,1,49,5,49,1323,8,49,10,49,12,49,1326,9,49,
		1,49,3,49,1329,8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,5,50,
		1340,8,50,10,50,12,50,1343,9,50,1,50,1,50,1,50,5,50,1348,8,50,10,50,12,
		50,1351,9,50,3,50,1353,8,50,1,51,1,51,3,51,1357,8,51,1,51,1,51,1,51,5,
		51,1362,8,51,10,51,12,51,1365,9,51,1,51,3,51,1368,8,51,1,51,3,51,1371,
		8,51,1,51,3,51,1374,8,51,1,51,3,51,1377,8,51,1,51,3,51,1380,8,51,1,52,
		1,52,1,53,3,53,1385,8,53,1,53,1,53,3,53,1389,8,53,1,53,3,53,1392,8,53,
		1,54,3,54,1395,8,54,1,54,1,54,1,54,3,54,1400,8,54,1,54,1,54,3,54,1404,
		8,54,1,54,4,54,1407,8,54,11,54,12,54,1408,1,54,3,54,1412,8,54,1,54,3,54,
		1415,8,54,1,55,1,55,1,55,3,55,1420,8,55,1,55,1,55,3,55,1424,8,55,1,55,
		3,55,1427,8,55,1,55,1,55,1,55,1,55,1,55,3,55,1434,8,55,1,55,1,55,1,55,
		3,55,1439,8,55,1,55,1,55,1,55,1,55,1,55,5,55,1446,8,55,10,55,12,55,1449,
		9,55,1,55,1,55,3,55,1453,8,55,1,55,3,55,1456,8,55,1,55,1,55,1,55,1,55,
		5,55,1462,8,55,10,55,12,55,1465,9,55,1,55,3,55,1468,8,55,1,55,1,55,1,55,
		1,55,1,55,1,55,3,55,1476,8,55,1,55,3,55,1479,8,55,3,55,1481,8,55,1,56,
		1,56,1,56,1,56,1,56,1,56,1,56,3,56,1490,8,56,1,56,3,56,1493,8,56,3,56,
		1495,8,56,1,57,1,57,3,57,1499,8,57,1,57,1,57,3,57,1503,8,57,1,57,1,57,
		3,57,1507,8,57,1,57,3,57,1510,8,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
		5,58,1519,8,58,10,58,12,58,1522,9,58,1,58,1,58,3,58,1526,8,58,1,59,1,59,
		3,59,1530,8,59,1,59,1,59,3,59,1534,8,59,1,60,3,60,1537,8,60,1,60,1,60,
		1,60,3,60,1542,8,60,1,60,1,60,1,60,1,60,3,60,1548,8,60,1,60,1,60,1,60,
		1,60,1,60,3,60,1555,8,60,1,60,1,60,1,60,5,60,1560,8,60,10,60,12,60,1563,
		9,60,1,60,1,60,1,60,1,60,5,60,1569,8,60,10,60,12,60,1572,9,60,1,60,3,60,
		1575,8,60,3,60,1577,8,60,1,60,1,60,3,60,1581,8,60,1,60,3,60,1584,8,60,
		1,61,1,61,1,61,1,61,5,61,1590,8,61,10,61,12,61,1593,9,61,1,61,1,61,1,62,
		3,62,1598,8,62,1,62,1,62,1,62,3,62,1603,8,62,1,62,1,62,1,62,1,62,3,62,
		1609,8,62,1,62,1,62,1,62,1,62,1,62,3,62,1616,8,62,1,62,1,62,1,62,5,62,
		1621,8,62,10,62,12,62,1624,9,62,1,62,1,62,3,62,1628,8,62,1,62,3,62,1631,
		8,62,1,62,3,62,1634,8,62,1,62,3,62,1637,8,62,1,63,1,63,1,63,3,63,1642,
		8,63,1,63,1,63,1,63,3,63,1647,8,63,1,63,1,63,1,63,1,63,1,63,3,63,1654,
		8,63,1,64,1,64,3,64,1658,8,64,1,64,1,64,3,64,1662,8,64,1,65,1,65,1,65,
		1,65,1,65,1,65,1,66,1,66,3,66,1672,8,66,1,66,1,66,1,66,1,66,1,66,5,66,
		1679,8,66,10,66,12,66,1682,9,66,3,66,1684,8,66,1,66,1,66,1,66,1,66,1,66,
		5,66,1691,8,66,10,66,12,66,1694,9,66,1,66,3,66,1697,8,66,1,66,1,66,1,67,
		1,67,1,67,1,67,3,67,1705,8,67,1,67,1,67,1,67,1,67,1,67,5,67,1712,8,67,
		10,67,12,67,1715,9,67,3,67,1717,8,67,1,67,1,67,1,67,1,67,1,67,5,67,1724,
		8,67,10,67,12,67,1727,9,67,3,67,1729,8,67,1,67,3,67,1732,8,67,1,67,3,67,
		1735,8,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1745,8,68,1,69,
		1,69,1,69,1,69,1,69,1,69,1,69,3,69,1754,8,69,1,70,1,70,1,70,1,70,1,70,
		5,70,1761,8,70,10,70,12,70,1764,9,70,1,70,3,70,1767,8,70,1,70,1,70,1,71,
		1,71,1,71,3,71,1774,8,71,1,71,1,71,1,71,5,71,1779,8,71,10,71,12,71,1782,
		9,71,1,71,3,71,1785,8,71,1,71,1,71,3,71,1789,8,71,1,72,1,72,1,72,1,72,
		1,72,5,72,1796,8,72,10,72,12,72,1799,9,72,1,72,3,72,1802,8,72,1,72,1,72,
		3,72,1806,8,72,1,72,1,72,1,72,3,72,1811,8,72,1,73,1,73,3,73,1815,8,73,
		1,73,1,73,1,73,5,73,1820,8,73,10,73,12,73,1823,9,73,1,74,1,74,1,74,1,74,
		1,74,5,74,1830,8,74,10,74,12,74,1833,9,74,1,75,1,75,1,75,3,75,1838,8,75,
		1,76,1,76,1,76,1,77,1,77,1,77,3,77,1846,8,77,1,77,3,77,1849,8,77,1,77,
		1,77,3,77,1853,8,77,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
		1,79,1,79,3,79,1867,8,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,
		1,80,3,80,1879,8,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1888,8,81,
		1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1897,8,82,1,82,1,82,3,82,1901,
		8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1911,8,82,1,82,3,82,
		1914,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1923,8,82,1,82,1,82,
		1,82,1,82,1,82,1,82,1,82,3,82,1932,8,82,1,82,3,82,1935,8,82,1,82,1,82,
		1,82,1,82,3,82,1941,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
		1,82,1,82,1,82,3,82,1955,8,82,1,82,1,82,3,82,1959,8,82,1,82,1,82,1,82,
		1,82,1,82,1,82,1,82,1,82,1,82,3,82,1970,8,82,1,82,1,82,1,82,3,82,1975,
		8,82,1,83,1,83,1,83,1,84,1,84,1,84,1,85,1,85,1,85,4,85,1986,8,85,11,85,
		12,85,1987,1,86,1,86,1,86,4,86,1993,8,86,11,86,12,86,1994,1,87,1,87,1,
		87,1,87,1,88,1,88,3,88,2003,8,88,1,88,1,88,1,88,3,88,2008,8,88,5,88,2010,
		8,88,10,88,12,88,2013,9,88,1,89,1,89,1,90,1,90,1,91,1,91,1,92,1,92,1,93,
		1,93,3,93,2025,8,93,1,94,1,94,1,95,1,95,1,96,1,96,1,97,1,97,1,98,1,98,
		1,99,1,99,1,100,1,100,1,101,1,101,1,102,1,102,1,103,1,103,1,104,1,104,
		1,105,1,105,1,106,1,106,1,107,1,107,1,108,1,108,1,109,1,109,1,110,1,110,
		1,111,1,111,1,112,1,112,1,113,1,113,1,114,1,114,1,115,1,115,1,116,1,116,
		1,117,1,117,1,118,1,118,1,119,1,119,1,119,1,119,1,119,1,119,1,119,3,119,
		2084,8,119,1,119,2,454,486,1,64,120,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
		74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
		116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
		152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,
		188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,
		224,226,228,230,232,234,236,238,0,27,3,0,58,58,69,69,82,82,2,0,47,47,66,
		66,1,0,133,134,2,0,146,146,171,171,1,0,8,9,2,0,59,59,141,141,2,0,56,56,
		104,104,2,0,58,58,82,82,5,0,25,25,72,72,81,81,122,122,126,126,4,0,84,84,
		132,132,138,138,145,145,2,0,7,7,12,13,1,0,14,17,1,0,18,21,4,0,77,77,97,
		97,99,99,118,118,3,0,25,25,72,72,126,126,5,0,52,54,104,104,172,173,186,
		186,188,189,2,0,29,29,62,62,3,0,128,128,154,154,179,179,1,0,176,177,2,
		0,34,34,60,60,2,0,151,151,162,162,2,0,159,159,166,166,2,0,160,160,167,
		168,2,0,161,161,163,163,2,0,8,10,102,102,2,0,185,185,188,188,2,0,25,123,
		125,180,2363,0,243,1,0,0,0,2,251,1,0,0,0,4,277,1,0,0,0,6,305,1,0,0,0,8,
		337,1,0,0,0,10,347,1,0,0,0,12,355,1,0,0,0,14,365,1,0,0,0,16,369,1,0,0,
		0,18,380,1,0,0,0,20,383,1,0,0,0,22,389,1,0,0,0,24,423,1,0,0,0,26,432,1,
		0,0,0,28,473,1,0,0,0,30,484,1,0,0,0,32,502,1,0,0,0,34,556,1,0,0,0,36,562,
		1,0,0,0,38,603,1,0,0,0,40,645,1,0,0,0,42,649,1,0,0,0,44,713,1,0,0,0,46,
		745,1,0,0,0,48,774,1,0,0,0,50,795,1,0,0,0,52,809,1,0,0,0,54,820,1,0,0,
		0,56,840,1,0,0,0,58,853,1,0,0,0,60,871,1,0,0,0,62,877,1,0,0,0,64,978,1,
		0,0,0,66,1102,1,0,0,0,68,1112,1,0,0,0,70,1114,1,0,0,0,72,1126,1,0,0,0,
		74,1163,1,0,0,0,76,1172,1,0,0,0,78,1219,1,0,0,0,80,1237,1,0,0,0,82,1239,
		1,0,0,0,84,1253,1,0,0,0,86,1275,1,0,0,0,88,1279,1,0,0,0,90,1282,1,0,0,
		0,92,1295,1,0,0,0,94,1298,1,0,0,0,96,1307,1,0,0,0,98,1318,1,0,0,0,100,
		1352,1,0,0,0,102,1379,1,0,0,0,104,1381,1,0,0,0,106,1384,1,0,0,0,108,1394,
		1,0,0,0,110,1480,1,0,0,0,112,1494,1,0,0,0,114,1509,1,0,0,0,116,1525,1,
		0,0,0,118,1533,1,0,0,0,120,1536,1,0,0,0,122,1585,1,0,0,0,124,1597,1,0,
		0,0,126,1641,1,0,0,0,128,1655,1,0,0,0,130,1663,1,0,0,0,132,1669,1,0,0,
		0,134,1700,1,0,0,0,136,1736,1,0,0,0,138,1746,1,0,0,0,140,1755,1,0,0,0,
		142,1770,1,0,0,0,144,1790,1,0,0,0,146,1812,1,0,0,0,148,1824,1,0,0,0,150,
		1834,1,0,0,0,152,1839,1,0,0,0,154,1842,1,0,0,0,156,1854,1,0,0,0,158,1866,
		1,0,0,0,160,1878,1,0,0,0,162,1887,1,0,0,0,164,1974,1,0,0,0,166,1976,1,
		0,0,0,168,1979,1,0,0,0,170,1982,1,0,0,0,172,1989,1,0,0,0,174,1996,1,0,
		0,0,176,2000,1,0,0,0,178,2014,1,0,0,0,180,2016,1,0,0,0,182,2018,1,0,0,
		0,184,2020,1,0,0,0,186,2024,1,0,0,0,188,2026,1,0,0,0,190,2028,1,0,0,0,
		192,2030,1,0,0,0,194,2032,1,0,0,0,196,2034,1,0,0,0,198,2036,1,0,0,0,200,
		2038,1,0,0,0,202,2040,1,0,0,0,204,2042,1,0,0,0,206,2044,1,0,0,0,208,2046,
		1,0,0,0,210,2048,1,0,0,0,212,2050,1,0,0,0,214,2052,1,0,0,0,216,2054,1,
		0,0,0,218,2056,1,0,0,0,220,2058,1,0,0,0,222,2060,1,0,0,0,224,2062,1,0,
		0,0,226,2064,1,0,0,0,228,2066,1,0,0,0,230,2068,1,0,0,0,232,2070,1,0,0,
		0,234,2072,1,0,0,0,236,2074,1,0,0,0,238,2083,1,0,0,0,240,242,3,2,1,0,241,
		240,1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,246,1,
		0,0,0,245,243,1,0,0,0,246,247,5,0,0,1,247,1,1,0,0,0,248,250,5,1,0,0,249,
		248,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,254,1,
		0,0,0,253,251,1,0,0,0,254,263,3,4,2,0,255,257,5,1,0,0,256,255,1,0,0,0,
		257,258,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,260,1,0,0,0,260,262,
		3,4,2,0,261,256,1,0,0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,
		0,264,269,1,0,0,0,265,263,1,0,0,0,266,268,5,1,0,0,267,266,1,0,0,0,268,
		271,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,3,1,0,0,0,271,269,1,0,
		0,0,272,275,5,71,0,0,273,274,5,114,0,0,274,276,5,111,0,0,275,273,1,0,0,
		0,275,276,1,0,0,0,276,278,1,0,0,0,277,272,1,0,0,0,277,278,1,0,0,0,278,
		303,1,0,0,0,279,304,3,6,3,0,280,304,3,8,4,0,281,304,3,10,5,0,282,304,3,
		12,6,0,283,304,3,14,7,0,284,304,3,22,11,0,285,304,3,26,13,0,286,304,3,
		42,21,0,287,304,3,44,22,0,288,304,3,46,23,0,289,304,3,56,28,0,290,304,
		3,58,29,0,291,304,3,60,30,0,292,304,3,62,31,0,293,304,3,72,36,0,294,304,
		3,78,39,0,295,304,3,82,41,0,296,304,3,20,10,0,297,304,3,16,8,0,298,304,
		3,18,9,0,299,304,3,84,42,0,300,304,3,120,60,0,301,304,3,124,62,0,302,304,
		3,128,64,0,303,279,1,0,0,0,303,280,1,0,0,0,303,281,1,0,0,0,303,282,1,0,
		0,0,303,283,1,0,0,0,303,284,1,0,0,0,303,285,1,0,0,0,303,286,1,0,0,0,303,
		287,1,0,0,0,303,288,1,0,0,0,303,289,1,0,0,0,303,290,1,0,0,0,303,291,1,
		0,0,0,303,292,1,0,0,0,303,293,1,0,0,0,303,294,1,0,0,0,303,295,1,0,0,0,
		303,296,1,0,0,0,303,297,1,0,0,0,303,298,1,0,0,0,303,299,1,0,0,0,303,300,
		1,0,0,0,303,301,1,0,0,0,303,302,1,0,0,0,304,5,1,0,0,0,305,306,5,30,0,0,
		306,310,5,132,0,0,307,308,3,196,98,0,308,309,5,2,0,0,309,311,1,0,0,0,310,
		307,1,0,0,0,310,311,1,0,0,0,311,312,1,0,0,0,312,335,3,198,99,0,313,323,
		5,121,0,0,314,315,5,136,0,0,315,324,3,198,99,0,316,318,5,46,0,0,317,316,
		1,0,0,0,317,318,1,0,0,0,318,319,1,0,0,0,319,320,3,202,101,0,320,321,5,
		136,0,0,321,322,3,202,101,0,322,324,1,0,0,0,323,314,1,0,0,0,323,317,1,
		0,0,0,324,336,1,0,0,0,325,327,5,27,0,0,326,328,5,46,0,0,327,326,1,0,0,
		0,327,328,1,0,0,0,328,329,1,0,0,0,329,336,3,28,14,0,330,332,5,63,0,0,331,
		333,5,46,0,0,332,331,1,0,0,0,332,333,1,0,0,0,333,334,1,0,0,0,334,336,3,
		202,101,0,335,313,1,0,0,0,335,325,1,0,0,0,335,330,1,0,0,0,336,7,1,0,0,
		0,337,345,5,31,0,0,338,346,3,196,98,0,339,340,3,196,98,0,340,341,5,2,0,
		0,341,343,1,0,0,0,342,339,1,0,0,0,342,343,1,0,0,0,343,344,1,0,0,0,344,
		346,3,200,100,0,345,338,1,0,0,0,345,342,1,0,0,0,345,346,1,0,0,0,346,9,
		1,0,0,0,347,349,5,35,0,0,348,350,5,55,0,0,349,348,1,0,0,0,349,350,1,0,
		0,0,350,351,1,0,0,0,351,352,3,64,32,0,352,353,5,33,0,0,353,354,3,196,98,
		0,354,11,1,0,0,0,355,357,5,38,0,0,356,358,7,0,0,0,357,356,1,0,0,0,357,
		358,1,0,0,0,358,363,1,0,0,0,359,361,5,137,0,0,360,362,3,222,111,0,361,
		360,1,0,0,0,361,362,1,0,0,0,362,364,1,0,0,0,363,359,1,0,0,0,363,364,1,
		0,0,0,364,13,1,0,0,0,365,367,7,1,0,0,366,368,5,137,0,0,367,366,1,0,0,0,
		367,368,1,0,0,0,368,15,1,0,0,0,369,371,5,126,0,0,370,372,5,137,0,0,371,
		370,1,0,0,0,371,372,1,0,0,0,372,378,1,0,0,0,373,375,5,136,0,0,374,376,
		5,129,0,0,375,374,1,0,0,0,375,376,1,0,0,0,376,377,1,0,0,0,377,379,3,218,
		109,0,378,373,1,0,0,0,378,379,1,0,0,0,379,17,1,0,0,0,380,381,5,129,0,0,
		381,382,3,218,109,0,382,19,1,0,0,0,383,385,5,120,0,0,384,386,5,129,0,0,
		385,384,1,0,0,0,385,386,1,0,0,0,386,387,1,0,0,0,387,388,3,218,109,0,388,
		21,1,0,0,0,389,391,5,50,0,0,390,392,5,140,0,0,391,390,1,0,0,0,391,392,
		1,0,0,0,392,393,1,0,0,0,393,397,5,84,0,0,394,395,5,80,0,0,395,396,5,102,
		0,0,396,398,5,70,0,0,397,394,1,0,0,0,397,398,1,0,0,0,398,402,1,0,0,0,399,
		400,3,196,98,0,400,401,5,2,0,0,401,403,1,0,0,0,402,399,1,0,0,0,402,403,
		1,0,0,0,403,404,1,0,0,0,404,405,3,208,104,0,405,406,5,107,0,0,406,407,
		3,198,99,0,407,408,5,3,0,0,408,413,3,24,12,0,409,410,5,5,0,0,410,412,3,
		24,12,0,411,409,1,0,0,0,412,415,1,0,0,0,413,411,1,0,0,0,413,414,1,0,0,
		0,414,416,1,0,0,0,415,413,1,0,0,0,416,419,5,4,0,0,417,418,5,148,0,0,418,
		420,3,64,32,0,419,417,1,0,0,0,419,420,1,0,0,0,420,23,1,0,0,0,421,424,3,
		202,101,0,422,424,3,64,32,0,423,421,1,0,0,0,423,422,1,0,0,0,424,427,1,
		0,0,0,425,426,5,45,0,0,426,428,3,204,102,0,427,425,1,0,0,0,427,428,1,0,
		0,0,428,430,1,0,0,0,429,431,3,156,78,0,430,429,1,0,0,0,430,431,1,0,0,0,
		431,25,1,0,0,0,432,434,5,50,0,0,433,435,7,2,0,0,434,433,1,0,0,0,434,435,
		1,0,0,0,435,436,1,0,0,0,436,440,5,132,0,0,437,438,5,80,0,0,438,439,5,102,
		0,0,439,441,5,70,0,0,440,437,1,0,0,0,440,441,1,0,0,0,441,445,1,0,0,0,442,
		443,3,196,98,0,443,444,5,2,0,0,444,446,1,0,0,0,445,442,1,0,0,0,445,446,
		1,0,0,0,446,447,1,0,0,0,447,471,3,198,99,0,448,449,5,3,0,0,449,454,3,28,
		14,0,450,451,5,5,0,0,451,453,3,28,14,0,452,450,1,0,0,0,453,456,1,0,0,0,
		454,455,1,0,0,0,454,452,1,0,0,0,455,461,1,0,0,0,456,454,1,0,0,0,457,458,
		5,5,0,0,458,460,3,36,18,0,459,457,1,0,0,0,460,463,1,0,0,0,461,459,1,0,
		0,0,461,462,1,0,0,0,462,464,1,0,0,0,463,461,1,0,0,0,464,467,5,4,0,0,465,
		466,5,150,0,0,466,468,5,185,0,0,467,465,1,0,0,0,467,468,1,0,0,0,468,472,
		1,0,0,0,469,470,5,33,0,0,470,472,3,84,42,0,471,448,1,0,0,0,471,469,1,0,
		0,0,472,27,1,0,0,0,473,475,3,202,101,0,474,476,3,30,15,0,475,474,1,0,0,
		0,475,476,1,0,0,0,476,480,1,0,0,0,477,479,3,32,16,0,478,477,1,0,0,0,479,
		482,1,0,0,0,480,478,1,0,0,0,480,481,1,0,0,0,481,29,1,0,0,0,482,480,1,0,
		0,0,483,485,3,192,96,0,484,483,1,0,0,0,485,486,1,0,0,0,486,487,1,0,0,0,
		486,484,1,0,0,0,487,498,1,0,0,0,488,489,5,3,0,0,489,490,3,34,17,0,490,
		491,5,4,0,0,491,499,1,0,0,0,492,493,5,3,0,0,493,494,3,34,17,0,494,495,
		5,5,0,0,495,496,3,34,17,0,496,497,5,4,0,0,497,499,1,0,0,0,498,488,1,0,
		0,0,498,492,1,0,0,0,498,499,1,0,0,0,499,31,1,0,0,0,500,501,5,49,0,0,501,
		503,3,192,96,0,502,500,1,0,0,0,502,503,1,0,0,0,503,553,1,0,0,0,504,505,
		5,113,0,0,505,507,5,95,0,0,506,508,3,156,78,0,507,506,1,0,0,0,507,508,
		1,0,0,0,508,510,1,0,0,0,509,511,3,40,20,0,510,509,1,0,0,0,510,511,1,0,
		0,0,511,513,1,0,0,0,512,514,5,36,0,0,513,512,1,0,0,0,513,514,1,0,0,0,514,
		554,1,0,0,0,515,517,5,102,0,0,516,515,1,0,0,0,516,517,1,0,0,0,517,518,
		1,0,0,0,518,521,5,104,0,0,519,521,5,140,0,0,520,516,1,0,0,0,520,519,1,
		0,0,0,521,523,1,0,0,0,522,524,3,40,20,0,523,522,1,0,0,0,523,524,1,0,0,
		0,524,554,1,0,0,0,525,526,5,44,0,0,526,527,5,3,0,0,527,528,3,64,32,0,528,
		529,5,4,0,0,529,554,1,0,0,0,530,537,5,56,0,0,531,538,3,34,17,0,532,538,
		3,68,34,0,533,534,5,3,0,0,534,535,3,64,32,0,535,536,5,4,0,0,536,538,1,
		0,0,0,537,531,1,0,0,0,537,532,1,0,0,0,537,533,1,0,0,0,538,554,1,0,0,0,
		539,540,5,45,0,0,540,554,3,204,102,0,541,554,3,38,19,0,542,543,5,169,0,
		0,543,545,5,170,0,0,544,542,1,0,0,0,544,545,1,0,0,0,545,546,1,0,0,0,546,
		547,5,33,0,0,547,548,5,3,0,0,548,549,3,64,32,0,549,551,5,4,0,0,550,552,
		7,3,0,0,551,550,1,0,0,0,551,552,1,0,0,0,552,554,1,0,0,0,553,504,1,0,0,
		0,553,520,1,0,0,0,553,525,1,0,0,0,553,530,1,0,0,0,553,539,1,0,0,0,553,
		541,1,0,0,0,553,544,1,0,0,0,554,33,1,0,0,0,555,557,7,4,0,0,556,555,1,0,
		0,0,556,557,1,0,0,0,557,558,1,0,0,0,558,559,5,186,0,0,559,35,1,0,0,0,560,
		561,5,49,0,0,561,563,3,192,96,0,562,560,1,0,0,0,562,563,1,0,0,0,563,601,
		1,0,0,0,564,565,5,113,0,0,565,568,5,95,0,0,566,568,5,140,0,0,567,564,1,
		0,0,0,567,566,1,0,0,0,568,569,1,0,0,0,569,570,5,3,0,0,570,575,3,24,12,
		0,571,572,5,5,0,0,572,574,3,24,12,0,573,571,1,0,0,0,574,577,1,0,0,0,575,
		573,1,0,0,0,575,576,1,0,0,0,576,578,1,0,0,0,577,575,1,0,0,0,578,580,5,
		4,0,0,579,581,3,40,20,0,580,579,1,0,0,0,580,581,1,0,0,0,581,602,1,0,0,
		0,582,583,5,44,0,0,583,584,5,3,0,0,584,585,3,64,32,0,585,586,5,4,0,0,586,
		602,1,0,0,0,587,588,5,74,0,0,588,589,5,95,0,0,589,590,5,3,0,0,590,595,
		3,202,101,0,591,592,5,5,0,0,592,594,3,202,101,0,593,591,1,0,0,0,594,597,
		1,0,0,0,595,593,1,0,0,0,595,596,1,0,0,0,596,598,1,0,0,0,597,595,1,0,0,
		0,598,599,5,4,0,0,599,600,3,38,19,0,600,602,1,0,0,0,601,567,1,0,0,0,601,
		582,1,0,0,0,601,587,1,0,0,0,602,37,1,0,0,0,603,604,5,117,0,0,604,616,3,
		206,103,0,605,606,5,3,0,0,606,611,3,202,101,0,607,608,5,5,0,0,608,610,
		3,202,101,0,609,607,1,0,0,0,610,613,1,0,0,0,611,609,1,0,0,0,611,612,1,
		0,0,0,612,614,1,0,0,0,613,611,1,0,0,0,614,615,5,4,0,0,615,617,1,0,0,0,
		616,605,1,0,0,0,616,617,1,0,0,0,617,632,1,0,0,0,618,619,5,107,0,0,619,
		626,7,5,0,0,620,621,5,131,0,0,621,627,7,6,0,0,622,627,5,41,0,0,623,627,
		5,123,0,0,624,625,5,101,0,0,625,627,5,26,0,0,626,620,1,0,0,0,626,622,1,
		0,0,0,626,623,1,0,0,0,626,624,1,0,0,0,627,631,1,0,0,0,628,629,5,99,0,0,
		629,631,3,192,96,0,630,618,1,0,0,0,630,628,1,0,0,0,631,634,1,0,0,0,632,
		630,1,0,0,0,632,633,1,0,0,0,633,643,1,0,0,0,634,632,1,0,0,0,635,637,5,
		102,0,0,636,635,1,0,0,0,636,637,1,0,0,0,637,638,1,0,0,0,638,641,5,57,0,
		0,639,640,5,86,0,0,640,642,7,7,0,0,641,639,1,0,0,0,641,642,1,0,0,0,642,
		644,1,0,0,0,643,636,1,0,0,0,643,644,1,0,0,0,644,39,1,0,0,0,645,646,5,107,
		0,0,646,647,5,48,0,0,647,648,7,8,0,0,648,41,1,0,0,0,649,651,5,50,0,0,650,
		652,7,2,0,0,651,650,1,0,0,0,651,652,1,0,0,0,652,653,1,0,0,0,653,657,5,
		138,0,0,654,655,5,80,0,0,655,656,5,102,0,0,656,658,5,70,0,0,657,654,1,
		0,0,0,657,658,1,0,0,0,658,662,1,0,0,0,659,660,3,196,98,0,660,661,5,2,0,
		0,661,663,1,0,0,0,662,659,1,0,0,0,662,663,1,0,0,0,663,664,1,0,0,0,664,
		669,3,210,105,0,665,670,5,37,0,0,666,670,5,28,0,0,667,668,5,89,0,0,668,
		670,5,105,0,0,669,665,1,0,0,0,669,666,1,0,0,0,669,667,1,0,0,0,669,670,
		1,0,0,0,670,685,1,0,0,0,671,686,5,59,0,0,672,686,5,88,0,0,673,683,5,141,
		0,0,674,675,5,105,0,0,675,680,3,202,101,0,676,677,5,5,0,0,677,679,3,202,
		101,0,678,676,1,0,0,0,679,682,1,0,0,0,680,678,1,0,0,0,680,681,1,0,0,0,
		681,684,1,0,0,0,682,680,1,0,0,0,683,674,1,0,0,0,683,684,1,0,0,0,684,686,
		1,0,0,0,685,671,1,0,0,0,685,672,1,0,0,0,685,673,1,0,0,0,686,687,1,0,0,
		0,687,688,5,107,0,0,688,692,3,198,99,0,689,690,5,73,0,0,690,691,5,64,0,
		0,691,693,5,127,0,0,692,689,1,0,0,0,692,693,1,0,0,0,693,696,1,0,0,0,694,
		695,5,147,0,0,695,697,3,64,32,0,696,694,1,0,0,0,696,697,1,0,0,0,697,698,
		1,0,0,0,698,707,5,38,0,0,699,704,3,120,60,0,700,704,3,72,36,0,701,704,
		3,56,28,0,702,704,3,84,42,0,703,699,1,0,0,0,703,700,1,0,0,0,703,701,1,
		0,0,0,703,702,1,0,0,0,704,705,1,0,0,0,705,706,5,1,0,0,706,708,1,0,0,0,
		707,703,1,0,0,0,708,709,1,0,0,0,709,707,1,0,0,0,709,710,1,0,0,0,710,711,
		1,0,0,0,711,712,5,66,0,0,712,43,1,0,0,0,713,715,5,50,0,0,714,716,7,2,0,
		0,715,714,1,0,0,0,715,716,1,0,0,0,716,717,1,0,0,0,717,721,5,145,0,0,718,
		719,5,80,0,0,719,720,5,102,0,0,720,722,5,70,0,0,721,718,1,0,0,0,721,722,
		1,0,0,0,722,726,1,0,0,0,723,724,3,196,98,0,724,725,5,2,0,0,725,727,1,0,
		0,0,726,723,1,0,0,0,726,727,1,0,0,0,727,728,1,0,0,0,728,740,3,212,106,
		0,729,730,5,3,0,0,730,735,3,202,101,0,731,732,5,5,0,0,732,734,3,202,101,
		0,733,731,1,0,0,0,734,737,1,0,0,0,735,733,1,0,0,0,735,736,1,0,0,0,736,
		738,1,0,0,0,737,735,1,0,0,0,738,739,5,4,0,0,739,741,1,0,0,0,740,729,1,
		0,0,0,740,741,1,0,0,0,741,742,1,0,0,0,742,743,5,33,0,0,743,744,3,84,42,
		0,744,45,1,0,0,0,745,746,5,50,0,0,746,747,5,146,0,0,747,751,5,132,0,0,
		748,749,5,80,0,0,749,750,5,102,0,0,750,752,5,70,0,0,751,748,1,0,0,0,751,
		752,1,0,0,0,752,756,1,0,0,0,753,754,3,196,98,0,754,755,5,2,0,0,755,757,
		1,0,0,0,756,753,1,0,0,0,756,757,1,0,0,0,757,758,1,0,0,0,758,759,3,198,
		99,0,759,760,5,142,0,0,760,772,3,214,107,0,761,762,5,3,0,0,762,767,3,186,
		93,0,763,764,5,5,0,0,764,766,3,186,93,0,765,763,1,0,0,0,766,769,1,0,0,
		0,767,765,1,0,0,0,767,768,1,0,0,0,768,770,1,0,0,0,769,767,1,0,0,0,770,
		771,5,4,0,0,771,773,1,0,0,0,772,761,1,0,0,0,772,773,1,0,0,0,773,47,1,0,
		0,0,774,776,5,149,0,0,775,777,5,116,0,0,776,775,1,0,0,0,776,777,1,0,0,
		0,777,778,1,0,0,0,778,779,3,50,25,0,779,780,5,33,0,0,780,781,5,3,0,0,781,
		782,3,84,42,0,782,792,5,4,0,0,783,784,5,5,0,0,784,785,3,50,25,0,785,786,
		5,33,0,0,786,787,5,3,0,0,787,788,3,84,42,0,788,789,5,4,0,0,789,791,1,0,
		0,0,790,783,1,0,0,0,791,794,1,0,0,0,792,790,1,0,0,0,792,793,1,0,0,0,793,
		49,1,0,0,0,794,792,1,0,0,0,795,807,3,198,99,0,796,797,5,3,0,0,797,802,
		3,202,101,0,798,799,5,5,0,0,799,801,3,202,101,0,800,798,1,0,0,0,801,804,
		1,0,0,0,802,800,1,0,0,0,802,803,1,0,0,0,803,805,1,0,0,0,804,802,1,0,0,
		0,805,806,5,4,0,0,806,808,1,0,0,0,807,796,1,0,0,0,807,808,1,0,0,0,808,
		51,1,0,0,0,809,810,3,50,25,0,810,811,5,33,0,0,811,812,5,3,0,0,812,813,
		3,178,89,0,813,815,5,139,0,0,814,816,5,29,0,0,815,814,1,0,0,0,815,816,
		1,0,0,0,816,817,1,0,0,0,817,818,3,180,90,0,818,819,5,4,0,0,819,53,1,0,
		0,0,820,832,3,198,99,0,821,822,5,3,0,0,822,827,3,202,101,0,823,824,5,5,
		0,0,824,826,3,202,101,0,825,823,1,0,0,0,826,829,1,0,0,0,827,825,1,0,0,
		0,827,828,1,0,0,0,828,830,1,0,0,0,829,827,1,0,0,0,830,831,5,4,0,0,831,
		833,1,0,0,0,832,821,1,0,0,0,832,833,1,0,0,0,833,834,1,0,0,0,834,835,5,
		33,0,0,835,836,5,3,0,0,836,837,3,84,42,0,837,838,5,4,0,0,838,55,1,0,0,
		0,839,841,3,48,24,0,840,839,1,0,0,0,840,841,1,0,0,0,841,842,1,0,0,0,842,
		843,5,59,0,0,843,844,5,75,0,0,844,847,3,126,63,0,845,846,5,148,0,0,846,
		848,3,64,32,0,847,845,1,0,0,0,847,848,1,0,0,0,848,850,1,0,0,0,849,851,
		3,74,37,0,850,849,1,0,0,0,850,851,1,0,0,0,851,57,1,0,0,0,852,854,3,48,
		24,0,853,852,1,0,0,0,853,854,1,0,0,0,854,855,1,0,0,0,855,856,5,59,0,0,
		856,857,5,75,0,0,857,860,3,126,63,0,858,859,5,148,0,0,859,861,3,64,32,
		0,860,858,1,0,0,0,860,861,1,0,0,0,861,863,1,0,0,0,862,864,3,74,37,0,863,
		862,1,0,0,0,863,864,1,0,0,0,864,869,1,0,0,0,865,867,3,148,74,0,866,865,
		1,0,0,0,866,867,1,0,0,0,867,868,1,0,0,0,868,870,3,150,75,0,869,866,1,0,
		0,0,869,870,1,0,0,0,870,59,1,0,0,0,871,873,5,61,0,0,872,874,5,55,0,0,873,
		872,1,0,0,0,873,874,1,0,0,0,874,875,1,0,0,0,875,876,3,196,98,0,876,61,
		1,0,0,0,877,878,5,63,0,0,878,881,7,9,0,0,879,880,5,80,0,0,880,882,5,70,
		0,0,881,879,1,0,0,0,881,882,1,0,0,0,882,886,1,0,0,0,883,884,3,196,98,0,
		884,885,5,2,0,0,885,887,1,0,0,0,886,883,1,0,0,0,886,887,1,0,0,0,887,888,
		1,0,0,0,888,889,3,238,119,0,889,63,1,0,0,0,890,891,6,32,-1,0,891,979,3,
		68,34,0,892,979,5,187,0,0,893,894,3,196,98,0,894,895,5,2,0,0,895,897,1,
		0,0,0,896,893,1,0,0,0,896,897,1,0,0,0,897,898,1,0,0,0,898,899,3,198,99,
		0,899,900,5,2,0,0,900,902,1,0,0,0,901,896,1,0,0,0,901,902,1,0,0,0,902,
		903,1,0,0,0,903,979,3,202,101,0,904,905,3,182,91,0,905,906,3,64,32,21,
		906,979,1,0,0,0,907,908,3,194,97,0,908,921,5,3,0,0,909,911,5,62,0,0,910,
		909,1,0,0,0,910,911,1,0,0,0,911,912,1,0,0,0,912,917,3,64,32,0,913,914,
		5,5,0,0,914,916,3,64,32,0,915,913,1,0,0,0,916,919,1,0,0,0,917,915,1,0,
		0,0,917,918,1,0,0,0,918,922,1,0,0,0,919,917,1,0,0,0,920,922,5,7,0,0,921,
		910,1,0,0,0,921,920,1,0,0,0,921,922,1,0,0,0,922,923,1,0,0,0,923,925,5,
		4,0,0,924,926,3,130,65,0,925,924,1,0,0,0,925,926,1,0,0,0,926,928,1,0,0,
		0,927,929,3,134,67,0,928,927,1,0,0,0,928,929,1,0,0,0,929,979,1,0,0,0,930,
		931,5,3,0,0,931,936,3,64,32,0,932,933,5,5,0,0,933,935,3,64,32,0,934,932,
		1,0,0,0,935,938,1,0,0,0,936,934,1,0,0,0,936,937,1,0,0,0,937,939,1,0,0,
		0,938,936,1,0,0,0,939,940,5,4,0,0,940,979,1,0,0,0,941,942,5,43,0,0,942,
		943,5,3,0,0,943,944,3,64,32,0,944,945,5,33,0,0,945,946,3,30,15,0,946,947,
		5,4,0,0,947,979,1,0,0,0,948,950,5,102,0,0,949,948,1,0,0,0,949,950,1,0,
		0,0,950,951,1,0,0,0,951,953,5,70,0,0,952,949,1,0,0,0,952,953,1,0,0,0,953,
		954,1,0,0,0,954,955,5,3,0,0,955,956,3,84,42,0,956,957,5,4,0,0,957,979,
		1,0,0,0,958,960,5,42,0,0,959,961,3,64,32,0,960,959,1,0,0,0,960,961,1,0,
		0,0,961,967,1,0,0,0,962,963,5,147,0,0,963,964,3,64,32,0,964,965,5,135,
		0,0,965,966,3,64,32,0,966,968,1,0,0,0,967,962,1,0,0,0,968,969,1,0,0,0,
		969,967,1,0,0,0,969,970,1,0,0,0,970,973,1,0,0,0,971,972,5,65,0,0,972,974,
		3,64,32,0,973,971,1,0,0,0,973,974,1,0,0,0,974,975,1,0,0,0,975,976,5,66,
		0,0,976,979,1,0,0,0,977,979,3,66,33,0,978,890,1,0,0,0,978,892,1,0,0,0,
		978,901,1,0,0,0,978,904,1,0,0,0,978,907,1,0,0,0,978,930,1,0,0,0,978,941,
		1,0,0,0,978,952,1,0,0,0,978,958,1,0,0,0,978,977,1,0,0,0,979,1099,1,0,0,
		0,980,981,10,20,0,0,981,982,5,11,0,0,982,1098,3,64,32,21,983,984,10,19,
		0,0,984,985,7,10,0,0,985,1098,3,64,32,20,986,987,10,18,0,0,987,988,7,4,
		0,0,988,1098,3,64,32,19,989,990,10,17,0,0,990,991,7,11,0,0,991,1098,3,
		64,32,18,992,993,10,16,0,0,993,994,7,12,0,0,994,1098,3,64,32,17,995,1008,
		10,15,0,0,996,1009,5,6,0,0,997,1009,5,22,0,0,998,1009,5,23,0,0,999,1009,
		5,24,0,0,1000,1009,5,92,0,0,1001,1002,5,92,0,0,1002,1009,5,102,0,0,1003,
		1009,5,83,0,0,1004,1009,5,97,0,0,1005,1009,5,77,0,0,1006,1009,5,99,0,0,
		1007,1009,5,118,0,0,1008,996,1,0,0,0,1008,997,1,0,0,0,1008,998,1,0,0,0,
		1008,999,1,0,0,0,1008,1000,1,0,0,0,1008,1001,1,0,0,0,1008,1003,1,0,0,0,
		1008,1004,1,0,0,0,1008,1005,1,0,0,0,1008,1006,1,0,0,0,1008,1007,1,0,0,
		0,1009,1010,1,0,0,0,1010,1098,3,64,32,16,1011,1012,10,14,0,0,1012,1013,
		5,32,0,0,1013,1098,3,64,32,15,1014,1015,10,13,0,0,1015,1016,5,108,0,0,
		1016,1098,3,64,32,14,1017,1018,10,6,0,0,1018,1020,5,92,0,0,1019,1021,5,
		102,0,0,1020,1019,1,0,0,0,1020,1021,1,0,0,0,1021,1022,1,0,0,0,1022,1098,
		3,64,32,7,1023,1025,10,5,0,0,1024,1026,5,102,0,0,1025,1024,1,0,0,0,1025,
		1026,1,0,0,0,1026,1027,1,0,0,0,1027,1028,5,39,0,0,1028,1029,3,64,32,0,
		1029,1030,5,32,0,0,1030,1031,3,64,32,6,1031,1098,1,0,0,0,1032,1033,10,
		9,0,0,1033,1034,5,45,0,0,1034,1098,3,204,102,0,1035,1037,10,8,0,0,1036,
		1038,5,102,0,0,1037,1036,1,0,0,0,1037,1038,1,0,0,0,1038,1039,1,0,0,0,1039,
		1040,7,13,0,0,1040,1043,3,64,32,0,1041,1042,5,67,0,0,1042,1044,3,64,32,
		0,1043,1041,1,0,0,0,1043,1044,1,0,0,0,1044,1098,1,0,0,0,1045,1050,10,7,
		0,0,1046,1051,5,93,0,0,1047,1051,5,103,0,0,1048,1049,5,102,0,0,1049,1051,
		5,104,0,0,1050,1046,1,0,0,0,1050,1047,1,0,0,0,1050,1048,1,0,0,0,1051,1098,
		1,0,0,0,1052,1054,10,4,0,0,1053,1055,5,102,0,0,1054,1053,1,0,0,0,1054,
		1055,1,0,0,0,1055,1056,1,0,0,0,1056,1095,5,83,0,0,1057,1067,5,3,0,0,1058,
		1068,3,84,42,0,1059,1064,3,64,32,0,1060,1061,5,5,0,0,1061,1063,3,64,32,
		0,1062,1060,1,0,0,0,1063,1066,1,0,0,0,1064,1062,1,0,0,0,1064,1065,1,0,
		0,0,1065,1068,1,0,0,0,1066,1064,1,0,0,0,1067,1058,1,0,0,0,1067,1059,1,
		0,0,0,1067,1068,1,0,0,0,1068,1069,1,0,0,0,1069,1096,5,4,0,0,1070,1071,
		3,196,98,0,1071,1072,5,2,0,0,1072,1074,1,0,0,0,1073,1070,1,0,0,0,1073,
		1074,1,0,0,0,1074,1075,1,0,0,0,1075,1096,3,198,99,0,1076,1077,3,196,98,
		0,1077,1078,5,2,0,0,1078,1080,1,0,0,0,1079,1076,1,0,0,0,1079,1080,1,0,
		0,0,1080,1081,1,0,0,0,1081,1082,3,236,118,0,1082,1091,5,3,0,0,1083,1088,
		3,64,32,0,1084,1085,5,5,0,0,1085,1087,3,64,32,0,1086,1084,1,0,0,0,1087,
		1090,1,0,0,0,1088,1086,1,0,0,0,1088,1089,1,0,0,0,1089,1092,1,0,0,0,1090,
		1088,1,0,0,0,1091,1083,1,0,0,0,1091,1092,1,0,0,0,1092,1093,1,0,0,0,1093,
		1094,5,4,0,0,1094,1096,1,0,0,0,1095,1057,1,0,0,0,1095,1073,1,0,0,0,1095,
		1079,1,0,0,0,1096,1098,1,0,0,0,1097,980,1,0,0,0,1097,983,1,0,0,0,1097,
		986,1,0,0,0,1097,989,1,0,0,0,1097,992,1,0,0,0,1097,995,1,0,0,0,1097,1011,
		1,0,0,0,1097,1014,1,0,0,0,1097,1017,1,0,0,0,1097,1023,1,0,0,0,1097,1032,
		1,0,0,0,1097,1035,1,0,0,0,1097,1045,1,0,0,0,1097,1052,1,0,0,0,1098,1101,
		1,0,0,0,1099,1097,1,0,0,0,1099,1100,1,0,0,0,1100,65,1,0,0,0,1101,1099,
		1,0,0,0,1102,1103,5,115,0,0,1103,1108,5,3,0,0,1104,1109,5,81,0,0,1105,
		1106,7,14,0,0,1106,1107,5,5,0,0,1107,1109,3,184,92,0,1108,1104,1,0,0,0,
		1108,1105,1,0,0,0,1109,1110,1,0,0,0,1110,1111,5,4,0,0,1111,67,1,0,0,0,
		1112,1113,7,15,0,0,1113,69,1,0,0,0,1114,1115,5,3,0,0,1115,1120,3,202,101,
		0,1116,1117,5,5,0,0,1117,1119,3,202,101,0,1118,1116,1,0,0,0,1119,1122,
		1,0,0,0,1120,1118,1,0,0,0,1120,1121,1,0,0,0,1121,1123,1,0,0,0,1122,1120,
		1,0,0,0,1123,1124,5,4,0,0,1124,71,1,0,0,0,1125,1127,3,48,24,0,1126,1125,
		1,0,0,0,1126,1127,1,0,0,0,1127,1133,1,0,0,0,1128,1134,5,88,0,0,1129,1134,
		5,122,0,0,1130,1131,5,88,0,0,1131,1132,5,108,0,0,1132,1134,7,8,0,0,1133,
		1128,1,0,0,0,1133,1129,1,0,0,0,1133,1130,1,0,0,0,1134,1135,1,0,0,0,1135,
		1139,5,91,0,0,1136,1137,3,196,98,0,1137,1138,5,2,0,0,1138,1140,1,0,0,0,
		1139,1136,1,0,0,0,1139,1140,1,0,0,0,1140,1141,1,0,0,0,1141,1144,3,198,
		99,0,1142,1143,5,33,0,0,1143,1145,3,220,110,0,1144,1142,1,0,0,0,1144,1145,
		1,0,0,0,1145,1147,1,0,0,0,1146,1148,3,70,35,0,1147,1146,1,0,0,0,1147,1148,
		1,0,0,0,1148,1158,1,0,0,0,1149,1152,3,94,47,0,1150,1152,3,84,42,0,1151,
		1149,1,0,0,0,1151,1150,1,0,0,0,1152,1154,1,0,0,0,1153,1155,3,76,38,0,1154,
		1153,1,0,0,0,1154,1155,1,0,0,0,1155,1159,1,0,0,0,1156,1157,5,56,0,0,1157,
		1159,5,144,0,0,1158,1151,1,0,0,0,1158,1156,1,0,0,0,1159,1161,1,0,0,0,1160,
		1162,3,74,37,0,1161,1160,1,0,0,0,1161,1162,1,0,0,0,1162,73,1,0,0,0,1163,
		1164,5,124,0,0,1164,1169,3,112,56,0,1165,1166,5,5,0,0,1166,1168,3,112,
		56,0,1167,1165,1,0,0,0,1168,1171,1,0,0,0,1169,1167,1,0,0,0,1169,1170,1,
		0,0,0,1170,75,1,0,0,0,1171,1169,1,0,0,0,1172,1173,5,107,0,0,1173,1188,
		5,48,0,0,1174,1175,5,3,0,0,1175,1180,3,24,12,0,1176,1177,5,5,0,0,1177,
		1179,3,24,12,0,1178,1176,1,0,0,0,1179,1182,1,0,0,0,1180,1178,1,0,0,0,1180,
		1181,1,0,0,0,1181,1183,1,0,0,0,1182,1180,1,0,0,0,1183,1186,5,4,0,0,1184,
		1185,5,148,0,0,1185,1187,3,64,32,0,1186,1184,1,0,0,0,1186,1187,1,0,0,0,
		1187,1189,1,0,0,0,1188,1174,1,0,0,0,1188,1189,1,0,0,0,1189,1190,1,0,0,
		0,1190,1217,5,183,0,0,1191,1218,5,184,0,0,1192,1193,5,141,0,0,1193,1196,
		5,131,0,0,1194,1197,3,202,101,0,1195,1197,3,122,61,0,1196,1194,1,0,0,0,
		1196,1195,1,0,0,0,1197,1198,1,0,0,0,1198,1199,5,6,0,0,1199,1210,3,64,32,
		0,1200,1203,5,5,0,0,1201,1204,3,202,101,0,1202,1204,3,122,61,0,1203,1201,
		1,0,0,0,1203,1202,1,0,0,0,1204,1205,1,0,0,0,1205,1206,5,6,0,0,1206,1207,
		3,64,32,0,1207,1209,1,0,0,0,1208,1200,1,0,0,0,1209,1212,1,0,0,0,1210,1208,
		1,0,0,0,1210,1211,1,0,0,0,1211,1215,1,0,0,0,1212,1210,1,0,0,0,1213,1214,
		5,148,0,0,1214,1216,3,64,32,0,1215,1213,1,0,0,0,1215,1216,1,0,0,0,1216,
		1218,1,0,0,0,1217,1191,1,0,0,0,1217,1192,1,0,0,0,1218,77,1,0,0,0,1219,
		1223,5,112,0,0,1220,1221,3,196,98,0,1221,1222,5,2,0,0,1222,1224,1,0,0,
		0,1223,1220,1,0,0,0,1223,1224,1,0,0,0,1224,1225,1,0,0,0,1225,1232,3,216,
		108,0,1226,1227,5,6,0,0,1227,1233,3,80,40,0,1228,1229,5,3,0,0,1229,1230,
		3,80,40,0,1230,1231,5,4,0,0,1231,1233,1,0,0,0,1232,1226,1,0,0,0,1232,1228,
		1,0,0,0,1232,1233,1,0,0,0,1233,79,1,0,0,0,1234,1238,3,34,17,0,1235,1238,
		3,192,96,0,1236,1238,5,188,0,0,1237,1234,1,0,0,0,1237,1235,1,0,0,0,1237,
		1236,1,0,0,0,1238,81,1,0,0,0,1239,1250,5,119,0,0,1240,1251,3,204,102,0,
		1241,1242,3,196,98,0,1242,1243,5,2,0,0,1243,1245,1,0,0,0,1244,1241,1,0,
		0,0,1244,1245,1,0,0,0,1245,1248,1,0,0,0,1246,1249,3,198,99,0,1247,1249,
		3,208,104,0,1248,1246,1,0,0,0,1248,1247,1,0,0,0,1249,1251,1,0,0,0,1250,
		1240,1,0,0,0,1250,1244,1,0,0,0,1250,1251,1,0,0,0,1251,83,1,0,0,0,1252,
		1254,3,146,73,0,1253,1252,1,0,0,0,1253,1254,1,0,0,0,1254,1255,1,0,0,0,
		1255,1261,3,102,51,0,1256,1257,3,118,59,0,1257,1258,3,102,51,0,1258,1260,
		1,0,0,0,1259,1256,1,0,0,0,1260,1263,1,0,0,0,1261,1259,1,0,0,0,1261,1262,
		1,0,0,0,1262,1265,1,0,0,0,1263,1261,1,0,0,0,1264,1266,3,148,74,0,1265,
		1264,1,0,0,0,1265,1266,1,0,0,0,1266,1268,1,0,0,0,1267,1269,3,150,75,0,
		1268,1267,1,0,0,0,1268,1269,1,0,0,0,1269,85,1,0,0,0,1270,1271,3,114,57,
		0,1271,1273,3,110,55,0,1272,1274,3,116,58,0,1273,1272,1,0,0,0,1273,1274,
		1,0,0,0,1274,1276,1,0,0,0,1275,1270,1,0,0,0,1276,1277,1,0,0,0,1277,1275,
		1,0,0,0,1277,1278,1,0,0,0,1278,87,1,0,0,0,1279,1280,5,148,0,0,1280,1281,
		3,64,32,0,1281,89,1,0,0,0,1282,1283,5,78,0,0,1283,1284,5,40,0,0,1284,1289,
		3,64,32,0,1285,1286,5,5,0,0,1286,1288,3,64,32,0,1287,1285,1,0,0,0,1288,
		1291,1,0,0,0,1289,1287,1,0,0,0,1289,1290,1,0,0,0,1290,1293,1,0,0,0,1291,
		1289,1,0,0,0,1292,1294,3,92,46,0,1293,1292,1,0,0,0,1293,1294,1,0,0,0,1294,
		91,1,0,0,0,1295,1296,5,79,0,0,1296,1297,3,64,32,0,1297,93,1,0,0,0,1298,
		1299,5,144,0,0,1299,1304,3,96,48,0,1300,1301,5,5,0,0,1301,1303,3,96,48,
		0,1302,1300,1,0,0,0,1303,1306,1,0,0,0,1304,1302,1,0,0,0,1304,1305,1,0,
		0,0,1305,95,1,0,0,0,1306,1304,1,0,0,0,1307,1308,5,3,0,0,1308,1313,3,64,
		32,0,1309,1310,5,5,0,0,1310,1312,3,64,32,0,1311,1309,1,0,0,0,1312,1315,
		1,0,0,0,1313,1311,1,0,0,0,1313,1314,1,0,0,0,1314,1316,1,0,0,0,1315,1313,
		1,0,0,0,1316,1317,5,4,0,0,1317,97,1,0,0,0,1318,1319,5,75,0,0,1319,1324,
		3,110,55,0,1320,1321,5,5,0,0,1321,1323,3,110,55,0,1322,1320,1,0,0,0,1323,
		1326,1,0,0,0,1324,1322,1,0,0,0,1324,1325,1,0,0,0,1325,1328,1,0,0,0,1326,
		1324,1,0,0,0,1327,1329,3,86,43,0,1328,1327,1,0,0,0,1328,1329,1,0,0,0,1329,
		99,1,0,0,0,1330,1331,5,174,0,0,1331,1332,3,224,112,0,1332,1333,5,33,0,
		0,1333,1341,3,132,66,0,1334,1335,5,5,0,0,1335,1336,3,224,112,0,1336,1337,
		5,33,0,0,1337,1338,3,132,66,0,1338,1340,1,0,0,0,1339,1334,1,0,0,0,1340,
		1343,1,0,0,0,1341,1339,1,0,0,0,1341,1342,1,0,0,0,1342,1353,1,0,0,0,1343,
		1341,1,0,0,0,1344,1349,3,132,66,0,1345,1346,5,5,0,0,1346,1348,3,132,66,
		0,1347,1345,1,0,0,0,1348,1351,1,0,0,0,1349,1347,1,0,0,0,1349,1350,1,0,
		0,0,1350,1353,1,0,0,0,1351,1349,1,0,0,0,1352,1330,1,0,0,0,1352,1344,1,
		0,0,0,1353,101,1,0,0,0,1354,1356,5,130,0,0,1355,1357,7,16,0,0,1356,1355,
		1,0,0,0,1356,1357,1,0,0,0,1357,1358,1,0,0,0,1358,1363,3,112,56,0,1359,
		1360,5,5,0,0,1360,1362,3,112,56,0,1361,1359,1,0,0,0,1362,1365,1,0,0,0,
		1363,1361,1,0,0,0,1363,1364,1,0,0,0,1364,1367,1,0,0,0,1365,1363,1,0,0,
		0,1366,1368,3,98,49,0,1367,1366,1,0,0,0,1367,1368,1,0,0,0,1368,1370,1,
		0,0,0,1369,1371,3,88,44,0,1370,1369,1,0,0,0,1370,1371,1,0,0,0,1371,1373,
		1,0,0,0,1372,1374,3,90,45,0,1373,1372,1,0,0,0,1373,1374,1,0,0,0,1374,1376,
		1,0,0,0,1375,1377,3,100,50,0,1376,1375,1,0,0,0,1376,1377,1,0,0,0,1377,
		1380,1,0,0,0,1378,1380,3,94,47,0,1379,1354,1,0,0,0,1379,1378,1,0,0,0,1380,
		103,1,0,0,0,1381,1382,3,84,42,0,1382,105,1,0,0,0,1383,1385,3,146,73,0,
		1384,1383,1,0,0,0,1384,1385,1,0,0,0,1385,1386,1,0,0,0,1386,1388,3,102,
		51,0,1387,1389,3,148,74,0,1388,1387,1,0,0,0,1388,1389,1,0,0,0,1389,1391,
		1,0,0,0,1390,1392,3,150,75,0,1391,1390,1,0,0,0,1391,1392,1,0,0,0,1392,
		107,1,0,0,0,1393,1395,3,146,73,0,1394,1393,1,0,0,0,1394,1395,1,0,0,0,1395,
		1396,1,0,0,0,1396,1406,3,102,51,0,1397,1399,5,139,0,0,1398,1400,5,29,0,
		0,1399,1398,1,0,0,0,1399,1400,1,0,0,0,1400,1404,1,0,0,0,1401,1404,5,90,
		0,0,1402,1404,5,68,0,0,1403,1397,1,0,0,0,1403,1401,1,0,0,0,1403,1402,1,
		0,0,0,1404,1405,1,0,0,0,1405,1407,3,102,51,0,1406,1403,1,0,0,0,1407,1408,
		1,0,0,0,1408,1406,1,0,0,0,1408,1409,1,0,0,0,1409,1411,1,0,0,0,1410,1412,
		3,148,74,0,1411,1410,1,0,0,0,1411,1412,1,0,0,0,1412,1414,1,0,0,0,1413,
		1415,3,150,75,0,1414,1413,1,0,0,0,1414,1415,1,0,0,0,1415,109,1,0,0,0,1416,
		1417,3,196,98,0,1417,1418,5,2,0,0,1418,1420,1,0,0,0,1419,1416,1,0,0,0,
		1419,1420,1,0,0,0,1420,1421,1,0,0,0,1421,1426,3,198,99,0,1422,1424,5,33,
		0,0,1423,1422,1,0,0,0,1423,1424,1,0,0,0,1424,1425,1,0,0,0,1425,1427,3,
		220,110,0,1426,1423,1,0,0,0,1426,1427,1,0,0,0,1427,1433,1,0,0,0,1428,1429,
		5,85,0,0,1429,1430,5,40,0,0,1430,1434,3,208,104,0,1431,1432,5,102,0,0,
		1432,1434,5,85,0,0,1433,1428,1,0,0,0,1433,1431,1,0,0,0,1433,1434,1,0,0,
		0,1434,1481,1,0,0,0,1435,1436,3,196,98,0,1436,1437,5,2,0,0,1437,1439,1,
		0,0,0,1438,1435,1,0,0,0,1438,1439,1,0,0,0,1439,1440,1,0,0,0,1440,1441,
		3,236,118,0,1441,1442,5,3,0,0,1442,1447,3,64,32,0,1443,1444,5,5,0,0,1444,
		1446,3,64,32,0,1445,1443,1,0,0,0,1446,1449,1,0,0,0,1447,1445,1,0,0,0,1447,
		1448,1,0,0,0,1448,1450,1,0,0,0,1449,1447,1,0,0,0,1450,1455,5,4,0,0,1451,
		1453,5,33,0,0,1452,1451,1,0,0,0,1452,1453,1,0,0,0,1453,1454,1,0,0,0,1454,
		1456,3,220,110,0,1455,1452,1,0,0,0,1455,1456,1,0,0,0,1456,1481,1,0,0,0,
		1457,1467,5,3,0,0,1458,1463,3,110,55,0,1459,1460,5,5,0,0,1460,1462,3,110,
		55,0,1461,1459,1,0,0,0,1462,1465,1,0,0,0,1463,1461,1,0,0,0,1463,1464,1,
		0,0,0,1464,1468,1,0,0,0,1465,1463,1,0,0,0,1466,1468,3,86,43,0,1467,1458,
		1,0,0,0,1467,1466,1,0,0,0,1468,1469,1,0,0,0,1469,1470,5,4,0,0,1470,1481,
		1,0,0,0,1471,1472,5,3,0,0,1472,1473,3,84,42,0,1473,1478,5,4,0,0,1474,1476,
		5,33,0,0,1475,1474,1,0,0,0,1475,1476,1,0,0,0,1476,1477,1,0,0,0,1477,1479,
		3,220,110,0,1478,1475,1,0,0,0,1478,1479,1,0,0,0,1479,1481,1,0,0,0,1480,
		1419,1,0,0,0,1480,1438,1,0,0,0,1480,1457,1,0,0,0,1480,1471,1,0,0,0,1481,
		111,1,0,0,0,1482,1495,5,7,0,0,1483,1484,3,198,99,0,1484,1485,5,2,0,0,1485,
		1486,5,7,0,0,1486,1495,1,0,0,0,1487,1492,3,64,32,0,1488,1490,5,33,0,0,
		1489,1488,1,0,0,0,1489,1490,1,0,0,0,1490,1491,1,0,0,0,1491,1493,3,188,
		94,0,1492,1489,1,0,0,0,1492,1493,1,0,0,0,1493,1495,1,0,0,0,1494,1482,1,
		0,0,0,1494,1483,1,0,0,0,1494,1487,1,0,0,0,1495,113,1,0,0,0,1496,1510,5,
		5,0,0,1497,1499,5,100,0,0,1498,1497,1,0,0,0,1498,1499,1,0,0,0,1499,1506,
		1,0,0,0,1500,1502,5,96,0,0,1501,1503,5,110,0,0,1502,1501,1,0,0,0,1502,
		1503,1,0,0,0,1503,1507,1,0,0,0,1504,1507,5,87,0,0,1505,1507,5,51,0,0,1506,
		1500,1,0,0,0,1506,1504,1,0,0,0,1506,1505,1,0,0,0,1506,1507,1,0,0,0,1507,
		1508,1,0,0,0,1508,1510,5,94,0,0,1509,1496,1,0,0,0,1509,1498,1,0,0,0,1510,
		115,1,0,0,0,1511,1512,5,107,0,0,1512,1526,3,64,32,0,1513,1514,5,142,0,
		0,1514,1515,5,3,0,0,1515,1520,3,202,101,0,1516,1517,5,5,0,0,1517,1519,
		3,202,101,0,1518,1516,1,0,0,0,1519,1522,1,0,0,0,1520,1518,1,0,0,0,1520,
		1521,1,0,0,0,1521,1523,1,0,0,0,1522,1520,1,0,0,0,1523,1524,5,4,0,0,1524,
		1526,1,0,0,0,1525,1511,1,0,0,0,1525,1513,1,0,0,0,1526,117,1,0,0,0,1527,
		1529,5,139,0,0,1528,1530,5,29,0,0,1529,1528,1,0,0,0,1529,1530,1,0,0,0,
		1530,1534,1,0,0,0,1531,1534,5,90,0,0,1532,1534,5,68,0,0,1533,1527,1,0,
		0,0,1533,1531,1,0,0,0,1533,1532,1,0,0,0,1534,119,1,0,0,0,1535,1537,3,48,
		24,0,1536,1535,1,0,0,0,1536,1537,1,0,0,0,1537,1538,1,0,0,0,1538,1541,5,
		141,0,0,1539,1540,5,108,0,0,1540,1542,7,8,0,0,1541,1539,1,0,0,0,1541,1542,
		1,0,0,0,1542,1543,1,0,0,0,1543,1544,3,126,63,0,1544,1547,5,131,0,0,1545,
		1548,3,202,101,0,1546,1548,3,122,61,0,1547,1545,1,0,0,0,1547,1546,1,0,
		0,0,1548,1549,1,0,0,0,1549,1550,5,6,0,0,1550,1561,3,64,32,0,1551,1554,
		5,5,0,0,1552,1555,3,202,101,0,1553,1555,3,122,61,0,1554,1552,1,0,0,0,1554,
		1553,1,0,0,0,1555,1556,1,0,0,0,1556,1557,5,6,0,0,1557,1558,3,64,32,0,1558,
		1560,1,0,0,0,1559,1551,1,0,0,0,1560,1563,1,0,0,0,1561,1559,1,0,0,0,1561,
		1562,1,0,0,0,1562,1576,1,0,0,0,1563,1561,1,0,0,0,1564,1574,5,75,0,0,1565,
		1570,3,110,55,0,1566,1567,5,5,0,0,1567,1569,3,110,55,0,1568,1566,1,0,0,
		0,1569,1572,1,0,0,0,1570,1568,1,0,0,0,1570,1571,1,0,0,0,1571,1575,1,0,
		0,0,1572,1570,1,0,0,0,1573,1575,3,86,43,0,1574,1565,1,0,0,0,1574,1573,
		1,0,0,0,1575,1577,1,0,0,0,1576,1564,1,0,0,0,1576,1577,1,0,0,0,1577,1580,
		1,0,0,0,1578,1579,5,148,0,0,1579,1581,3,64,32,0,1580,1578,1,0,0,0,1580,
		1581,1,0,0,0,1581,1583,1,0,0,0,1582,1584,3,74,37,0,1583,1582,1,0,0,0,1583,
		1584,1,0,0,0,1584,121,1,0,0,0,1585,1586,5,3,0,0,1586,1591,3,202,101,0,
		1587,1588,5,5,0,0,1588,1590,3,202,101,0,1589,1587,1,0,0,0,1590,1593,1,
		0,0,0,1591,1589,1,0,0,0,1591,1592,1,0,0,0,1592,1594,1,0,0,0,1593,1591,
		1,0,0,0,1594,1595,5,4,0,0,1595,123,1,0,0,0,1596,1598,3,48,24,0,1597,1596,
		1,0,0,0,1597,1598,1,0,0,0,1598,1599,1,0,0,0,1599,1602,5,141,0,0,1600,1601,
		5,108,0,0,1601,1603,7,8,0,0,1602,1600,1,0,0,0,1602,1603,1,0,0,0,1603,1604,
		1,0,0,0,1604,1605,3,126,63,0,1605,1608,5,131,0,0,1606,1609,3,202,101,0,
		1607,1609,3,122,61,0,1608,1606,1,0,0,0,1608,1607,1,0,0,0,1609,1610,1,0,
		0,0,1610,1611,5,6,0,0,1611,1622,3,64,32,0,1612,1615,5,5,0,0,1613,1616,
		3,202,101,0,1614,1616,3,122,61,0,1615,1613,1,0,0,0,1615,1614,1,0,0,0,1616,
		1617,1,0,0,0,1617,1618,5,6,0,0,1618,1619,3,64,32,0,1619,1621,1,0,0,0,1620,
		1612,1,0,0,0,1621,1624,1,0,0,0,1622,1620,1,0,0,0,1622,1623,1,0,0,0,1623,
		1627,1,0,0,0,1624,1622,1,0,0,0,1625,1626,5,148,0,0,1626,1628,3,64,32,0,
		1627,1625,1,0,0,0,1627,1628,1,0,0,0,1628,1630,1,0,0,0,1629,1631,3,74,37,
		0,1630,1629,1,0,0,0,1630,1631,1,0,0,0,1631,1636,1,0,0,0,1632,1634,3,148,
		74,0,1633,1632,1,0,0,0,1633,1634,1,0,0,0,1634,1635,1,0,0,0,1635,1637,3,
		150,75,0,1636,1633,1,0,0,0,1636,1637,1,0,0,0,1637,125,1,0,0,0,1638,1639,
		3,196,98,0,1639,1640,5,2,0,0,1640,1642,1,0,0,0,1641,1638,1,0,0,0,1641,
		1642,1,0,0,0,1642,1643,1,0,0,0,1643,1646,3,198,99,0,1644,1645,5,33,0,0,
		1645,1647,3,226,113,0,1646,1644,1,0,0,0,1646,1647,1,0,0,0,1647,1653,1,
		0,0,0,1648,1649,5,85,0,0,1649,1650,5,40,0,0,1650,1654,3,208,104,0,1651,
		1652,5,102,0,0,1652,1654,5,85,0,0,1653,1648,1,0,0,0,1653,1651,1,0,0,0,
		1653,1654,1,0,0,0,1654,127,1,0,0,0,1655,1657,5,143,0,0,1656,1658,3,196,
		98,0,1657,1656,1,0,0,0,1657,1658,1,0,0,0,1658,1661,1,0,0,0,1659,1660,5,
		91,0,0,1660,1662,3,228,114,0,1661,1659,1,0,0,0,1661,1662,1,0,0,0,1662,
		129,1,0,0,0,1663,1664,5,178,0,0,1664,1665,5,3,0,0,1665,1666,5,148,0,0,
		1666,1667,3,64,32,0,1667,1668,5,4,0,0,1668,131,1,0,0,0,1669,1671,5,3,0,
		0,1670,1672,3,230,115,0,1671,1670,1,0,0,0,1671,1672,1,0,0,0,1672,1683,
		1,0,0,0,1673,1674,5,153,0,0,1674,1675,5,40,0,0,1675,1680,3,64,32,0,1676,
		1677,5,5,0,0,1677,1679,3,64,32,0,1678,1676,1,0,0,0,1679,1682,1,0,0,0,1680,
		1678,1,0,0,0,1680,1681,1,0,0,0,1681,1684,1,0,0,0,1682,1680,1,0,0,0,1683,
		1673,1,0,0,0,1683,1684,1,0,0,0,1684,1685,1,0,0,0,1685,1686,5,109,0,0,1686,
		1687,5,40,0,0,1687,1692,3,154,77,0,1688,1689,5,5,0,0,1689,1691,3,154,77,
		0,1690,1688,1,0,0,0,1691,1694,1,0,0,0,1692,1690,1,0,0,0,1692,1693,1,0,
		0,0,1693,1696,1,0,0,0,1694,1692,1,0,0,0,1695,1697,3,136,68,0,1696,1695,
		1,0,0,0,1696,1697,1,0,0,0,1697,1698,1,0,0,0,1698,1699,5,4,0,0,1699,133,
		1,0,0,0,1700,1734,5,152,0,0,1701,1735,3,224,112,0,1702,1704,5,3,0,0,1703,
		1705,3,230,115,0,1704,1703,1,0,0,0,1704,1705,1,0,0,0,1705,1716,1,0,0,0,
		1706,1707,5,153,0,0,1707,1708,5,40,0,0,1708,1713,3,64,32,0,1709,1710,5,
		5,0,0,1710,1712,3,64,32,0,1711,1709,1,0,0,0,1712,1715,1,0,0,0,1713,1711,
		1,0,0,0,1713,1714,1,0,0,0,1714,1717,1,0,0,0,1715,1713,1,0,0,0,1716,1706,
		1,0,0,0,1716,1717,1,0,0,0,1717,1728,1,0,0,0,1718,1719,5,109,0,0,1719,1720,
		5,40,0,0,1720,1725,3,154,77,0,1721,1722,5,5,0,0,1722,1724,3,154,77,0,1723,
		1721,1,0,0,0,1724,1727,1,0,0,0,1725,1723,1,0,0,0,1725,1726,1,0,0,0,1726,
		1729,1,0,0,0,1727,1725,1,0,0,0,1728,1718,1,0,0,0,1728,1729,1,0,0,0,1729,
		1731,1,0,0,0,1730,1732,3,136,68,0,1731,1730,1,0,0,0,1731,1732,1,0,0,0,
		1732,1733,1,0,0,0,1733,1735,5,4,0,0,1734,1701,1,0,0,0,1734,1702,1,0,0,
		0,1735,135,1,0,0,0,1736,1744,3,138,69,0,1737,1738,5,180,0,0,1738,1739,
		5,101,0,0,1739,1745,5,182,0,0,1740,1741,5,157,0,0,1741,1745,5,127,0,0,
		1742,1745,5,78,0,0,1743,1745,5,181,0,0,1744,1737,1,0,0,0,1744,1740,1,0,
		0,0,1744,1742,1,0,0,0,1744,1743,1,0,0,0,1744,1745,1,0,0,0,1745,137,1,0,
		0,0,1746,1753,7,17,0,0,1747,1754,3,162,81,0,1748,1749,5,39,0,0,1749,1750,
		3,158,79,0,1750,1751,5,32,0,0,1751,1752,3,160,80,0,1752,1754,1,0,0,0,1753,
		1747,1,0,0,0,1753,1748,1,0,0,0,1754,139,1,0,0,0,1755,1756,3,232,116,0,
		1756,1766,5,3,0,0,1757,1762,3,64,32,0,1758,1759,5,5,0,0,1759,1761,3,64,
		32,0,1760,1758,1,0,0,0,1761,1764,1,0,0,0,1762,1760,1,0,0,0,1762,1763,1,
		0,0,0,1763,1767,1,0,0,0,1764,1762,1,0,0,0,1765,1767,5,7,0,0,1766,1757,
		1,0,0,0,1766,1765,1,0,0,0,1767,1768,1,0,0,0,1768,1769,5,4,0,0,1769,141,
		1,0,0,0,1770,1771,3,234,117,0,1771,1784,5,3,0,0,1772,1774,5,62,0,0,1773,
		1772,1,0,0,0,1773,1774,1,0,0,0,1774,1775,1,0,0,0,1775,1780,3,64,32,0,1776,
		1777,5,5,0,0,1777,1779,3,64,32,0,1778,1776,1,0,0,0,1779,1782,1,0,0,0,1780,
		1778,1,0,0,0,1780,1781,1,0,0,0,1781,1785,1,0,0,0,1782,1780,1,0,0,0,1783,
		1785,5,7,0,0,1784,1773,1,0,0,0,1784,1783,1,0,0,0,1784,1785,1,0,0,0,1785,
		1786,1,0,0,0,1786,1788,5,4,0,0,1787,1789,3,130,65,0,1788,1787,1,0,0,0,
		1788,1789,1,0,0,0,1789,143,1,0,0,0,1790,1791,3,164,82,0,1791,1801,5,3,
		0,0,1792,1797,3,64,32,0,1793,1794,5,5,0,0,1794,1796,3,64,32,0,1795,1793,
		1,0,0,0,1796,1799,1,0,0,0,1797,1795,1,0,0,0,1797,1798,1,0,0,0,1798,1802,
		1,0,0,0,1799,1797,1,0,0,0,1800,1802,5,7,0,0,1801,1792,1,0,0,0,1801,1800,
		1,0,0,0,1801,1802,1,0,0,0,1802,1803,1,0,0,0,1803,1805,5,4,0,0,1804,1806,
		3,130,65,0,1805,1804,1,0,0,0,1805,1806,1,0,0,0,1806,1807,1,0,0,0,1807,
		1810,5,152,0,0,1808,1811,3,132,66,0,1809,1811,3,224,112,0,1810,1808,1,
		0,0,0,1810,1809,1,0,0,0,1811,145,1,0,0,0,1812,1814,5,149,0,0,1813,1815,
		5,116,0,0,1814,1813,1,0,0,0,1814,1815,1,0,0,0,1815,1816,1,0,0,0,1816,1821,
		3,54,27,0,1817,1818,5,5,0,0,1818,1820,3,54,27,0,1819,1817,1,0,0,0,1820,
		1823,1,0,0,0,1821,1819,1,0,0,0,1821,1822,1,0,0,0,1822,147,1,0,0,0,1823,
		1821,1,0,0,0,1824,1825,5,109,0,0,1825,1826,5,40,0,0,1826,1831,3,154,77,
		0,1827,1828,5,5,0,0,1828,1830,3,154,77,0,1829,1827,1,0,0,0,1830,1833,1,
		0,0,0,1831,1829,1,0,0,0,1831,1832,1,0,0,0,1832,149,1,0,0,0,1833,1831,1,
		0,0,0,1834,1835,5,98,0,0,1835,1837,3,64,32,0,1836,1838,3,152,76,0,1837,
		1836,1,0,0,0,1837,1838,1,0,0,0,1838,151,1,0,0,0,1839,1840,5,106,0,0,1840,
		1841,3,64,32,0,1841,153,1,0,0,0,1842,1845,3,64,32,0,1843,1844,5,45,0,0,
		1844,1846,3,204,102,0,1845,1843,1,0,0,0,1845,1846,1,0,0,0,1846,1848,1,
		0,0,0,1847,1849,3,156,78,0,1848,1847,1,0,0,0,1848,1849,1,0,0,0,1849,1852,
		1,0,0,0,1850,1851,5,175,0,0,1851,1853,7,18,0,0,1852,1850,1,0,0,0,1852,
		1853,1,0,0,0,1853,155,1,0,0,0,1854,1855,7,19,0,0,1855,157,1,0,0,0,1856,
		1857,3,64,32,0,1857,1858,5,155,0,0,1858,1867,1,0,0,0,1859,1860,3,64,32,
		0,1860,1861,5,158,0,0,1861,1867,1,0,0,0,1862,1863,5,157,0,0,1863,1867,
		5,127,0,0,1864,1865,5,156,0,0,1865,1867,5,155,0,0,1866,1856,1,0,0,0,1866,
		1859,1,0,0,0,1866,1862,1,0,0,0,1866,1864,1,0,0,0,1867,159,1,0,0,0,1868,
		1869,3,64,32,0,1869,1870,5,155,0,0,1870,1879,1,0,0,0,1871,1872,3,64,32,
		0,1872,1873,5,158,0,0,1873,1879,1,0,0,0,1874,1875,5,157,0,0,1875,1879,
		5,127,0,0,1876,1877,5,156,0,0,1877,1879,5,158,0,0,1878,1868,1,0,0,0,1878,
		1871,1,0,0,0,1878,1874,1,0,0,0,1878,1876,1,0,0,0,1879,161,1,0,0,0,1880,
		1881,3,64,32,0,1881,1882,5,155,0,0,1882,1888,1,0,0,0,1883,1884,5,156,0,
		0,1884,1888,5,155,0,0,1885,1886,5,157,0,0,1886,1888,5,127,0,0,1887,1880,
		1,0,0,0,1887,1883,1,0,0,0,1887,1885,1,0,0,0,1888,163,1,0,0,0,1889,1890,
		7,20,0,0,1890,1891,5,3,0,0,1891,1892,3,64,32,0,1892,1893,5,4,0,0,1893,
		1894,5,152,0,0,1894,1896,5,3,0,0,1895,1897,3,170,85,0,1896,1895,1,0,0,
		0,1896,1897,1,0,0,0,1897,1898,1,0,0,0,1898,1900,3,174,87,0,1899,1901,3,
		138,69,0,1900,1899,1,0,0,0,1900,1901,1,0,0,0,1901,1902,1,0,0,0,1902,1903,
		5,4,0,0,1903,1975,1,0,0,0,1904,1905,7,21,0,0,1905,1906,5,3,0,0,1906,1907,
		5,4,0,0,1907,1908,5,152,0,0,1908,1910,5,3,0,0,1909,1911,3,170,85,0,1910,
		1909,1,0,0,0,1910,1911,1,0,0,0,1911,1913,1,0,0,0,1912,1914,3,172,86,0,
		1913,1912,1,0,0,0,1913,1914,1,0,0,0,1914,1915,1,0,0,0,1915,1975,5,4,0,
		0,1916,1917,7,22,0,0,1917,1918,5,3,0,0,1918,1919,5,4,0,0,1919,1920,5,152,
		0,0,1920,1922,5,3,0,0,1921,1923,3,170,85,0,1922,1921,1,0,0,0,1922,1923,
		1,0,0,0,1923,1924,1,0,0,0,1924,1925,3,174,87,0,1925,1926,5,4,0,0,1926,
		1975,1,0,0,0,1927,1928,7,23,0,0,1928,1929,5,3,0,0,1929,1931,3,64,32,0,
		1930,1932,3,166,83,0,1931,1930,1,0,0,0,1931,1932,1,0,0,0,1932,1934,1,0,
		0,0,1933,1935,3,168,84,0,1934,1933,1,0,0,0,1934,1935,1,0,0,0,1935,1936,
		1,0,0,0,1936,1937,5,4,0,0,1937,1938,5,152,0,0,1938,1940,5,3,0,0,1939,1941,
		3,170,85,0,1940,1939,1,0,0,0,1940,1941,1,0,0,0,1941,1942,1,0,0,0,1942,
		1943,3,174,87,0,1943,1944,5,4,0,0,1944,1975,1,0,0,0,1945,1946,5,164,0,
		0,1946,1947,5,3,0,0,1947,1948,3,64,32,0,1948,1949,5,5,0,0,1949,1950,3,
		34,17,0,1950,1951,5,4,0,0,1951,1952,5,152,0,0,1952,1954,5,3,0,0,1953,1955,
		3,170,85,0,1954,1953,1,0,0,0,1954,1955,1,0,0,0,1955,1956,1,0,0,0,1956,
		1958,3,174,87,0,1957,1959,3,138,69,0,1958,1957,1,0,0,0,1958,1959,1,0,0,
		0,1959,1960,1,0,0,0,1960,1961,5,4,0,0,1961,1975,1,0,0,0,1962,1963,5,165,
		0,0,1963,1964,5,3,0,0,1964,1965,3,64,32,0,1965,1966,5,4,0,0,1966,1967,
		5,152,0,0,1967,1969,5,3,0,0,1968,1970,3,170,85,0,1969,1968,1,0,0,0,1969,
		1970,1,0,0,0,1970,1971,1,0,0,0,1971,1972,3,174,87,0,1972,1973,5,4,0,0,
		1973,1975,1,0,0,0,1974,1889,1,0,0,0,1974,1904,1,0,0,0,1974,1916,1,0,0,
		0,1974,1927,1,0,0,0,1974,1945,1,0,0,0,1974,1962,1,0,0,0,1975,165,1,0,0,
		0,1976,1977,5,5,0,0,1977,1978,3,34,17,0,1978,167,1,0,0,0,1979,1980,5,5,
		0,0,1980,1981,3,34,17,0,1981,169,1,0,0,0,1982,1983,5,153,0,0,1983,1985,
		5,40,0,0,1984,1986,3,64,32,0,1985,1984,1,0,0,0,1986,1987,1,0,0,0,1987,
		1985,1,0,0,0,1987,1988,1,0,0,0,1988,171,1,0,0,0,1989,1990,5,109,0,0,1990,
		1992,5,40,0,0,1991,1993,3,64,32,0,1992,1991,1,0,0,0,1993,1994,1,0,0,0,
		1994,1992,1,0,0,0,1994,1995,1,0,0,0,1995,173,1,0,0,0,1996,1997,5,109,0,
		0,1997,1998,5,40,0,0,1998,1999,3,176,88,0,1999,175,1,0,0,0,2000,2002,3,
		64,32,0,2001,2003,3,156,78,0,2002,2001,1,0,0,0,2002,2003,1,0,0,0,2003,
		2011,1,0,0,0,2004,2005,5,5,0,0,2005,2007,3,64,32,0,2006,2008,3,156,78,
		0,2007,2006,1,0,0,0,2007,2008,1,0,0,0,2008,2010,1,0,0,0,2009,2004,1,0,
		0,0,2010,2013,1,0,0,0,2011,2009,1,0,0,0,2011,2012,1,0,0,0,2012,177,1,0,
		0,0,2013,2011,1,0,0,0,2014,2015,3,84,42,0,2015,179,1,0,0,0,2016,2017,3,
		84,42,0,2017,181,1,0,0,0,2018,2019,7,24,0,0,2019,183,1,0,0,0,2020,2021,
		5,188,0,0,2021,185,1,0,0,0,2022,2025,3,64,32,0,2023,2025,3,28,14,0,2024,
		2022,1,0,0,0,2024,2023,1,0,0,0,2025,187,1,0,0,0,2026,2027,7,25,0,0,2027,
		189,1,0,0,0,2028,2029,7,26,0,0,2029,191,1,0,0,0,2030,2031,3,238,119,0,
		2031,193,1,0,0,0,2032,2033,3,238,119,0,2033,195,1,0,0,0,2034,2035,3,238,
		119,0,2035,197,1,0,0,0,2036,2037,3,238,119,0,2037,199,1,0,0,0,2038,2039,
		3,238,119,0,2039,201,1,0,0,0,2040,2041,3,238,119,0,2041,203,1,0,0,0,2042,
		2043,3,238,119,0,2043,205,1,0,0,0,2044,2045,3,238,119,0,2045,207,1,0,0,
		0,2046,2047,3,238,119,0,2047,209,1,0,0,0,2048,2049,3,238,119,0,2049,211,
		1,0,0,0,2050,2051,3,238,119,0,2051,213,1,0,0,0,2052,2053,3,238,119,0,2053,
		215,1,0,0,0,2054,2055,3,238,119,0,2055,217,1,0,0,0,2056,2057,3,238,119,
		0,2057,219,1,0,0,0,2058,2059,3,238,119,0,2059,221,1,0,0,0,2060,2061,3,
		238,119,0,2061,223,1,0,0,0,2062,2063,3,238,119,0,2063,225,1,0,0,0,2064,
		2065,3,238,119,0,2065,227,1,0,0,0,2066,2067,3,238,119,0,2067,229,1,0,0,
		0,2068,2069,3,238,119,0,2069,231,1,0,0,0,2070,2071,3,238,119,0,2071,233,
		1,0,0,0,2072,2073,3,238,119,0,2073,235,1,0,0,0,2074,2075,3,238,119,0,2075,
		237,1,0,0,0,2076,2084,5,185,0,0,2077,2084,3,190,95,0,2078,2084,5,188,0,
		0,2079,2080,5,3,0,0,2080,2081,3,238,119,0,2081,2082,5,4,0,0,2082,2084,
		1,0,0,0,2083,2076,1,0,0,0,2083,2077,1,0,0,0,2083,2078,1,0,0,0,2083,2079,
		1,0,0,0,2084,239,1,0,0,0,297,243,251,258,263,269,275,277,303,310,317,323,
		327,332,335,342,345,349,357,361,363,367,371,375,378,385,391,397,402,413,
		419,423,427,430,434,440,445,454,461,467,471,475,480,486,498,502,507,510,
		513,516,520,523,537,544,551,553,556,562,567,575,580,595,601,611,616,626,
		630,632,636,641,643,651,657,662,669,680,683,685,692,696,703,709,715,721,
		726,735,740,751,756,767,772,776,792,802,807,815,827,832,840,847,850,853,
		860,863,866,869,873,881,886,896,901,910,917,921,925,928,936,949,952,960,
		969,973,978,1008,1020,1025,1037,1043,1050,1054,1064,1067,1073,1079,1088,
		1091,1095,1097,1099,1108,1120,1126,1133,1139,1144,1147,1151,1154,1158,
		1161,1169,1180,1186,1188,1196,1203,1210,1215,1217,1223,1232,1237,1244,
		1248,1250,1253,1261,1265,1268,1273,1277,1289,1293,1304,1313,1324,1328,
		1341,1349,1352,1356,1363,1367,1370,1373,1376,1379,1384,1388,1391,1394,
		1399,1403,1408,1411,1414,1419,1423,1426,1433,1438,1447,1452,1455,1463,
		1467,1475,1478,1480,1489,1492,1494,1498,1502,1506,1509,1520,1525,1529,
		1533,1536,1541,1547,1554,1561,1570,1574,1576,1580,1583,1591,1597,1602,
		1608,1615,1622,1627,1630,1633,1636,1641,1646,1653,1657,1661,1671,1680,
		1683,1692,1696,1704,1713,1716,1725,1728,1731,1734,1744,1753,1762,1766,
		1773,1780,1784,1788,1797,1801,1805,1810,1814,1821,1831,1837,1845,1848,
		1852,1866,1878,1887,1896,1900,1910,1913,1922,1931,1934,1940,1954,1958,
		1969,1974,1987,1994,2002,2007,2011,2024,2083
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace SqlParser
